
SeniorDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000199e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  0000199e  00001a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  008001fc  008001fc  00001bce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006644  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113a  00000000  00000000  00008528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b07  00000000  00000000  00009662  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000b16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c85  00000000  00000000  0000bb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032ab  00000000  00000000  0000c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0000fa94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 04 	jmp	0x966	; 0x966 <__ctors_end>
       4:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
       8:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
       c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      10:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      14:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      18:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      1c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      20:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      24:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      28:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      2c:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_11>
      30:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      34:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      38:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      3c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      40:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      44:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      48:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      4c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      50:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__bad_interrupt>
      54:	60 05       	cpc	r22, r0
      56:	69 05       	cpc	r22, r9
      58:	25 05       	cpc	r18, r5
      5a:	2a 05       	cpc	r18, r10
      5c:	35 05       	cpc	r19, r5
      5e:	40 05       	cpc	r20, r0
      60:	45 05       	cpc	r20, r5
      62:	4a 05       	cpc	r20, r10
      64:	55 05       	cpc	r21, r5

00000066 <__trampolines_end>:
      66:	00 00       	nop
      68:	00 00       	nop
      6a:	00 3e       	cpi	r16, 0xE0	; 224
      6c:	5b 4f       	sbci	r21, 0xFB	; 251
      6e:	5b 3e       	cpi	r21, 0xEB	; 235
      70:	3e 6b       	ori	r19, 0xBE	; 190
      72:	4f 6b       	ori	r20, 0xBF	; 191
      74:	3e 1c       	adc	r3, r14
      76:	3e 7c       	andi	r19, 0xCE	; 206
      78:	3e 1c       	adc	r3, r14
      7a:	18 3c       	cpi	r17, 0xC8	; 200
      7c:	7e 3c       	cpi	r23, 0xCE	; 206
      7e:	18 1c       	adc	r1, r8
      80:	57 7d       	andi	r21, 0xD7	; 215
      82:	57 1c       	adc	r5, r7
      84:	1c 5e       	subi	r17, 0xEC	; 236
      86:	7f 5e       	subi	r23, 0xEF	; 239
      88:	1c 00       	.word	0x001c	; ????
      8a:	18 3c       	cpi	r17, 0xC8	; 200
      8c:	18 00       	.word	0x0018	; ????
      8e:	ff e7       	ldi	r31, 0x7F	; 127
      90:	c3 e7       	ldi	r28, 0x73	; 115
      92:	ff 00       	.word	0x00ff	; ????
      94:	18 24       	eor	r1, r8
      96:	18 00       	.word	0x0018	; ????
      98:	ff e7       	ldi	r31, 0x7F	; 127
      9a:	db e7       	ldi	r29, 0x7B	; 123
      9c:	ff 30       	cpi	r31, 0x0F	; 15
      9e:	48 3a       	cpi	r20, 0xA8	; 168
      a0:	06 0e       	add	r0, r22
      a2:	26 29       	or	r18, r6
      a4:	79 29       	or	r23, r9
      a6:	26 40       	sbci	r18, 0x06	; 6
      a8:	7f 05       	cpc	r23, r15
      aa:	05 07       	cpc	r16, r21
      ac:	40 7f       	andi	r20, 0xF0	; 240
      ae:	05 25       	eor	r16, r5
      b0:	3f 5a       	subi	r19, 0xAF	; 175
      b2:	3c e7       	ldi	r19, 0x7C	; 124
      b4:	3c 5a       	subi	r19, 0xAC	; 172
      b6:	7f 3e       	cpi	r23, 0xEF	; 239
      b8:	1c 1c       	adc	r1, r12
      ba:	08 08       	sbc	r0, r8
      bc:	1c 1c       	adc	r1, r12
      be:	3e 7f       	andi	r19, 0xFE	; 254
      c0:	14 22       	and	r1, r20
      c2:	7f 22       	and	r7, r31
      c4:	14 5f       	subi	r17, 0xF4	; 244
      c6:	5f 00       	.word	0x005f	; ????
      c8:	5f 5f       	subi	r21, 0xFF	; 255
      ca:	06 09       	sbc	r16, r6
      cc:	7f 01       	movw	r14, r30
      ce:	7f 00       	.word	0x007f	; ????
      d0:	66 89       	ldd	r22, Z+22	; 0x16
      d2:	95 6a       	ori	r25, 0xA5	; 165
      d4:	60 60       	ori	r22, 0x00	; 0
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 94       	com	r6
      da:	a2 ff       	sbrs	r26, 2
      dc:	a2 94       	swap	r10
      de:	08 04       	cpc	r0, r8
      e0:	7e 04       	cpc	r7, r14
      e2:	08 10       	cpse	r0, r8
      e4:	20 7e       	andi	r18, 0xE0	; 224
      e6:	20 10       	cpse	r2, r0
      e8:	08 08       	sbc	r0, r8
      ea:	2a 1c       	adc	r2, r10
      ec:	08 08       	sbc	r0, r8
      ee:	1c 2a       	or	r1, r28
      f0:	08 08       	sbc	r0, r8
      f2:	1e 10       	cpse	r1, r14
      f4:	10 10       	cpse	r1, r0
      f6:	10 0c       	add	r1, r0
      f8:	1e 0c       	add	r1, r14
      fa:	1e 0c       	add	r1, r14
      fc:	30 38       	cpi	r19, 0x80	; 128
      fe:	3e 38       	cpi	r19, 0x8E	; 142
     100:	30 06       	cpc	r3, r16
     102:	0e 3e       	cpi	r16, 0xEE	; 238
     104:	0e 06       	cpc	r0, r30
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 5f       	subi	r16, 0xF0	; 240
     10e:	00 00       	nop
     110:	00 07       	cpc	r16, r16
     112:	00 07       	cpc	r16, r16
     114:	00 14       	cp	r0, r0
     116:	7f 14       	cp	r7, r15
     118:	7f 14       	cp	r7, r15
     11a:	24 2a       	or	r2, r20
     11c:	7f 2a       	or	r7, r31
     11e:	12 23       	and	r17, r18
     120:	13 08       	sbc	r1, r3
     122:	64 62       	ori	r22, 0x24	; 36
     124:	36 49       	sbci	r19, 0x96	; 150
     126:	56 20       	and	r5, r6
     128:	50 00       	.word	0x0050	; ????
     12a:	08 07       	cpc	r16, r24
     12c:	03 00       	.word	0x0003	; ????
     12e:	00 1c       	adc	r0, r0
     130:	22 41       	sbci	r18, 0x12	; 18
     132:	00 00       	nop
     134:	41 22       	and	r4, r17
     136:	1c 00       	.word	0x001c	; ????
     138:	2a 1c       	adc	r2, r10
     13a:	7f 1c       	adc	r7, r15
     13c:	2a 08       	sbc	r2, r10
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 80       	ld	r0, Z
     144:	70 30       	cpi	r23, 0x00	; 0
     146:	00 08       	sbc	r0, r0
     148:	08 08       	sbc	r0, r8
     14a:	08 08       	sbc	r0, r8
     14c:	00 00       	nop
     14e:	60 60       	ori	r22, 0x00	; 0
     150:	00 20       	and	r0, r0
     152:	10 08       	sbc	r1, r0
     154:	04 02       	muls	r16, r20
     156:	3e 51       	subi	r19, 0x1E	; 30
     158:	49 45       	sbci	r20, 0x59	; 89
     15a:	3e 00       	.word	0x003e	; ????
     15c:	42 7f       	andi	r20, 0xF2	; 242
     15e:	40 00       	.word	0x0040	; ????
     160:	72 49       	sbci	r23, 0x92	; 146
     162:	49 49       	sbci	r20, 0x99	; 153
     164:	46 21       	and	r20, r6
     166:	41 49       	sbci	r20, 0x91	; 145
     168:	4d 33       	cpi	r20, 0x3D	; 61
     16a:	18 14       	cp	r1, r8
     16c:	12 7f       	andi	r17, 0xF2	; 242
     16e:	10 27       	eor	r17, r16
     170:	45 45       	sbci	r20, 0x55	; 85
     172:	45 39       	cpi	r20, 0x95	; 149
     174:	3c 4a       	sbci	r19, 0xAC	; 172
     176:	49 49       	sbci	r20, 0x99	; 153
     178:	31 41       	sbci	r19, 0x11	; 17
     17a:	21 11       	cpse	r18, r1
     17c:	09 07       	cpc	r16, r25
     17e:	36 49       	sbci	r19, 0x96	; 150
     180:	49 49       	sbci	r20, 0x99	; 153
     182:	36 46       	sbci	r19, 0x66	; 102
     184:	49 49       	sbci	r20, 0x99	; 153
     186:	29 1e       	adc	r2, r25
     188:	00 00       	nop
     18a:	14 00       	.word	0x0014	; ????
     18c:	00 00       	nop
     18e:	40 34       	cpi	r20, 0x40	; 64
     190:	00 00       	nop
     192:	00 08       	sbc	r0, r0
     194:	14 22       	and	r1, r20
     196:	41 14       	cp	r4, r1
     198:	14 14       	cp	r1, r4
     19a:	14 14       	cp	r1, r4
     19c:	00 41       	sbci	r16, 0x10	; 16
     19e:	22 14       	cp	r2, r2
     1a0:	08 02       	muls	r16, r24
     1a2:	01 59       	subi	r16, 0x91	; 145
     1a4:	09 06       	cpc	r0, r25
     1a6:	3e 41       	sbci	r19, 0x1E	; 30
     1a8:	5d 59       	subi	r21, 0x9D	; 157
     1aa:	4e 7c       	andi	r20, 0xCE	; 206
     1ac:	12 11       	cpse	r17, r2
     1ae:	12 7c       	andi	r17, 0xC2	; 194
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 3e       	cpi	r19, 0xE6	; 230
     1b6:	41 41       	sbci	r20, 0x11	; 17
     1b8:	41 22       	and	r4, r17
     1ba:	7f 41       	sbci	r23, 0x1F	; 31
     1bc:	41 41       	sbci	r20, 0x11	; 17
     1be:	3e 7f       	andi	r19, 0xFE	; 254
     1c0:	49 49       	sbci	r20, 0x99	; 153
     1c2:	49 41       	sbci	r20, 0x19	; 25
     1c4:	7f 09       	sbc	r23, r15
     1c6:	09 09       	sbc	r16, r9
     1c8:	01 3e       	cpi	r16, 0xE1	; 225
     1ca:	41 41       	sbci	r20, 0x11	; 17
     1cc:	51 73       	andi	r21, 0x31	; 49
     1ce:	7f 08       	sbc	r7, r15
     1d0:	08 08       	sbc	r0, r8
     1d2:	7f 00       	.word	0x007f	; ????
     1d4:	41 7f       	andi	r20, 0xF1	; 241
     1d6:	41 00       	.word	0x0041	; ????
     1d8:	20 40       	sbci	r18, 0x00	; 0
     1da:	41 3f       	cpi	r20, 0xF1	; 241
     1dc:	01 7f       	andi	r16, 0xF1	; 241
     1de:	08 14       	cp	r0, r8
     1e0:	22 41       	sbci	r18, 0x12	; 18
     1e2:	7f 40       	sbci	r23, 0x0F	; 15
     1e4:	40 40       	sbci	r20, 0x00	; 0
     1e6:	40 7f       	andi	r20, 0xF0	; 240
     1e8:	02 1c       	adc	r0, r2
     1ea:	02 7f       	andi	r16, 0xF2	; 242
     1ec:	7f 04       	cpc	r7, r15
     1ee:	08 10       	cpse	r0, r8
     1f0:	7f 3e       	cpi	r23, 0xEF	; 239
     1f2:	41 41       	sbci	r20, 0x11	; 17
     1f4:	41 3e       	cpi	r20, 0xE1	; 225
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	06 3e       	cpi	r16, 0xE6	; 230
     1fc:	41 51       	subi	r20, 0x11	; 17
     1fe:	21 5e       	subi	r18, 0xE1	; 225
     200:	7f 09       	sbc	r23, r15
     202:	19 29       	or	r17, r9
     204:	46 26       	eor	r4, r22
     206:	49 49       	sbci	r20, 0x99	; 153
     208:	49 32       	cpi	r20, 0x29	; 41
     20a:	03 01       	movw	r0, r6
     20c:	7f 01       	movw	r14, r30
     20e:	03 3f       	cpi	r16, 0xF3	; 243
     210:	40 40       	sbci	r20, 0x00	; 0
     212:	40 3f       	cpi	r20, 0xF0	; 240
     214:	1f 20       	and	r1, r15
     216:	40 20       	and	r4, r0
     218:	1f 3f       	cpi	r17, 0xFF	; 255
     21a:	40 38       	cpi	r20, 0x80	; 128
     21c:	40 3f       	cpi	r20, 0xF0	; 240
     21e:	63 14       	cp	r6, r3
     220:	08 14       	cp	r0, r8
     222:	63 03       	mulsu	r22, r19
     224:	04 78       	andi	r16, 0x84	; 132
     226:	04 03       	mulsu	r16, r20
     228:	61 59       	subi	r22, 0x91	; 145
     22a:	49 4d       	sbci	r20, 0xD9	; 217
     22c:	43 00       	.word	0x0043	; ????
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	41 41       	sbci	r20, 0x11	; 17
     232:	02 04       	cpc	r0, r2
     234:	08 10       	cpse	r0, r8
     236:	20 00       	.word	0x0020	; ????
     238:	41 41       	sbci	r20, 0x11	; 17
     23a:	41 7f       	andi	r20, 0xF1	; 241
     23c:	04 02       	muls	r16, r20
     23e:	01 02       	muls	r16, r17
     240:	04 40       	sbci	r16, 0x04	; 4
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	00 03       	mulsu	r16, r16
     248:	07 08       	sbc	r0, r7
     24a:	00 20       	and	r0, r0
     24c:	54 54       	subi	r21, 0x44	; 68
     24e:	78 40       	sbci	r23, 0x08	; 8
     250:	7f 28       	or	r7, r15
     252:	44 44       	sbci	r20, 0x44	; 68
     254:	38 38       	cpi	r19, 0x88	; 136
     256:	44 44       	sbci	r20, 0x44	; 68
     258:	44 28       	or	r4, r4
     25a:	38 44       	sbci	r19, 0x48	; 72
     25c:	44 28       	or	r4, r4
     25e:	7f 38       	cpi	r23, 0x8F	; 143
     260:	54 54       	subi	r21, 0x44	; 68
     262:	54 18       	sub	r5, r4
     264:	00 08       	sbc	r0, r0
     266:	7e 09       	sbc	r23, r14
     268:	02 18       	sub	r0, r2
     26a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26c:	9c 78       	andi	r25, 0x8C	; 140
     26e:	7f 08       	sbc	r7, r15
     270:	04 04       	cpc	r0, r4
     272:	78 00       	.word	0x0078	; ????
     274:	44 7d       	andi	r20, 0xD4	; 212
     276:	40 00       	.word	0x0040	; ????
     278:	20 40       	sbci	r18, 0x00	; 0
     27a:	40 3d       	cpi	r20, 0xD0	; 208
     27c:	00 7f       	andi	r16, 0xF0	; 240
     27e:	10 28       	or	r1, r0
     280:	44 00       	.word	0x0044	; ????
     282:	00 41       	sbci	r16, 0x10	; 16
     284:	7f 40       	sbci	r23, 0x0F	; 15
     286:	00 7c       	andi	r16, 0xC0	; 192
     288:	04 78       	andi	r16, 0x84	; 132
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	7c 08       	sbc	r7, r12
     28e:	04 04       	cpc	r0, r4
     290:	78 38       	cpi	r23, 0x88	; 136
     292:	44 44       	sbci	r20, 0x44	; 68
     294:	44 38       	cpi	r20, 0x84	; 132
     296:	fc 18       	sub	r15, r12
     298:	24 24       	eor	r2, r4
     29a:	18 18       	sub	r1, r8
     29c:	24 24       	eor	r2, r4
     29e:	18 fc       	.word	0xfc18	; ????
     2a0:	7c 08       	sbc	r7, r12
     2a2:	04 04       	cpc	r0, r4
     2a4:	08 48       	sbci	r16, 0x88	; 136
     2a6:	54 54       	subi	r21, 0x44	; 68
     2a8:	54 24       	eor	r5, r4
     2aa:	04 04       	cpc	r0, r4
     2ac:	3f 44       	sbci	r19, 0x4F	; 79
     2ae:	24 3c       	cpi	r18, 0xC4	; 196
     2b0:	40 40       	sbci	r20, 0x00	; 0
     2b2:	20 7c       	andi	r18, 0xC0	; 192
     2b4:	1c 20       	and	r1, r12
     2b6:	40 20       	and	r4, r0
     2b8:	1c 3c       	cpi	r17, 0xCC	; 204
     2ba:	40 30       	cpi	r20, 0x00	; 0
     2bc:	40 3c       	cpi	r20, 0xC0	; 192
     2be:	44 28       	or	r4, r4
     2c0:	10 28       	or	r1, r0
     2c2:	44 4c       	sbci	r20, 0xC4	; 196
     2c4:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x79b4>
     2c8:	44 64       	ori	r20, 0x44	; 68
     2ca:	54 4c       	sbci	r21, 0xC4	; 196
     2cc:	44 00       	.word	0x0044	; ????
     2ce:	08 36       	cpi	r16, 0x68	; 104
     2d0:	41 00       	.word	0x0041	; ????
     2d2:	00 00       	nop
     2d4:	77 00       	.word	0x0077	; ????
     2d6:	00 00       	nop
     2d8:	41 36       	cpi	r20, 0x61	; 97
     2da:	08 00       	.word	0x0008	; ????
     2dc:	02 01       	movw	r0, r4
     2de:	02 04       	cpc	r0, r2
     2e0:	02 3c       	cpi	r16, 0xC2	; 194
     2e2:	26 23       	and	r18, r22
     2e4:	26 3c       	cpi	r18, 0xC6	; 198
     2e6:	1e a1       	ldd	r17, Y+38	; 0x26
     2e8:	a1 61       	ori	r26, 0x11	; 17
     2ea:	12 3a       	cpi	r17, 0xA2	; 162
     2ec:	40 40       	sbci	r20, 0x00	; 0
     2ee:	20 7a       	andi	r18, 0xA0	; 160
     2f0:	38 54       	subi	r19, 0x48	; 72
     2f2:	54 55       	subi	r21, 0x54	; 84
     2f4:	59 21       	and	r21, r9
     2f6:	55 55       	subi	r21, 0x55	; 85
     2f8:	79 41       	sbci	r23, 0x19	; 25
     2fa:	22 54       	subi	r18, 0x42	; 66
     2fc:	54 78       	andi	r21, 0x84	; 132
     2fe:	42 21       	and	r20, r2
     300:	55 54       	subi	r21, 0x45	; 69
     302:	78 40       	sbci	r23, 0x08	; 8
     304:	20 54       	subi	r18, 0x40	; 64
     306:	55 79       	andi	r21, 0x95	; 149
     308:	40 0c       	add	r4, r0
     30a:	1e 52       	subi	r17, 0x2E	; 46
     30c:	72 12       	cpse	r7, r18
     30e:	39 55       	subi	r19, 0x59	; 89
     310:	55 55       	subi	r21, 0x55	; 85
     312:	59 39       	cpi	r21, 0x99	; 153
     314:	54 54       	subi	r21, 0x44	; 68
     316:	54 59       	subi	r21, 0x94	; 148
     318:	39 55       	subi	r19, 0x59	; 89
     31a:	54 54       	subi	r21, 0x44	; 68
     31c:	58 00       	.word	0x0058	; ????
     31e:	00 45       	sbci	r16, 0x50	; 80
     320:	7c 41       	sbci	r23, 0x1C	; 28
     322:	00 02       	muls	r16, r16
     324:	45 7d       	andi	r20, 0xD5	; 213
     326:	42 00       	.word	0x0042	; ????
     328:	01 45       	sbci	r16, 0x51	; 81
     32a:	7c 40       	sbci	r23, 0x0C	; 12
     32c:	7d 12       	cpse	r7, r29
     32e:	11 12       	cpse	r1, r17
     330:	7d f0       	brhs	.+30     	; 0x350 <__trampolines_end+0x2ea>
     332:	28 25       	eor	r18, r8
     334:	28 f0       	brcs	.+10     	; 0x340 <__trampolines_end+0x2da>
     336:	7c 54       	subi	r23, 0x4C	; 76
     338:	55 45       	sbci	r21, 0x55	; 85
     33a:	00 20       	and	r0, r0
     33c:	54 54       	subi	r21, 0x44	; 68
     33e:	7c 54       	subi	r23, 0x4C	; 76
     340:	7c 0a       	sbc	r7, r28
     342:	09 7f       	andi	r16, 0xF9	; 249
     344:	49 32       	cpi	r20, 0x29	; 41
     346:	49 49       	sbci	r20, 0x99	; 153
     348:	49 32       	cpi	r20, 0x29	; 41
     34a:	3a 44       	sbci	r19, 0x4A	; 74
     34c:	44 44       	sbci	r20, 0x44	; 68
     34e:	3a 32       	cpi	r19, 0x2A	; 42
     350:	4a 48       	sbci	r20, 0x8A	; 138
     352:	48 30       	cpi	r20, 0x08	; 8
     354:	3a 41       	sbci	r19, 0x1A	; 26
     356:	41 21       	and	r20, r1
     358:	7a 3a       	cpi	r23, 0xAA	; 170
     35a:	42 40       	sbci	r20, 0x02	; 2
     35c:	20 78       	andi	r18, 0x80	; 128
     35e:	00 9d       	mul	r16, r0
     360:	a0 a0       	ldd	r10, Z+32	; 0x20
     362:	7d 3d       	cpi	r23, 0xDD	; 221
     364:	42 42       	sbci	r20, 0x22	; 34
     366:	42 3d       	cpi	r20, 0xD2	; 210
     368:	3d 40       	sbci	r19, 0x0D	; 13
     36a:	40 40       	sbci	r20, 0x00	; 0
     36c:	3d 3c       	cpi	r19, 0xCD	; 205
     36e:	24 ff       	sbrs	r18, 4
     370:	24 24       	eor	r2, r4
     372:	48 7e       	andi	r20, 0xE8	; 232
     374:	49 43       	sbci	r20, 0x39	; 57
     376:	66 2b       	or	r22, r22
     378:	2f fc       	.word	0xfc2f	; ????
     37a:	2f 2b       	or	r18, r31
     37c:	ff 09       	sbc	r31, r15
     37e:	29 f6       	brne	.-118    	; 0x30a <__trampolines_end+0x2a4>
     380:	20 c0       	rjmp	.+64     	; 0x3c2 <__trampolines_end+0x35c>
     382:	88 7e       	andi	r24, 0xE8	; 232
     384:	09 03       	fmul	r16, r17
     386:	20 54       	subi	r18, 0x40	; 64
     388:	54 79       	andi	r21, 0x94	; 148
     38a:	41 00       	.word	0x0041	; ????
     38c:	00 44       	sbci	r16, 0x40	; 64
     38e:	7d 41       	sbci	r23, 0x1D	; 29
     390:	30 48       	sbci	r19, 0x80	; 128
     392:	48 4a       	sbci	r20, 0xA8	; 168
     394:	32 38       	cpi	r19, 0x82	; 130
     396:	40 40       	sbci	r20, 0x00	; 0
     398:	22 7a       	andi	r18, 0xA2	; 162
     39a:	00 7a       	andi	r16, 0xA0	; 160
     39c:	0a 0a       	sbc	r0, r26
     39e:	72 7d       	andi	r23, 0xD2	; 210
     3a0:	0d 19       	sub	r16, r13
     3a2:	31 7d       	andi	r19, 0xD1	; 209
     3a4:	26 29       	or	r18, r6
     3a6:	29 2f       	mov	r18, r25
     3a8:	28 26       	eor	r2, r24
     3aa:	29 29       	or	r18, r9
     3ac:	29 26       	eor	r2, r25
     3ae:	30 48       	sbci	r19, 0x80	; 128
     3b0:	4d 40       	sbci	r20, 0x0D	; 13
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	08 08       	sbc	r0, r8
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	38 2f       	mov	r19, r24
     3be:	10 c8       	rjmp	.-4064   	; 0xfffff3e0 <__eeprom_end+0xff7ef3e0>
     3c0:	ac ba       	out	0x1c, r10	; 28
     3c2:	2f 10       	cpse	r2, r15
     3c4:	28 34       	cpi	r18, 0x48	; 72
     3c6:	fa 00       	.word	0x00fa	; ????
     3c8:	00 7b       	andi	r16, 0xB0	; 176
     3ca:	00 00       	nop
     3cc:	08 14       	cp	r0, r8
     3ce:	2a 14       	cp	r2, r10
     3d0:	22 22       	and	r2, r18
     3d2:	14 2a       	or	r1, r20
     3d4:	14 08       	sbc	r1, r4
     3d6:	aa 00       	.word	0x00aa	; ????
     3d8:	55 00       	.word	0x0055	; ????
     3da:	aa aa       	std	Y+50, r10	; 0x32
     3dc:	55 aa       	std	Z+53, r5	; 0x35
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	00 00       	nop
     3e2:	00 ff       	sbrs	r16, 0
     3e4:	00 10       	cpse	r0, r0
     3e6:	10 10       	cpse	r1, r0
     3e8:	ff 00       	.word	0x00ff	; ????
     3ea:	14 14       	cp	r1, r4
     3ec:	14 ff       	sbrs	r17, 4
     3ee:	00 10       	cpse	r0, r0
     3f0:	10 ff       	sbrs	r17, 0
     3f2:	00 ff       	sbrs	r16, 0
     3f4:	10 10       	cpse	r1, r0
     3f6:	f0 10       	cpse	r15, r0
     3f8:	f0 14       	cp	r15, r0
     3fa:	14 14       	cp	r1, r4
     3fc:	fc 00       	.word	0x00fc	; ????
     3fe:	14 14       	cp	r1, r4
     400:	f7 00       	.word	0x00f7	; ????
     402:	ff 00       	.word	0x00ff	; ????
     404:	00 ff       	sbrs	r16, 0
     406:	00 ff       	sbrs	r16, 0
     408:	14 14       	cp	r1, r4
     40a:	f4 04       	cpc	r15, r4
     40c:	fc 14       	cp	r15, r12
     40e:	14 17       	cp	r17, r20
     410:	10 1f       	adc	r17, r16
     412:	10 10       	cpse	r1, r0
     414:	1f 10       	cpse	r1, r15
     416:	1f 14       	cp	r1, r15
     418:	14 14       	cp	r1, r4
     41a:	1f 00       	.word	0x001f	; ????
     41c:	10 10       	cpse	r1, r0
     41e:	10 f0       	brcs	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	00 00       	nop
     422:	00 00       	nop
     424:	1f 10       	cpse	r1, r15
     426:	10 10       	cpse	r1, r0
     428:	10 1f       	adc	r17, r16
     42a:	10 10       	cpse	r1, r0
     42c:	10 10       	cpse	r1, r0
     42e:	f0 10       	cpse	r15, r0
     430:	00 00       	nop
     432:	00 ff       	sbrs	r16, 0
     434:	10 10       	cpse	r1, r0
     436:	10 10       	cpse	r1, r0
     438:	10 10       	cpse	r1, r0
     43a:	10 10       	cpse	r1, r0
     43c:	10 ff       	sbrs	r17, 0
     43e:	10 00       	.word	0x0010	; ????
     440:	00 00       	nop
     442:	ff 14       	cp	r15, r15
     444:	00 00       	nop
     446:	ff 00       	.word	0x00ff	; ????
     448:	ff 00       	.word	0x00ff	; ????
     44a:	00 1f       	adc	r16, r16
     44c:	10 17       	cp	r17, r16
     44e:	00 00       	nop
     450:	fc 04       	cpc	r15, r12
     452:	f4 14       	cp	r15, r4
     454:	14 17       	cp	r17, r20
     456:	10 17       	cp	r17, r16
     458:	14 14       	cp	r1, r4
     45a:	f4 04       	cpc	r15, r4
     45c:	f4 00       	.word	0x00f4	; ????
     45e:	00 ff       	sbrs	r16, 0
     460:	00 f7       	brcc	.-64     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     462:	14 14       	cp	r1, r4
     464:	14 14       	cp	r1, r4
     466:	14 14       	cp	r1, r4
     468:	14 f7       	brge	.-60     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     46a:	00 f7       	brcc	.-64     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     46c:	14 14       	cp	r1, r4
     46e:	14 17       	cp	r17, r20
     470:	14 10       	cpse	r1, r4
     472:	10 1f       	adc	r17, r16
     474:	10 1f       	adc	r17, r16
     476:	14 14       	cp	r1, r4
     478:	14 f4       	brge	.+4      	; 0x47e <__stack+0x1f>
     47a:	14 10       	cpse	r1, r4
     47c:	10 f0       	brcs	.+4      	; 0x482 <__stack+0x23>
     47e:	10 f0       	brcs	.+4      	; 0x484 <__stack+0x25>
     480:	00 00       	nop
     482:	1f 10       	cpse	r1, r15
     484:	1f 00       	.word	0x001f	; ????
     486:	00 00       	nop
     488:	1f 14       	cp	r1, r15
     48a:	00 00       	nop
     48c:	00 fc       	sbrc	r0, 0
     48e:	14 00       	.word	0x0014	; ????
     490:	00 f0       	brcs	.+0      	; 0x492 <__stack+0x33>
     492:	10 f0       	brcs	.+4      	; 0x498 <__stack+0x39>
     494:	10 10       	cpse	r1, r0
     496:	ff 10       	cpse	r15, r15
     498:	ff 14       	cp	r15, r15
     49a:	14 14       	cp	r1, r4
     49c:	ff 14       	cp	r15, r15
     49e:	10 10       	cpse	r1, r0
     4a0:	10 1f       	adc	r17, r16
     4a2:	00 00       	nop
     4a4:	00 00       	nop
     4a6:	f0 10       	cpse	r15, r0
     4a8:	ff ff       	.word	0xffff	; ????
     4aa:	ff ff       	.word	0xffff	; ????
     4ac:	ff f0       	brie	.+62     	; 0x4ec <__stack+0x8d>
     4ae:	f0 f0       	brcs	.+60     	; 0x4ec <__stack+0x8d>
     4b0:	f0 f0       	brcs	.+60     	; 0x4ee <__stack+0x8f>
     4b2:	ff ff       	.word	0xffff	; ????
     4b4:	ff 00       	.word	0x00ff	; ????
     4b6:	00 00       	nop
     4b8:	00 00       	nop
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	0f 0f       	add	r16, r31
     4be:	0f 0f       	add	r16, r31
     4c0:	0f 38       	cpi	r16, 0x8F	; 143
     4c2:	44 44       	sbci	r20, 0x44	; 68
     4c4:	38 44       	sbci	r19, 0x48	; 72
     4c6:	fc 4a       	sbci	r31, 0xAC	; 172
     4c8:	4a 4a       	sbci	r20, 0xAA	; 170
     4ca:	34 7e       	andi	r19, 0xE4	; 228
     4cc:	02 02       	muls	r16, r18
     4ce:	06 06       	cpc	r0, r22
     4d0:	02 7e       	andi	r16, 0xE2	; 226
     4d2:	02 7e       	andi	r16, 0xE2	; 226
     4d4:	02 63       	ori	r16, 0x32	; 50
     4d6:	55 49       	sbci	r21, 0x95	; 149
     4d8:	41 63       	ori	r20, 0x31	; 49
     4da:	38 44       	sbci	r19, 0x48	; 72
     4dc:	44 3c       	cpi	r20, 0xC4	; 196
     4de:	04 40       	sbci	r16, 0x04	; 4
     4e0:	7e 20       	and	r7, r14
     4e2:	1e 20       	and	r1, r14
     4e4:	06 02       	muls	r16, r22
     4e6:	7e 02       	muls	r23, r30
     4e8:	02 99       	sbic	0x00, 2	; 0
     4ea:	a5 e7       	ldi	r26, 0x75	; 117
     4ec:	a5 99       	sbic	0x14, 5	; 20
     4ee:	1c 2a       	or	r1, r28
     4f0:	49 2a       	or	r4, r25
     4f2:	1c 4c       	sbci	r17, 0xCC	; 204
     4f4:	72 01       	movw	r14, r4
     4f6:	72 4c       	sbci	r23, 0xC2	; 194
     4f8:	30 4a       	sbci	r19, 0xA0	; 160
     4fa:	4d 4d       	sbci	r20, 0xDD	; 221
     4fc:	30 30       	cpi	r19, 0x00	; 0
     4fe:	48 78       	andi	r20, 0x88	; 136
     500:	48 30       	cpi	r20, 0x08	; 8
     502:	bc 62       	ori	r27, 0x2C	; 44
     504:	5a 46       	sbci	r21, 0x6A	; 106
     506:	3d 3e       	cpi	r19, 0xED	; 237
     508:	49 49       	sbci	r20, 0x99	; 153
     50a:	49 00       	.word	0x0049	; ????
     50c:	7e 01       	movw	r14, r28
     50e:	01 01       	movw	r0, r2
     510:	7e 2a       	or	r7, r30
     512:	2a 2a       	or	r2, r26
     514:	2a 2a       	or	r2, r26
     516:	44 44       	sbci	r20, 0x44	; 68
     518:	5f 44       	sbci	r21, 0x4F	; 79
     51a:	44 40       	sbci	r20, 0x04	; 4
     51c:	51 4a       	sbci	r21, 0xA1	; 161
     51e:	44 40       	sbci	r20, 0x04	; 4
     520:	40 44       	sbci	r20, 0x40	; 64
     522:	4a 51       	subi	r20, 0x1A	; 26
     524:	40 00       	.word	0x0040	; ????
     526:	00 ff       	sbrs	r16, 0
     528:	01 03       	mulsu	r16, r17
     52a:	e0 80       	ld	r14, Z
     52c:	ff 00       	.word	0x00ff	; ????
     52e:	00 08       	sbc	r0, r0
     530:	08 6b       	ori	r16, 0xB8	; 184
     532:	6b 08       	sbc	r6, r11
     534:	36 12       	cpse	r3, r22
     536:	36 24       	eor	r3, r6
     538:	36 06       	cpc	r3, r22
     53a:	0f 09       	sbc	r16, r15
     53c:	0f 06       	cpc	r0, r31
     53e:	00 00       	nop
     540:	18 18       	sub	r1, r8
     542:	00 00       	nop
     544:	00 10       	cpse	r0, r0
     546:	10 00       	.word	0x0010	; ????
     548:	30 40       	sbci	r19, 0x00	; 0
     54a:	ff 01       	movw	r30, r30
     54c:	01 00       	.word	0x0001	; ????
     54e:	1f 01       	movw	r2, r30
     550:	01 1e       	adc	r0, r17
     552:	00 19       	sub	r16, r0
     554:	1d 17       	cp	r17, r29
     556:	12 00       	.word	0x0012	; ????
     558:	3c 3c       	cpi	r19, 0xCC	; 204
     55a:	3c 3c       	cpi	r19, 0xCC	; 204
     55c:	00 00       	nop
     55e:	00 00       	nop
	...

00000561 <logo_BMP>:
     561:	0d 00 0e 00 0f 00 10 00 2b 00 2c 00 2d 14 2e 14     ........+.,.-...
     571:	2f 14 30 14 31 00 32 00 33 00 49 00 4a 00 4b 14     /.0.1.2.3.I.J.K.
     581:	4c 14 4d 14 4e 14 4f 14 50 14 51 14 52 00 68 00     L.M.N.O.P.Q.R.h.
     591:	69 14 6a 14 6b 14 6c 14 6d 14 6e 14 6f 14 70 14     i.j.k.l.m.n.o.p.
     5a1:	71 00 72 00 73 00 74 00 87 00 88 14 89 14 8a 14     q.r.s.t.........
     5b1:	8b 14 8c 14 8d 00 8e 00 8f 00 90 14 91 14 92 14     ................
     5c1:	93 14 94 14 95 00 96 00 97 00 a6 00 a7 14 a8 14     ................
     5d1:	a9 14 aa 14 ab 14 ac 00 ae 00 af 14 b0 14 b1 14     ................
     5e1:	b2 14 b3 14 b4 14 b5 14 b6 14 b7 14 b8 00 c6 00     ................
     5f1:	c7 14 c8 14 c9 14 ca 00 cb 00 cd 00 ce 14 cf 14     ................
     601:	d0 14 d1 00 d2 00 d3 00 d4 14 d5 14 d6 14 d7 14     ................
     611:	d8 14 d9 00 e5 00 e6 14 e7 14 e8 14 e9 00 ec 00     ................
     621:	ed 00 ee 00 ef 00 f0 00 f4 00 f5 00 f6 14 f7 14     ................
     631:	f8 14 f9 00 05 01 06 15 07 15 08 15 09 01 16 01     ................
     641:	17 15 18 15 19 01 25 01 26 15 27 15 28 01 36 01     ......%.&.'.(.6.
     651:	37 15 38 01 44 01 45 15 46 15 47 15 48 01 57 01     7.8.D.E.F.G.H.W.
     661:	64 01 65 15 66 15 67 15 68 01 85 01 86 15 87 01     d.e.f.g.h.......
     671:	8f 01 90 01 91 01 92 01 93 01 94 01 95 01 96 01     ................
     681:	97 01 98 01 99 01 9a 01 9b 01 9c 01 a1 01 a2 01     ................
     691:	a5 01 a6 15 a7 01 ac 01 ad 01 af 01 b0 0d b1 0d     ................
     6a1:	b2 0d b3 0d b4 0d b5 0d b6 0d b7 0d b8 0d b9 0d     ................
     6b1:	ba 0d bb 01 bc 11 bd 01 c0 01 c1 05 c2 05 c3 01     ................
     6c1:	c5 01 c6 15 c7 01 cb 01 cc 05 cd 05 ce 01 cf 01     ................
     6d1:	d0 0d d1 0d d2 0d d3 0d d4 0d d5 0d d6 0d d7 0d     ................
     6e1:	d8 0d d9 0d da 0d db 01 dc 11 dd 01 e0 01 e1 05     ................
     6f1:	e2 05 e3 01 e6 01 eb 01 ec 05 ed 05 ee 01 ef 09     ................
     701:	f0 01 f1 0d f2 0d f3 0d f4 0d f5 0d f6 0d f7 0d     ................
     711:	f8 0d f9 0d fa 0d fb 01 fc 11 fd 01 00 02 01 02     ................
     721:	02 06 03 06 04 02 0a 02 0b 06 0c 06 0d 02 0e 02     ................
     731:	0f 0a 10 02 11 02 12 02 13 02 14 0e 15 0e 16 0e     ................
     741:	17 02 18 02 19 02 1a 02 1b 02 1c 12 1d 02 21 02     ..............!.
     751:	22 06 23 06 24 02 2a 02 2b 06 2c 06 2d 02 2e 0a     ".#.$.*.+.,.-...
     761:	2f 02 30 02 33 02 34 0e 35 0e 36 0e 37 02 38 12     /.0.3.4.5.6.7.8.
     771:	39 12 3a 12 3b 12 3c 12 3d 02 41 02 42 02 43 06     9.:.;.<.=.A.B.C.
     781:	44 06 45 02 49 02 4a 06 4b 06 4c 02 4d 02 4e 0a     D.E.I.J.K.L.M.N.
     791:	4f 02 53 02 54 0e 55 0e 56 0e 57 02 58 12 59 02     O.S.T.U.V.W.X.Y.
     7a1:	5a 02 5b 02 5c 02 62 02 63 06 64 06 65 02 69 02     Z.[.\.b.c.d.e.i.
     7b1:	6a 06 6b 06 6c 02 6d 0a 6e 02 6f 02 73 02 74 0e     j.k.l.m.n.o.s.t.
     7c1:	75 0e 76 0e 77 02 78 12 79 02 82 02 83 02 84 06     u.v.w.x.y.......
     7d1:	85 06 86 02 88 02 89 06 8a 06 8b 02 8c 02 8d 0a     ................
     7e1:	8e 02 93 02 94 0e 95 0e 96 0e 97 02 98 12 99 02     ................
     7f1:	a3 02 a4 06 a5 06 a6 02 a8 02 a9 06 aa 06 ab 02     ................
     801:	ac 0a ad 02 ae 02 b3 02 b4 0e b5 0e b6 0e b7 02     ................
     811:	b8 12 b9 02 c3 02 c4 02 c5 06 c6 06 c7 02 c8 06     ................
     821:	c9 06 ca 02 cb 02 cc 0a cd 02 d3 02 d4 0e d5 0e     ................
     831:	d6 0e d7 02 d8 12 d9 02 e4 02 e5 06 e6 06 e7 06     ................
     841:	e8 06 e9 06 ea 02 eb 0a ec 02 ed 02 ef 02 f0 02     ................
     851:	f1 02 f2 02 f3 02 f4 0e f5 0e f6 0e f7 02 f8 02     ................
     861:	f9 02 fa 02 fb 02 fc 02 04 03 05 03 06 07 07 07     ................
     871:	08 07 09 03 0a 03 0b 0b 0c 03 0f 03 10 0f 11 0f     ................
     881:	12 0f 13 0f 14 0f 15 0f 16 0f 17 0f 18 0f 19 0f     ................
     891:	1a 0f 1b 03 1c 13 1d 03 25 03 26 07 27 07 28 07     ........%.&.'.(.
     8a1:	29 03 2a 0b 2b 03 2c 03 2f 03 30 0f 31 0f 32 0f     ).*.+.,./.0.1.2.
     8b1:	33 0f 34 0f 35 0f 36 0f 37 0f 38 0f 39 0f 3a 0f     3.4.5.6.7.8.9.:.
     8c1:	3b 03 3c 13 3d 03 45 03 46 03 47 07 48 03 49 03     ;.<.=.E.F.G.H.I.
     8d1:	4a 0b 4b 03 4f 03 50 0f 51 0f 52 0f 53 0f 54 0f     J.K.O.P.Q.R.S.T.
     8e1:	55 0f 56 0f 57 0f 58 0f 59 0f 5a 0f 5b 03 5c 13     U.V.W.X.Y.Z.[.\.
     8f1:	5d 03 66 03 67 07 68 03 69 0b 6a 03 6b 03 6f 03     ].f.g.h.i.j.k.o.
     901:	70 03 71 03 72 03 73 03 74 03 75 03 76 03 77 03     p.q.r.s.t.u.v.w.
     911:	78 03 79 03 7a 03 7b 03 7c 13 7d 03 86 03 87 03     x.y.z.{.|.}.....
     921:	88 03 89 0b 8a 03 8f 03 90 13 91 13 92 13 93 13     ................
     931:	94 13 95 13 96 13 97 13 98 13 99 13 9a 13 9b 13     ................
     941:	9c 03 9d 03 a7 03 a8 03 a9 03 b0 03 b1 03 b2 03     ................
     951:	b3 03 b4 03 b5 03 b6 03 b7 03 b8 03 b9 03 ba 03     ................
     961:	bb 03 bc 03 00                                      .....

00000966 <__ctors_end>:
     966:	11 24       	eor	r1, r1
     968:	1f be       	out	0x3f, r1	; 63
     96a:	cf e5       	ldi	r28, 0x5F	; 95
     96c:	d4 e0       	ldi	r29, 0x04	; 4
     96e:	de bf       	out	0x3e, r29	; 62
     970:	cd bf       	out	0x3d, r28	; 61

00000972 <__do_copy_data>:
     972:	11 e0       	ldi	r17, 0x01	; 1
     974:	a0 e6       	ldi	r26, 0x60	; 96
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	ee e9       	ldi	r30, 0x9E	; 158
     97a:	f9 e1       	ldi	r31, 0x19	; 25
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__do_copy_data+0x10>
     97e:	05 90       	lpm	r0, Z+
     980:	0d 92       	st	X+, r0
     982:	ac 3f       	cpi	r26, 0xFC	; 252
     984:	b1 07       	cpc	r27, r17
     986:	d9 f7       	brne	.-10     	; 0x97e <__do_copy_data+0xc>

00000988 <__do_clear_bss>:
     988:	22 e0       	ldi	r18, 0x02	; 2
     98a:	ac ef       	ldi	r26, 0xFC	; 252
     98c:	b1 e0       	ldi	r27, 0x01	; 1
     98e:	01 c0       	rjmp	.+2      	; 0x992 <.do_clear_bss_start>

00000990 <.do_clear_bss_loop>:
     990:	1d 92       	st	X+, r1

00000992 <.do_clear_bss_start>:
     992:	ac 3d       	cpi	r26, 0xDC	; 220
     994:	b2 07       	cpc	r27, r18
     996:	e1 f7       	brne	.-8      	; 0x990 <.do_clear_bss_loop>
     998:	0e 94 75 0c 	call	0x18ea	; 0x18ea <main>
     99c:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <_exit>

000009a0 <__bad_interrupt>:
     9a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009a4 <APP_update_menu_debug_updateGPSParameter>:
{
	/* Draw Menu Identifier */
}

void APP_generate_menu_settings()
{	
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	c8 2f       	mov	r28, r24
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	3d ef       	ldi	r19, 0xFD	; 253
     9b6:	42 e0       	ldi	r20, 0x02	; 2
     9b8:	6a e3       	ldi	r22, 0x3A	; 58
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8a e9       	ldi	r24, 0x9A	; 154
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_setText_all>
     9c4:	6c 2f       	mov	r22, r28
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 98 08 	call	0x1130	; 0x1130 <LCD_moveCursor>
     9d0:	0e 94 1e 0b 	call	0x163c	; 0x163c <LCD_clearLine>
     9d4:	8c 2f       	mov	r24, r28
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	89 30       	cpi	r24, 0x09	; 9
     9da:	91 05       	cpc	r25, r1
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <APP_update_menu_debug_updateGPSParameter+0x3c>
     9de:	82 c0       	rjmp	.+260    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     9e0:	fc 01       	movw	r30, r24
     9e2:	e6 5d       	subi	r30, 0xD6	; 214
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__tablejump2__>
     9ea:	f8 01       	movw	r30, r16
     9ec:	81 91       	ld	r24, Z+
     9ee:	8f 01       	movw	r16, r30
     9f0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     9f4:	ce 01       	movw	r24, r28
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	90 78       	andi	r25, 0x80	; 128
     9fa:	99 23       	and	r25, r25
     9fc:	24 f4       	brge	.+8      	; 0xa06 <APP_update_menu_debug_updateGPSParameter+0x62>
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	8e 6f       	ori	r24, 0xFE	; 254
     a02:	9f 6f       	ori	r25, 0xFF	; 255
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	19 f4       	brne	.+6      	; 0xa10 <APP_update_menu_debug_updateGPSParameter+0x6c>
     a0a:	8a e3       	ldi	r24, 0x3A	; 58
     a0c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a10:	21 96       	adiw	r28, 0x01	; 1
     a12:	c6 30       	cpi	r28, 0x06	; 6
     a14:	d1 05       	cpc	r29, r1
     a16:	49 f7       	brne	.-46     	; 0x9ea <APP_update_menu_debug_updateGPSParameter+0x46>
     a18:	65 c0       	rjmp	.+202    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a1a:	f8 01       	movw	r30, r16
     a1c:	81 91       	ld	r24, Z+
     a1e:	8f 01       	movw	r16, r30
     a20:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a24:	ce 01       	movw	r24, r28
     a26:	81 70       	andi	r24, 0x01	; 1
     a28:	90 78       	andi	r25, 0x80	; 128
     a2a:	99 23       	and	r25, r25
     a2c:	24 f4       	brge	.+8      	; 0xa36 <APP_update_menu_debug_updateGPSParameter+0x92>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	8e 6f       	ori	r24, 0xFE	; 254
     a32:	9f 6f       	ori	r25, 0xFF	; 255
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	19 f4       	brne	.+6      	; 0xa40 <APP_update_menu_debug_updateGPSParameter+0x9c>
     a3a:	8f e2       	ldi	r24, 0x2F	; 47
     a3c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a40:	21 96       	adiw	r28, 0x01	; 1
     a42:	c6 30       	cpi	r28, 0x06	; 6
     a44:	d1 05       	cpc	r29, r1
     a46:	49 f7       	brne	.-46     	; 0xa1a <APP_update_menu_debug_updateGPSParameter+0x76>
     a48:	4d c0       	rjmp	.+154    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a4a:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <SYS_GPS+0x12>
     a4e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a52:	48 c0       	rjmp	.+144    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a54:	c2 e9       	ldi	r28, 0x92	; 146
     a56:	d2 e0       	ldi	r29, 0x02	; 2
     a58:	0b e9       	ldi	r16, 0x9B	; 155
     a5a:	12 e0       	ldi	r17, 0x02	; 2
     a5c:	89 91       	ld	r24, Y+
     a5e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a62:	c0 17       	cp	r28, r16
     a64:	d1 07       	cpc	r29, r17
     a66:	d1 f7       	brne	.-12     	; 0xa5c <APP_update_menu_debug_updateGPSParameter+0xb8>
     a68:	3d c0       	rjmp	.+122    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a6a:	c0 ea       	ldi	r28, 0xA0	; 160
     a6c:	d2 e0       	ldi	r29, 0x02	; 2
     a6e:	0a ea       	ldi	r16, 0xAA	; 170
     a70:	12 e0       	ldi	r17, 0x02	; 2
     a72:	89 91       	ld	r24, Y+
     a74:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a78:	0c 17       	cp	r16, r28
     a7a:	1d 07       	cpc	r17, r29
     a7c:	d1 f7       	brne	.-12     	; 0xa72 <APP_update_menu_debug_updateGPSParameter+0xce>
     a7e:	32 c0       	rjmp	.+100    	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a80:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <SYS_GPS+0x20>
     a84:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a88:	2d c0       	rjmp	.+90     	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a8a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SYS_GPS+0x31>
     a8e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     a92:	28 c0       	rjmp	.+80     	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     a94:	c1 eb       	ldi	r28, 0xB1	; 177
     a96:	d2 e0       	ldi	r29, 0x02	; 2
     a98:	05 eb       	ldi	r16, 0xB5	; 181
     a9a:	12 e0       	ldi	r17, 0x02	; 2
     a9c:	89 91       	ld	r24, Y+
     a9e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     aa2:	0c 17       	cp	r16, r28
     aa4:	1d 07       	cpc	r17, r29
     aa6:	d1 f7       	brne	.-12     	; 0xa9c <APP_update_menu_debug_updateGPSParameter+0xf8>
     aa8:	1d c0       	rjmp	.+58     	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     aaa:	c7 eb       	ldi	r28, 0xB7	; 183
     aac:	d2 e0       	ldi	r29, 0x02	; 2
     aae:	0d eb       	ldi	r16, 0xBD	; 189
     ab0:	12 e0       	ldi	r17, 0x02	; 2
     ab2:	89 91       	ld	r24, Y+
     ab4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     ab8:	c0 17       	cp	r28, r16
     aba:	d1 07       	cpc	r29, r17
     abc:	d1 f7       	brne	.-12     	; 0xab2 <APP_update_menu_debug_updateGPSParameter+0x10e>
     abe:	12 c0       	rjmp	.+36     	; 0xae4 <APP_update_menu_debug_updateGPSParameter+0x140>
     ac0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <SYS_GPS>
     ac4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     ac8:	00 e8       	ldi	r16, 0x80	; 128
     aca:	12 e0       	ldi	r17, 0x02	; 2
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	9f cf       	rjmp	.-194    	; 0xa10 <APP_update_menu_debug_updateGPSParameter+0x6c>
     ad2:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <SYS_GPS+0x9>
     ad6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
     ada:	09 e8       	ldi	r16, 0x89	; 137
     adc:	12 e0       	ldi	r17, 0x02	; 2
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
     ae2:	ae cf       	rjmp	.-164    	; 0xa40 <APP_update_menu_debug_updateGPSParameter+0x9c>
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <APP_update_menu_debug_updateAll>:
     aee:	cf 93       	push	r28
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	8c 2f       	mov	r24, r28
     af4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <APP_update_menu_debug_updateGPSParameter>
     af8:	cf 5f       	subi	r28, 0xFF	; 255
     afa:	c9 30       	cpi	r28, 0x09	; 9
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <APP_update_menu_debug_updateAll+0x4>
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <APP_generate_menu_loading>:
}

void APP_generate_menu_loading()
{
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
	/* Set Logo Pivot Coordinates and Text Parameters */
	uint16_t x = TFTWIDTH / 2 - LOGOSIZE * (LOADSCREEN_TEXT_SIZE + 2) / 2 + LOADSCREEN_LOGO_XOFF;
	uint16_t y = TFTHEIGHT / 2 - LOGOSIZE * (LOADSCREEN_TEXT_SIZE + 2) / 2 + LOADSCREEN_LOGO_YOFF;
	LCD_setText_all(x + LOADSCREEN_TEXT_XOFF, y + LOGOSIZE * (LOADSCREEN_TEXT_SIZE + 2) + LOADSCREEN_TEXT_YOFF, LOADSCREEN_TEXT_SIZE, LOADSCREEN_TEXT_COLOR, LOADSCREEN_SCREENCOLOR);
     b06:	08 e6       	ldi	r16, 0x68	; 104
     b08:	1a e4       	ldi	r17, 0x4A	; 74
     b0a:	20 ee       	ldi	r18, 0xE0	; 224
     b0c:	37 e0       	ldi	r19, 0x07	; 7
     b0e:	42 e0       	ldi	r20, 0x02	; 2
     b10:	60 ea       	ldi	r22, 0xA0	; 160
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	8d e5       	ldi	r24, 0x5D	; 93
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_setText_all>
		
	/* Draw Loading Screen */
	LCD_clear(LOADSCREEN_SCREENCOLOR);
     b1c:	88 e6       	ldi	r24, 0x68	; 104
     b1e:	9a e4       	ldi	r25, 0x4A	; 74
     b20:	0e 94 0e 0b 	call	0x161c	; 0x161c <LCD_clear>
	LCD_drawLogo(x,y,LOADSCREEN_TEXT_SIZE + 2);
     b24:	44 e0       	ldi	r20, 0x04	; 4
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	6e e1       	ldi	r22, 0x1E	; 30
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	84 e6       	ldi	r24, 0x64	; 100
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCD_drawLogo>
	LCD_print_str("Power Couple");
     b34:	8b e6       	ldi	r24, 0x6B	; 107
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_setText_size(LOADSCREEN_TEXT_SIZE - 1);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_setText_size>
	LCD_print_str("TM");
     b42:	88 e7       	ldi	r24, 0x78	; 120
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
}
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <APP_generate_menu_debug>:

void APP_generate_menu_debug()
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
	/* Set Text Parameters */
	LCD_setText_all(DEBUGSCREEN_IDENTIFIER_XOFF, DEBUGSCREEN_IDENTIFIER_YOFF, DEBUGSCREEN_IDENTIFIER_SIZE,DEBUGSCREEN_IDENTIFIER_COLOR,DEBUGSCREEN_SCREENCOLOR);
     b54:	00 e0       	ldi	r16, 0x00	; 0
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	20 ee       	ldi	r18, 0xE0	; 224
     b5a:	37 e0       	ldi	r19, 0x07	; 7
     b5c:	43 e0       	ldi	r20, 0x03	; 3
     b5e:	6a e0       	ldi	r22, 0x0A	; 10
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	8a e0       	ldi	r24, 0x0A	; 10
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_setText_all>
	
	/* Print Identifier with Border */
	LCD_clear(DEBUGSCREEN_SCREENCOLOR);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 0e 0b 	call	0x161c	; 0x161c <LCD_clear>
	LCD_drawRect_empty(DEBUGSCREEN_IDENTIFIER_XOFF - DEBUGSCREEN_BORDEROFF, DEBUGSCREEN_IDENTIFIER_YOFF - DEBUGSCREEN_BORDEROFF, strlen("DEBUG") * 6 * DEBUGSCREEN_IDENTIFIER_SIZE + DEBUGSCREEN_BORDEROFF * 2, 8 * DEBUGSCREEN_IDENTIFIER_SIZE + DEBUGSCREEN_BORDEROFF * 2, DEBUGSCREEN_IDENTIFIER_COLOR);
     b72:	00 ee       	ldi	r16, 0xE0	; 224
     b74:	17 e0       	ldi	r17, 0x07	; 7
     b76:	2c e1       	ldi	r18, 0x1C	; 28
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4e e5       	ldi	r20, 0x5E	; 94
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	68 e0       	ldi	r22, 0x08	; 8
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	88 e0       	ldi	r24, 0x08	; 8
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <LCD_drawRect_empty>
	LCD_print_str("DEBUG\n\n");
     b8a:	8b e7       	ldi	r24, 0x7B	; 123
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	
	/* Print Debug Parameters */
	LCD_setText_size(DEBUGSCREEN_TEXT_SIZE);
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_setText_size>
	LCD_setText_color(DEBUGSCREEN_TEXT_COLOR,DEBUGSCREEN_SCREENCOLOR);
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	9d ef       	ldi	r25, 0xFD	; 253
     ba0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <LCD_setText_color>
	LCD_print_str("Time (UTC) :\n");
     ba4:	83 e8       	ldi	r24, 0x83	; 131
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Date       :\n");
     bac:	81 e9       	ldi	r24, 0x91	; 145
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Data Status:\n");
     bb4:	8f e9       	ldi	r24, 0x9F	; 159
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Latitude   :\n");
     bbc:	8d ea       	ldi	r24, 0xAD	; 173
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Longitude  :\n");
     bc4:	8b eb       	ldi	r24, 0xBB	; 187
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("N/S        :\n");
     bcc:	89 ec       	ldi	r24, 0xC9	; 201
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("E/W        :\n");
     bd4:	87 ed       	ldi	r24, 0xD7	; 215
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Speed      :\n");
     bdc:	85 ee       	ldi	r24, 0xE5	; 229
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	LCD_print_str("Course     :\n");
     be4:	83 ef       	ldi	r24, 0xF3	; 243
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <APP_generate_menu>:
//}

Bool APP_generate_menu(MenuType menu)
{
	///* Generate 'menu' and return generation status*/
	switch(menu){
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	18 f4       	brcc	.+6      	; 0xbfc <APP_generate_menu+0xa>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	30 f0       	brcs	.+12     	; 0xc06 <APP_generate_menu+0x14>
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <APP_generate_menu+0x10>
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	39 f0       	breq	.+14     	; 0xc0e <APP_generate_menu+0x1c>
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <APP_generate_menu+0x24>
		APP_generate_menu_loading();
		return TRUE;
		
		case MAINMENU:
		APP_generate_menu_main();
		return TRUE;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	08 95       	ret
Bool APP_generate_menu(MenuType menu)
{
	///* Generate 'menu' and return generation status*/
	switch(menu){
		case LOADINGMENU:
		APP_generate_menu_loading();
     c06:	0e 94 81 05 	call	0xb02	; 0xb02 <APP_generate_menu_loading>
		return TRUE;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	08 95       	ret
		case SETTINGSMENU:
		APP_generate_menu_settings();
		return TRUE;
		
		case DEBUGMENU:
		APP_generate_menu_debug();
     c0e:	0e 94 a8 05 	call	0xb50	; 0xb50 <APP_generate_menu_debug>
		return TRUE;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
	}
	return FALSE;
     c16:	80 e0       	ldi	r24, 0x00	; 0
}
     c18:	08 95       	ret

00000c1a <init_buzzer>:
////////////////////////////////////////////////////////////////////////////////////////////////////
//											Functions											  //
////////////////////////////////////////////////////////////////////////////////////////////////////
void init_buzzer(){	
	// Initialize Buzzer
	DDRD |= (1 << BUZZER_PIN);			// Set buzzer pin (PD4) direction
     c1a:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1 << BUZZER_PIN);		// Clear buzzer output
     c1c:	94 98       	cbi	0x12, 4	; 18
	TCCR1B = (1 << WGM12)|(1 << CS11);	// Enable "CTC" mode and set prescaler = 64	 	
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	8e bd       	out	0x2e, r24	; 46
     c22:	08 95       	ret

00000c24 <EEPROM_enable>:
	
	//Enable writes to EEPROM:
	EECR |= (1 << EEMWE);
	
	//Trigger the write-enable strobe:
	EECR |= (1 << EEWE);
     c24:	84 e0       	ldi	r24, 0x04	; 4
     c26:	8c bb       	out	0x1c, r24	; 28
     c28:	1f ba       	out	0x1f, r1	; 31
     c2a:	1e ba       	out	0x1e, r1	; 30
     c2c:	08 95       	ret

00000c2e <EEPROM_read>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t EEPROM_read(uint16_t address){
	
	//Wait for previous write-enable strobe to null out:
	while(EECR & (1 << EEWE));
     c2e:	e1 99       	sbic	0x1c, 1	; 28
     c30:	fe cf       	rjmp	.-4      	; 0xc2e <EEPROM_read>
	
	//Load the address:
	EEARH = (address >> 8);
     c32:	9f bb       	out	0x1f, r25	; 31
	EEARL = (address) & 0xFF;
     c34:	8e bb       	out	0x1e, r24	; 30
	
	//Read in the data by strobing:
	EECR |= (1 << EERE);
     c36:	e0 9a       	sbi	0x1c, 0	; 28
	
	//Return the contents of the data register:
	return EEDR;
     c38:	8d b3       	in	r24, 0x1d	; 29
}
     c3a:	08 95       	ret

00000c3c <EEPROM_recovery>:
void EEPROM_recovery(void){
	
	//Clear out erroneous data from powerdown:

	//Fetch all of the data stored in the EEPROM space, and return it to its space in memory:
	NV_SYSTEM_STATUS_0 = EEPROM_read(EEPROM_SYSTEM_STATUS_0);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_read>
     c44:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <NV_SYSTEM_STATUS_0>
	NV_SYSTEM_STATUS_1 = EEPROM_read(EEPROM_SYSTEM_STATUS_1);
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_read>
     c50:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <NV_SYSTEM_STATUS_1>
	NV_USER_PREFERENCES_0 = EEPROM_read(EEPROM_USER_PREF_0);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_read>
     c5c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <NV_USER_PREFERENCES_0>
	NV_USER_PREFERENCES_1 = EEPROM_read(EEPROM_USER_PREF_1);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_read>
     c68:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <NV_USER_PREFERENCES_1>
     c6c:	08 95       	ret

00000c6e <GPS_init_USART>:
	
*/
void GPS_disable_stream(void){
	
	//Clear receiver-interrupt enable bit, while maintaining register contents:
	UCSRB = UCSRB & (!(1 << RXCIE));
     c6e:	90 bd       	out	0x20, r25	; 32
     c70:	89 b9       	out	0x09, r24	; 9
     c72:	88 e1       	ldi	r24, 0x18	; 24
     c74:	8a b9       	out	0x0a, r24	; 10
     c76:	8e e8       	ldi	r24, 0x8E	; 142
     c78:	80 bd       	out	0x20, r24	; 32
     c7a:	08 95       	ret

00000c7c <GPS_USART_Transmit>:
     c7c:	5d 9b       	sbis	0x0b, 5	; 11
     c7e:	fe cf       	rjmp	.-4      	; 0xc7c <GPS_USART_Transmit>
     c80:	8c b9       	out	0x0c, r24	; 12
     c82:	08 95       	ret

00000c84 <GPS_configure_firmware>:
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	c5 e5       	ldi	r28, 0x55	; 85
     c8e:	d1 e0       	ldi	r29, 0x01	; 1
     c90:	08 e8       	ldi	r16, 0x88	; 136
     c92:	11 e0       	ldi	r17, 0x01	; 1
     c94:	89 91       	ld	r24, Y+
     c96:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GPS_USART_Transmit>
     c9a:	0c 17       	cp	r16, r28
     c9c:	1d 07       	cpc	r17, r29
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <GPS_configure_firmware+0x10>
     ca0:	c4 e4       	ldi	r28, 0x44	; 68
     ca2:	d1 e0       	ldi	r29, 0x01	; 1
     ca4:	05 e5       	ldi	r16, 0x55	; 85
     ca6:	11 e0       	ldi	r17, 0x01	; 1
     ca8:	89 91       	ld	r24, Y+
     caa:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GPS_USART_Transmit>
     cae:	0c 17       	cp	r16, r28
     cb0:	1d 07       	cpc	r17, r29
     cb2:	d1 f7       	brne	.-12     	; 0xca8 <GPS_configure_firmware+0x24>
     cb4:	cb e2       	ldi	r28, 0x2B	; 43
     cb6:	d1 e0       	ldi	r29, 0x01	; 1
     cb8:	04 e4       	ldi	r16, 0x44	; 68
     cba:	11 e0       	ldi	r17, 0x01	; 1
     cbc:	89 91       	ld	r24, Y+
     cbe:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GPS_USART_Transmit>
     cc2:	0c 17       	cp	r16, r28
     cc4:	1d 07       	cpc	r17, r29
     cc6:	d1 f7       	brne	.-12     	; 0xcbc <GPS_configure_firmware+0x38>
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <GPS_send_byte>:
	
*/
void GPS_send_byte(char data){
	
	//Wait for the system to be ready to transmit more data:
	while(!(UCSRA & (1 << UDRE)));
     cd2:	5d 9b       	sbis	0x0b, 5	; 11
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <GPS_send_byte>
	
	//Load byte into the transmitter:
	UDR = data;
     cd6:	8c b9       	out	0x0c, r24	; 12
     cd8:	08 95       	ret

00000cda <GPS_receive_byte>:
	
*/
char GPS_receive_byte(void){
	
	//Check to see if data has been received:
	while(!(UCSRA & (1 << RXC)));
     cda:	5f 9b       	sbis	0x0b, 7	; 11
     cdc:	fe cf       	rjmp	.-4      	; 0xcda <GPS_receive_byte>
	
	//Return the data to where it is desired:
	return UDR;
     cde:	8c b1       	in	r24, 0x0c	; 12
	
}
     ce0:	08 95       	ret

00000ce2 <GPS_flush_buffer>:
	
	DESCRIPTION:	Systematically clears out the data contained in the USART receive buffer, 
					then sets the value of the head pointer to 0;
	
*/
void GPS_flush_buffer(void){
     ce2:	e2 e0       	ldi	r30, 0x02	; 2
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	8a e7       	ldi	r24, 0x7A	; 122
     ce8:	92 e0       	ldi	r25, 0x02	; 2
	
	//Clear out data
	for(int i = 0; i < 120; i++){
		GPS_BUFFER[i] = 0;
     cea:	11 92       	st	Z+, r1
	
*/
void GPS_flush_buffer(void){
	
	//Clear out data
	for(int i = 0; i < 120; i++){
     cec:	e8 17       	cp	r30, r24
     cee:	f9 07       	cpc	r31, r25
     cf0:	e1 f7       	brne	.-8      	; 0xcea <GPS_flush_buffer+0x8>
		GPS_BUFFER[i] = 0;
	}
	
	//Set pointer to zero:
	GPS_BUFFER_INDEX = 0;				//Buffer is at start position.
     cf2:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <GPS_BUFFER_INDEX>
	
	//Clear the pre-parsing flag:
	GPS_MESSAGE_READY = 0;				//Buffer is closed off.
     cf6:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
     cfa:	08 95       	ret

00000cfc <GPS_enable_stream>:
	
*/
void GPS_enable_stream(void){
	
	//Flush the buffer each time, such that there is a fresh start:
	GPS_flush_buffer();
     cfc:	0e 94 71 06 	call	0xce2	; 0xce2 <GPS_flush_buffer>
	
	//Also make sure that the parsing flag is reset as well to prevent erroneous behavior:
	GPS_MESSAGE_READY = 0;
     d00:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	
	//Set receiver-interrupt enable bit, while maintaining register contents:
	UCSRB |= (1 << RXCIE);
     d04:	57 9a       	sbi	0x0a, 7	; 10
     d06:	08 95       	ret

00000d08 <GPS_TX_PARSE_ERROR>:
	//?. Enable stream, thereby flushing the buffer of all its contents.
	GPS_enable_stream();
	
};
////////////////////////////////////////////////////////////////////////////////////////////////////
void GPS_TX_PARSE_ERROR(void){
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cc e1       	ldi	r28, 0x1C	; 28
     d12:	d1 e0       	ldi	r29, 0x01	; 1
     d14:	0b e2       	ldi	r16, 0x2B	; 43
     d16:	11 e0       	ldi	r17, 0x01	; 1
	//To get here, the invalid data character was detected.
	
	//Send a transmission containing the UTC time, as well as
	//a generic NO FIX message:
	for(uint8_t i = 0; i < 15; i++){
		GPS_send_byte(MSG_DATA_ERROR[i]);
     d18:	89 91       	ld	r24, Y+
     d1a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
void GPS_TX_PARSE_ERROR(void){
	//To get here, the invalid data character was detected.
	
	//Send a transmission containing the UTC time, as well as
	//a generic NO FIX message:
	for(uint8_t i = 0; i < 15; i++){
     d1e:	c0 17       	cp	r28, r16
     d20:	d1 07       	cpc	r29, r17
     d22:	d1 f7       	brne	.-12     	; 0xd18 <GPS_TX_PARSE_ERROR+0x10>
		GPS_send_byte(MSG_DATA_ERROR[i]);
	}
	
	//Send carriage return and linefeed:
	GPS_send_byte('\r');
     d24:	8d e0       	ldi	r24, 0x0D	; 13
     d26:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte('\n');
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
     d30:	c5 e1       	ldi	r28, 0x15	; 21
     d32:	d1 e0       	ldi	r29, 0x01	; 1
     d34:	0c e1       	ldi	r16, 0x1C	; 28
     d36:	11 e0       	ldi	r17, 0x01	; 1
	
	//Send the UTC time and date:
	for(uint8_t i = 0; i < 7; i++){
		GPS_send_byte(MSG_REPORT_UTC[i]);
     d38:	89 91       	ld	r24, Y+
     d3a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	//Send carriage return and linefeed:
	GPS_send_byte('\r');
	GPS_send_byte('\n');
	
	//Send the UTC time and date:
	for(uint8_t i = 0; i < 7; i++){
     d3e:	c0 17       	cp	r28, r16
     d40:	d1 07       	cpc	r29, r17
     d42:	d1 f7       	brne	.-12     	; 0xd38 <GPS_TX_PARSE_ERROR+0x30>
		GPS_send_byte(MSG_REPORT_UTC[i]);
	}
	GPS_send_byte(SYS_GPS.UTC_H);
     d44:	cf e7       	ldi	r28, 0x7F	; 127
     d46:	d2 e0       	ldi	r29, 0x02	; 2
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte('.');
     d4e:	8e e2       	ldi	r24, 0x2E	; 46
     d50:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte(SYS_GPS.UTC_M);
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte('.');
     d5a:	8e e2       	ldi	r24, 0x2E	; 46
     d5c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte(SYS_GPS.UTC_S);
     d60:	88 85       	ldd	r24, Y+8	; 0x08
     d62:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte('\r');
     d66:	8d e0       	ldi	r24, 0x0D	; 13
     d68:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
	GPS_send_byte('\n');
     d6c:	8a e0       	ldi	r24, 0x0A	; 10
     d6e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>

     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <GPS_parse_data>:
					byte through the linear buffer to extract the relevant NMEA output sentences.
					After the completion of this parsing, the receiver will be enabled again, which
					will clear the buffer and its reception flag, and the cycle will repeat.
			
*/
void GPS_parse_data(void){
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
	
	//1. Shut down the stream.
	//GPS_disable_stream();
	
	//2. Reset the MESSAGE_RECEIVED flag
	GPS_MESSAGE_READY = 0;
     d84:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	
	//3. Look for the sentence type, and confirm RMC:
	//	-The first character should be '$'
	//	-Therefore, GPS_BUFFER[1] is the first sentence-indicating character.
	if( (GPS_BUFFER[1] == 'G')&&
     d88:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <GPS_BUFFER+0x1>
     d8c:	87 34       	cpi	r24, 0x47	; 71
     d8e:	21 f4       	brne	.+8      	; 0xd98 <GPS_parse_data+0x1c>
     d90:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <GPS_BUFFER+0x2>
     d94:	80 35       	cpi	r24, 0x50	; 80
     d96:	29 f0       	breq	.+10     	; 0xda2 <GPS_parse_data+0x26>
     d98:	c1 e0       	ldi	r28, 0x01	; 1
     d9a:	d1 e0       	ldi	r29, 0x01	; 1
     d9c:	05 e1       	ldi	r16, 0x15	; 21
     d9e:	11 e0       	ldi	r17, 0x01	; 1
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <GPS_parse_data+0x40>
		(GPS_BUFFER[2] == 'P')&&
     da2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <GPS_BUFFER+0x3>
     da6:	82 35       	cpi	r24, 0x52	; 82
     da8:	b9 f7       	brne	.-18     	; 0xd98 <GPS_parse_data+0x1c>
		(GPS_BUFFER[3] == 'R')&&
     daa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <GPS_BUFFER+0x4>
     dae:	8d 34       	cpi	r24, 0x4D	; 77
     db0:	99 f7       	brne	.-26     	; 0xd98 <GPS_parse_data+0x1c>
		(GPS_BUFFER[4] == 'M')&&
     db2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <GPS_BUFFER+0x5>
     db6:	83 34       	cpi	r24, 0x43	; 67
     db8:	79 f7       	brne	.-34     	; 0xd98 <GPS_parse_data+0x1c>
     dba:	79 c1       	rjmp	.+754    	; 0x10ae <GPS_parse_data+0x332>
			//Continue normally!
		}
	else{
		//When the GPRMC is not detected, we need to let the serial monitor know.
		for(int i = 0; i < 20; i++){
			GPS_send_byte(MSG_GPRMC_NOT_RECEIVED[i]);
     dbc:	89 91       	ld	r24, Y+
     dbe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
		(GPS_BUFFER[5] == 'C')	){
			//Continue normally!
		}
	else{
		//When the GPRMC is not detected, we need to let the serial monitor know.
		for(int i = 0; i < 20; i++){
     dc2:	c0 17       	cp	r28, r16
     dc4:	d1 07       	cpc	r29, r17
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <GPS_parse_data+0x40>
			GPS_send_byte(MSG_GPRMC_NOT_RECEIVED[i]);
		}
		GPS_send_byte('\r');
     dc8:	8d e0       	ldi	r24, 0x0D	; 13
     dca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
		GPS_send_byte('\n');
     dce:	8a e0       	ldi	r24, 0x0A	; 10
     dd0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPS_send_byte>
     dd4:	6c c1       	rjmp	.+728    	; 0x10ae <GPS_parse_data+0x332>
	}
	
	//4. Unpack all of the data between '$' and '*'. Store it on the SYS_GPS object.
		//A. UTC data:
		for(int i = 0; i < GPS_BYTES_ASCII_UTC_TIME; i++){
			SYS_GPS.UTC_TIME_ASCII[i] = GPS_BUFFER[RMC_UTC + i];
     dd6:	81 91       	ld	r24, Z+
     dd8:	8d 93       	st	X+, r24
		GPS_send_byte('\n');
	}
	
	//4. Unpack all of the data between '$' and '*'. Store it on the SYS_GPS object.
		//A. UTC data:
		for(int i = 0; i < GPS_BYTES_ASCII_UTC_TIME; i++){
     dda:	e2 17       	cp	r30, r18
     ddc:	f3 07       	cpc	r31, r19
     dde:	d9 f7       	brne	.-10     	; 0xdd6 <GPS_parse_data+0x5a>
			SYS_GPS.UTC_TIME_ASCII[i] = GPS_BUFFER[RMC_UTC + i];
		}
		SYS_GPS.UTC_H = (GPS_BUFFER[RMC_UTC] * 10)		+ (GPS_BUFFER[RMC_UTC + 1]);	
     de0:	af e7       	ldi	r26, 0x7F	; 127
     de2:	b2 e0       	ldi	r27, 0x02	; 2
     de4:	e2 e0       	ldi	r30, 0x02	; 2
     de6:	f2 e0       	ldi	r31, 0x02	; 2
     de8:	87 81       	ldd	r24, Z+7	; 0x07
     dea:	88 0f       	add	r24, r24
     dec:	98 2f       	mov	r25, r24
     dee:	99 0f       	add	r25, r25
     df0:	99 0f       	add	r25, r25
     df2:	89 0f       	add	r24, r25
     df4:	90 85       	ldd	r25, Z+8	; 0x08
     df6:	89 0f       	add	r24, r25
     df8:	16 96       	adiw	r26, 0x06	; 6
     dfa:	8c 93       	st	X, r24
     dfc:	16 97       	sbiw	r26, 0x06	; 6
		SYS_GPS.UTC_M = ((GPS_BUFFER[RMC_UTC + 2] * 10) + (GPS_BUFFER[RMC_UTC + 3])); 
     dfe:	81 85       	ldd	r24, Z+9	; 0x09
     e00:	88 0f       	add	r24, r24
     e02:	98 2f       	mov	r25, r24
     e04:	99 0f       	add	r25, r25
     e06:	99 0f       	add	r25, r25
     e08:	89 0f       	add	r24, r25
     e0a:	92 85       	ldd	r25, Z+10	; 0x0a
     e0c:	89 0f       	add	r24, r25
     e0e:	17 96       	adiw	r26, 0x07	; 7
     e10:	8c 93       	st	X, r24
     e12:	17 97       	sbiw	r26, 0x07	; 7
		SYS_GPS.UTC_S = ((GPS_BUFFER[RMC_UTC + 4] * 10) + (GPS_BUFFER[RMC_UTC + 5]));
     e14:	83 85       	ldd	r24, Z+11	; 0x0b
     e16:	88 0f       	add	r24, r24
     e18:	98 2f       	mov	r25, r24
     e1a:	99 0f       	add	r25, r25
     e1c:	99 0f       	add	r25, r25
     e1e:	89 0f       	add	r24, r25
     e20:	94 85       	ldd	r25, Z+12	; 0x0c
     e22:	89 0f       	add	r24, r25
     e24:	18 96       	adiw	r26, 0x08	; 8
     e26:	8c 93       	st	X, r24
     e28:	18 97       	sbiw	r26, 0x08	; 8
		//B. STATUS:
		SYS_GPS.STATUS = GPS_BUFFER[RMC_STATUS];
     e2a:	82 89       	ldd	r24, Z+18	; 0x12
     e2c:	52 96       	adiw	r26, 0x12	; 18
     e2e:	8c 93       	st	X, r24
// LOGICAL CHECK:
// If the data received is NOT valid, then the program will skip over the rest of the parse, and send out a
// "no fix" message:
if (SYS_GPS.STATUS == 'V'){
     e30:	86 35       	cpi	r24, 0x56	; 86
     e32:	29 f4       	brne	.+10     	; 0xe3e <GPS_parse_data+0xc2>
	//Send the error message containing the UTC data:
	GPS_TX_PARSE_ERROR();
     e34:	0e 94 84 06 	call	0xd08	; 0xd08 <GPS_TX_PARSE_ERROR>
	GPS_enable_stream();
     e38:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPS_enable_stream>
	return;	
     e3c:	3f c1       	rjmp	.+638    	; 0x10bc <GPS_parse_data+0x340>
     e3e:	e6 e1       	ldi	r30, 0x16	; 22
     e40:	f2 e0       	ldi	r31, 0x02	; 2
     e42:	a2 e9       	ldi	r26, 0x92	; 146
     e44:	b2 e0       	ldi	r27, 0x02	; 2
     e46:	2f e1       	ldi	r18, 0x1F	; 31
     e48:	32 e0       	ldi	r19, 0x02	; 2
}
		//C. LATITUDE:
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LATITUDE; i++){
			SYS_GPS.LATITUDE_ASCII[i] = GPS_BUFFER[RMC_LAT + i];
     e4a:	81 91       	ld	r24, Z+
     e4c:	8d 93       	st	X+, r24
	GPS_enable_stream();
	return;	
}
		//C. LATITUDE:
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LATITUDE; i++){
     e4e:	e2 17       	cp	r30, r18
     e50:	f3 07       	cpc	r31, r19
     e52:	d9 f7       	brne	.-10     	; 0xe4a <GPS_parse_data+0xce>
			SYS_GPS.LATITUDE_ASCII[i] = GPS_BUFFER[RMC_LAT + i];
		}
		//Compress to decimal:
		SYS_GPS.latitude_H =	(	(GPS_BUFFER[RMC_LAT]		* 1000)		+ 
     e54:	af e7       	ldi	r26, 0x7F	; 127
     e56:	b2 e0       	ldi	r27, 0x02	; 2
     e58:	e2 e0       	ldi	r30, 0x02	; 2
     e5a:	f2 e0       	ldi	r31, 0x02	; 2
     e5c:	24 89       	ldd	r18, Z+20	; 0x14
     e5e:	48 ee       	ldi	r20, 0xE8	; 232
     e60:	53 e0       	ldi	r21, 0x03	; 3
     e62:	24 9f       	mul	r18, r20
     e64:	c0 01       	movw	r24, r0
     e66:	25 9f       	mul	r18, r21
     e68:	90 0d       	add	r25, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	25 89       	ldd	r18, Z+21	; 0x15
     e6e:	c4 e6       	ldi	r28, 0x64	; 100
     e70:	bc 01       	movw	r22, r24
     e72:	c2 9f       	mul	r28, r18
     e74:	60 0d       	add	r22, r0
     e76:	71 1d       	adc	r23, r1
     e78:	11 24       	eor	r1, r1
     e7a:	96 89       	ldd	r25, Z+22	; 0x16
     e7c:	89 2f       	mov	r24, r25
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	8c 01       	movw	r16, r24
     e82:	00 0f       	add	r16, r16
     e84:	11 1f       	adc	r17, r17
     e86:	9c 01       	movw	r18, r24
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	22 0f       	add	r18, r18
     e92:	33 1f       	adc	r19, r19
     e94:	c8 01       	movw	r24, r16
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	86 0f       	add	r24, r22
     e9c:	97 1f       	adc	r25, r23
     e9e:	27 89       	ldd	r18, Z+23	; 0x17
     ea0:	82 0f       	add	r24, r18
     ea2:	91 1d       	adc	r25, r1
     ea4:	5d 96       	adiw	r26, 0x1d	; 29
     ea6:	9c 93       	st	X, r25
     ea8:	8e 93       	st	-X, r24
     eaa:	5c 97       	sbiw	r26, 0x1c	; 28
									(GPS_BUFFER[RMC_LAT + 1]	* 100)		+
									(GPS_BUFFER[RMC_LAT + 2]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 3]));
		SYS_GPS.latitude_L =	(	(GPS_BUFFER[RMC_LAT + 5]	* 1000)		+
     eac:	21 8d       	ldd	r18, Z+25	; 0x19
     eae:	24 9f       	mul	r18, r20
     eb0:	c0 01       	movw	r24, r0
     eb2:	25 9f       	mul	r18, r21
     eb4:	90 0d       	add	r25, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	22 8d       	ldd	r18, Z+26	; 0x1a
     eba:	ac 01       	movw	r20, r24
     ebc:	c2 9f       	mul	r28, r18
     ebe:	40 0d       	add	r20, r0
     ec0:	51 1d       	adc	r21, r1
     ec2:	11 24       	eor	r1, r1
     ec4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ec6:	89 2f       	mov	r24, r25
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	9c 01       	movw	r18, r24
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	cb 01       	movw	r24, r22
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
     ee8:	24 8d       	ldd	r18, Z+28	; 0x1c
     eea:	82 0f       	add	r24, r18
     eec:	91 1d       	adc	r25, r1
     eee:	5f 96       	adiw	r26, 0x1f	; 31
     ef0:	9c 93       	st	X, r25
     ef2:	8e 93       	st	-X, r24
     ef4:	5e 97       	sbiw	r26, 0x1e	; 30
									(GPS_BUFFER[RMC_LAT + 6]	* 100)		+
									(GPS_BUFFER[RMC_LAT + 7]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 8]));
		SYS_GPS.NS = GPS_BUFFER[RMC_NS];
     ef6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ef8:	90 96       	adiw	r26, 0x20	; 32
     efa:	8c 93       	st	X, r24
     efc:	e2 e2       	ldi	r30, 0x22	; 34
     efe:	f2 e0       	ldi	r31, 0x02	; 2
     f00:	a0 ea       	ldi	r26, 0xA0	; 160
     f02:	b2 e0       	ldi	r27, 0x02	; 2
     f04:	2c e2       	ldi	r18, 0x2C	; 44
     f06:	32 e0       	ldi	r19, 0x02	; 2
		//D. LONGITUDE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LONGITUDE; i++){
		SYS_GPS.LONGITUDE_ASCII[i] = GPS_BUFFER[RMC_LON + i];
     f08:	81 91       	ld	r24, Z+
     f0a:	8d 93       	st	X+, r24
									(GPS_BUFFER[RMC_LAT + 7]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 8]));
		SYS_GPS.NS = GPS_BUFFER[RMC_NS];
		//D. LONGITUDE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LONGITUDE; i++){
     f0c:	e2 17       	cp	r30, r18
     f0e:	f3 07       	cpc	r31, r19
     f10:	d9 f7       	brne	.-10     	; 0xf08 <GPS_parse_data+0x18c>
		SYS_GPS.LONGITUDE_ASCII[i] = GPS_BUFFER[RMC_LON + i];
		}
		//Compress to decimal:
		SYS_GPS.longitude_H =	(	(GPS_BUFFER[RMC_LON]		* 10000)	+
     f12:	cf e7       	ldi	r28, 0x7F	; 127
     f14:	d2 e0       	ldi	r29, 0x02	; 2
     f16:	e2 e0       	ldi	r30, 0x02	; 2
     f18:	f2 e0       	ldi	r31, 0x02	; 2
     f1a:	40 a1       	ldd	r20, Z+32	; 0x20
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	97 e2       	ldi	r25, 0x27	; 39
     f20:	48 9f       	mul	r20, r24
     f22:	90 01       	movw	r18, r0
     f24:	49 9f       	mul	r20, r25
     f26:	30 0d       	add	r19, r0
     f28:	11 24       	eor	r1, r1
     f2a:	61 a1       	ldd	r22, Z+33	; 0x21
     f2c:	48 ee       	ldi	r20, 0xE8	; 232
     f2e:	53 e0       	ldi	r21, 0x03	; 3
     f30:	64 9f       	mul	r22, r20
     f32:	c0 01       	movw	r24, r0
     f34:	65 9f       	mul	r22, r21
     f36:	90 0d       	add	r25, r0
     f38:	11 24       	eor	r1, r1
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	22 a1       	ldd	r18, Z+34	; 0x22
     f40:	64 e6       	ldi	r22, 0x64	; 100
     f42:	62 9f       	mul	r22, r18
     f44:	80 0d       	add	r24, r0
     f46:	91 1d       	adc	r25, r1
     f48:	11 24       	eor	r1, r1
     f4a:	23 a1       	ldd	r18, Z+35	; 0x23
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	d9 01       	movw	r26, r18
     f50:	aa 0f       	add	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	22 0f       	add	r18, r18
     f5e:	33 1f       	adc	r19, r19
     f60:	2a 0f       	add	r18, r26
     f62:	3b 1f       	adc	r19, r27
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	24 a1       	ldd	r18, Z+36	; 0x24
     f6a:	82 0f       	add	r24, r18
     f6c:	91 1d       	adc	r25, r1
     f6e:	09 2e       	mov	r0, r25
     f70:	00 0c       	add	r0, r0
     f72:	aa 0b       	sbc	r26, r26
     f74:	bb 0b       	sbc	r27, r27
     f76:	8b a7       	std	Y+43, r24	; 0x2b
     f78:	9c a7       	std	Y+44, r25	; 0x2c
     f7a:	ad a7       	std	Y+45, r26	; 0x2d
     f7c:	be a7       	std	Y+46, r27	; 0x2e
									(GPS_BUFFER[RMC_LON + 1]	* 1000)		+
									(GPS_BUFFER[RMC_LON + 2]	* 100)		+
									(GPS_BUFFER[RMC_LON + 3]	* 10)		+
									(GPS_BUFFER[RMC_LON + 4]));
		SYS_GPS.longitude_L =	(	(GPS_BUFFER[RMC_LON + 6]	* 1000)		+
     f7e:	26 a1       	ldd	r18, Z+38	; 0x26
     f80:	24 9f       	mul	r18, r20
     f82:	c0 01       	movw	r24, r0
     f84:	25 9f       	mul	r18, r21
     f86:	90 0d       	add	r25, r0
     f88:	11 24       	eor	r1, r1
     f8a:	27 a1       	ldd	r18, Z+39	; 0x27
     f8c:	ac 01       	movw	r20, r24
     f8e:	62 9f       	mul	r22, r18
     f90:	40 0d       	add	r20, r0
     f92:	51 1d       	adc	r21, r1
     f94:	11 24       	eor	r1, r1
     f96:	90 a5       	ldd	r25, Z+40	; 0x28
     f98:	89 2f       	mov	r24, r25
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	bc 01       	movw	r22, r24
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	9c 01       	movw	r18, r24
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	cb 01       	movw	r24, r22
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	84 0f       	add	r24, r20
     fb8:	95 1f       	adc	r25, r21
     fba:	21 a5       	ldd	r18, Z+41	; 0x29
     fbc:	82 0f       	add	r24, r18
     fbe:	91 1d       	adc	r25, r1
     fc0:	98 ab       	std	Y+48, r25	; 0x30
     fc2:	8f a7       	std	Y+47, r24	; 0x2f
									(GPS_BUFFER[RMC_LON + 7]	* 100)		+
									(GPS_BUFFER[RMC_LON + 8]	* 10)		+
									(GPS_BUFFER[RMC_LON + 9]));
		SYS_GPS.EW = GPS_BUFFER[RMC_EW];
     fc4:	83 a5       	ldd	r24, Z+43	; 0x2b
     fc6:	89 ab       	std	Y+49, r24	; 0x31
		//E. SPEED AND COURSE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_SPEED; i++){
			SYS_GPS.SPEED_ASCII[i] = GPS_BUFFER[RMC_SPEED + i];
     fc8:	25 a5       	ldd	r18, Z+45	; 0x2d
     fca:	2a ab       	std	Y+50, r18	; 0x32
     fcc:	86 a5       	ldd	r24, Z+46	; 0x2e
     fce:	8b ab       	std	Y+51, r24	; 0x33
     fd0:	87 a5       	ldd	r24, Z+47	; 0x2f
     fd2:	8c ab       	std	Y+52, r24	; 0x34
     fd4:	90 a9       	ldd	r25, Z+48	; 0x30
     fd6:	9d ab       	std	Y+53, r25	; 0x35
		}
		//Compress to decimal:
		SYS_GPS.ground_speed_high = GPS_BUFFER[RMC_SPEED];
     fd8:	2e ab       	std	Y+54, r18	; 0x36
		SYS_GPS.ground_speed_low = ((GPS_BUFFER[RMC_SPEED + 2]		* 10)	+ 
     fda:	88 0f       	add	r24, r24
     fdc:	28 2f       	mov	r18, r24
     fde:	22 0f       	add	r18, r18
     fe0:	22 0f       	add	r18, r18
     fe2:	82 0f       	add	r24, r18
     fe4:	98 0f       	add	r25, r24
     fe6:	9f ab       	std	Y+55, r25	; 0x37
     fe8:	e4 e3       	ldi	r30, 0x34	; 52
     fea:	f2 e0       	ldi	r31, 0x02	; 2
     fec:	a7 eb       	ldi	r26, 0xB7	; 183
     fee:	b2 e0       	ldi	r27, 0x02	; 2
     ff0:	2a e3       	ldi	r18, 0x3A	; 58
     ff2:	32 e0       	ldi	r19, 0x02	; 2
									(GPS_BUFFER[RMC_SPEED + 3]));
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_COURSE; i++){
			SYS_GPS.COURSE_ASCII[i] = GPS_BUFFER[RMC_COURSE + i];
     ff4:	81 91       	ld	r24, Z+
     ff6:	8d 93       	st	X+, r24
		//Compress to decimal:
		SYS_GPS.ground_speed_high = GPS_BUFFER[RMC_SPEED];
		SYS_GPS.ground_speed_low = ((GPS_BUFFER[RMC_SPEED + 2]		* 10)	+ 
									(GPS_BUFFER[RMC_SPEED + 3]));
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_COURSE; i++){
     ff8:	e2 17       	cp	r30, r18
     ffa:	f3 07       	cpc	r31, r19
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <GPS_parse_data+0x278>
			SYS_GPS.COURSE_ASCII[i] = GPS_BUFFER[RMC_COURSE + i];
		}
		//Compress to decimal:
		SYS_GPS.course_high =	(	(GPS_BUFFER[RMC_COURSE]			* 100)	+
     ffe:	e2 e0       	ldi	r30, 0x02	; 2
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	22 a9       	ldd	r18, Z+50	; 0x32
    1004:	83 a9       	ldd	r24, Z+51	; 0x33
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	ac 01       	movw	r20, r24
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	84 0f       	add	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	34 e6       	ldi	r19, 0x64	; 100
    1020:	23 9f       	mul	r18, r19
    1022:	80 0d       	add	r24, r0
    1024:	91 1d       	adc	r25, r1
    1026:	11 24       	eor	r1, r1
    1028:	24 a9       	ldd	r18, Z+52	; 0x34
    102a:	82 0f       	add	r24, r18
    102c:	91 1d       	adc	r25, r1
    102e:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <SYS_GPS+0x3f>
    1032:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <SYS_GPS+0x3e>
									(GPS_BUFFER[RMC_COURSE + 1]		* 10)	+
									(GPS_BUFFER[RMC_COURSE + 2]));
		SYS_GPS.course_low = (		(GPS_BUFFER[RMC_COURSE + 4]		* 10)	+ 
    1036:	86 a9       	ldd	r24, Z+54	; 0x36
    1038:	88 0f       	add	r24, r24
    103a:	98 2f       	mov	r25, r24
    103c:	99 0f       	add	r25, r25
    103e:	99 0f       	add	r25, r25
    1040:	89 0f       	add	r24, r25
    1042:	97 a9       	ldd	r25, Z+55	; 0x37
    1044:	89 0f       	add	r24, r25
    1046:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SYS_GPS+0x40>
    104a:	eb e3       	ldi	r30, 0x3B	; 59
    104c:	f2 e0       	ldi	r31, 0x02	; 2
    104e:	a8 e8       	ldi	r26, 0x88	; 136
    1050:	b2 e0       	ldi	r27, 0x02	; 2
    1052:	21 e4       	ldi	r18, 0x41	; 65
    1054:	32 e0       	ldi	r19, 0x02	; 2
									(GPS_BUFFER[RMC_COURSE + 5]));
		//F. DATE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_UTC_DATE; i++){
			SYS_GPS.UTC_DATE_ASCII[i] = GPS_BUFFER[RMC_DATE + i];
    1056:	81 91       	ld	r24, Z+
    1058:	8d 93       	st	X+, r24
									(GPS_BUFFER[RMC_COURSE + 2]));
		SYS_GPS.course_low = (		(GPS_BUFFER[RMC_COURSE + 4]		* 10)	+ 
									(GPS_BUFFER[RMC_COURSE + 5]));
		//F. DATE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_UTC_DATE; i++){
    105a:	2e 17       	cp	r18, r30
    105c:	3f 07       	cpc	r19, r31
    105e:	d9 f7       	brne	.-10     	; 0x1056 <GPS_parse_data+0x2da>
			SYS_GPS.UTC_DATE_ASCII[i] = GPS_BUFFER[RMC_DATE + i];
		}
		//Compress to decimal:
		SYS_GPS.UTC_DAY =	((GPS_BUFFER[RMC_DATE]		* 10)	+ (GPS_BUFFER[RMC_DATE + 1]));
    1060:	af e7       	ldi	r26, 0x7F	; 127
    1062:	b2 e0       	ldi	r27, 0x02	; 2
    1064:	e2 e0       	ldi	r30, 0x02	; 2
    1066:	f2 e0       	ldi	r31, 0x02	; 2
    1068:	81 ad       	ldd	r24, Z+57	; 0x39
    106a:	88 0f       	add	r24, r24
    106c:	98 2f       	mov	r25, r24
    106e:	99 0f       	add	r25, r25
    1070:	99 0f       	add	r25, r25
    1072:	89 0f       	add	r24, r25
    1074:	92 ad       	ldd	r25, Z+58	; 0x3a
    1076:	89 0f       	add	r24, r25
    1078:	1f 96       	adiw	r26, 0x0f	; 15
    107a:	8c 93       	st	X, r24
    107c:	1f 97       	sbiw	r26, 0x0f	; 15
		SYS_GPS.UTC_MONTH = ((GPS_BUFFER[RMC_DATE + 2]	* 10)	+ (GPS_BUFFER[RMC_DATE + 3]));
    107e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1080:	88 0f       	add	r24, r24
    1082:	98 2f       	mov	r25, r24
    1084:	99 0f       	add	r25, r25
    1086:	99 0f       	add	r25, r25
    1088:	89 0f       	add	r24, r25
    108a:	94 ad       	ldd	r25, Z+60	; 0x3c
    108c:	89 0f       	add	r24, r25
    108e:	50 96       	adiw	r26, 0x10	; 16
    1090:	8c 93       	st	X, r24
    1092:	50 97       	sbiw	r26, 0x10	; 16
		SYS_GPS.UTC_YEAR =	((GPS_BUFFER[RMC_DATE + 4]	* 10)	+ (GPS_BUFFER[RMC_DATE + 5]));
    1094:	85 ad       	ldd	r24, Z+61	; 0x3d
    1096:	88 0f       	add	r24, r24
    1098:	98 2f       	mov	r25, r24
    109a:	99 0f       	add	r25, r25
    109c:	99 0f       	add	r25, r25
    109e:	89 0f       	add	r24, r25
    10a0:	96 ad       	ldd	r25, Z+62	; 0x3e
    10a2:	89 0f       	add	r24, r25
    10a4:	51 96       	adiw	r26, 0x11	; 17
    10a6:	8c 93       	st	X, r24
	
	//?. Enable stream, thereby flushing the buffer of all its contents.
	GPS_enable_stream();
    10a8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPS_enable_stream>
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <GPS_parse_data+0x340>
    10ae:	e9 e0       	ldi	r30, 0x09	; 9
    10b0:	f2 e0       	ldi	r31, 0x02	; 2
    10b2:	af e7       	ldi	r26, 0x7F	; 127
    10b4:	b2 e0       	ldi	r27, 0x02	; 2
    10b6:	2f e0       	ldi	r18, 0x0F	; 15
    10b8:	32 e0       	ldi	r19, 0x02	; 2
    10ba:	8d ce       	rjmp	.-742    	; 0xdd6 <GPS_parse_data+0x5a>
	
};
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <LCD_setText_cursor>:
	grid.yoff = yOff;
	grid.fg = fg;
	grid.bg = bg;
	grid.isDrawn = TRUE;
	
}
    10c6:	e0 e6       	ldi	r30, 0x60	; 96
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	93 83       	std	Z+3, r25	; 0x03
    10d0:	82 83       	std	Z+2, r24	; 0x02
    10d2:	75 83       	std	Z+5, r23	; 0x05
    10d4:	64 83       	std	Z+4, r22	; 0x04
    10d6:	08 95       	ret

000010d8 <LCD_setText_size>:
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	98 0f       	add	r25, r24
    10dc:	98 30       	cpi	r25, 0x08	; 8
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <LCD_setText_size+0xa>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_start+0x6>
    10e6:	08 95       	ret

000010e8 <LCD_setText_color>:
    10e8:	e0 e6       	ldi	r30, 0x60	; 96
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	90 87       	std	Z+8, r25	; 0x08
    10ee:	87 83       	std	Z+7, r24	; 0x07
    10f0:	72 87       	std	Z+10, r23	; 0x0a
    10f2:	61 87       	std	Z+9, r22	; 0x09
    10f4:	08 95       	ret

000010f6 <LCD_setText_all>:
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	79 01       	movw	r14, r18
    1104:	c0 e6       	ldi	r28, 0x60	; 96
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	99 83       	std	Y+1, r25	; 0x01
    110a:	88 83       	st	Y, r24
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
    1110:	7d 83       	std	Y+5, r23	; 0x05
    1112:	6c 83       	std	Y+4, r22	; 0x04
    1114:	84 2f       	mov	r24, r20
    1116:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_setText_size>
    111a:	f8 86       	std	Y+8, r15	; 0x08
    111c:	ef 82       	std	Y+7, r14	; 0x07
    111e:	1a 87       	std	Y+10, r17	; 0x0a
    1120:	09 87       	std	Y+9, r16	; 0x09
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <LCD_moveCursor>:
    1130:	e0 e6       	ldi	r30, 0x60	; 96
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	26 81       	ldd	r18, Z+6	; 0x06
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	44 0f       	add	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	42 0f       	add	r20, r18
    1140:	53 1f       	adc	r21, r19
    1142:	44 0f       	add	r20, r20
    1144:	55 1f       	adc	r21, r21
    1146:	dc 01       	movw	r26, r24
    1148:	4a 9f       	mul	r20, r26
    114a:	c0 01       	movw	r24, r0
    114c:	4b 9f       	mul	r20, r27
    114e:	90 0d       	add	r25, r0
    1150:	5a 9f       	mul	r21, r26
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	42 81       	ldd	r20, Z+2	; 0x02
    1158:	53 81       	ldd	r21, Z+3	; 0x03
    115a:	84 0f       	add	r24, r20
    115c:	95 1f       	adc	r25, r21
    115e:	93 83       	std	Z+3, r25	; 0x03
    1160:	82 83       	std	Z+2, r24	; 0x02
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	26 9f       	mul	r18, r22
    1170:	a0 01       	movw	r20, r0
    1172:	27 9f       	mul	r18, r23
    1174:	50 0d       	add	r21, r0
    1176:	36 9f       	mul	r19, r22
    1178:	50 0d       	add	r21, r0
    117a:	11 24       	eor	r1, r1
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	84 0f       	add	r24, r20
    1182:	95 1f       	adc	r25, r21
    1184:	95 83       	std	Z+5, r25	; 0x05
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	08 95       	ret

0000118a <LCD_spi_init>:
    118a:	87 b3       	in	r24, 0x17	; 23
    118c:	82 6b       	ori	r24, 0xB2	; 178
    118e:	87 bb       	out	0x17, r24	; 23
    1190:	80 e5       	ldi	r24, 0x50	; 80
    1192:	8d b9       	out	0x0d, r24	; 13
    1194:	c3 9a       	sbi	0x18, 3	; 24
    1196:	08 95       	ret

00001198 <LCD_spi_send>:
    1198:	8f b9       	out	0x0f, r24	; 15
    119a:	77 9b       	sbis	0x0e, 7	; 14
    119c:	fe cf       	rjmp	.-4      	; 0x119a <LCD_spi_send+0x2>
    119e:	08 95       	ret

000011a0 <LCD_writecommand8>:
    11a0:	98 b3       	in	r25, 0x18	; 24
    11a2:	97 7e       	andi	r25, 0xE7	; 231
    11a4:	98 bb       	out	0x18, r25	; 24
    11a6:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_spi_send>
    11aa:	c3 9a       	sbi	0x18, 3	; 24
    11ac:	08 95       	ret

000011ae <LCD_writedata8>:
    11ae:	c4 9a       	sbi	0x18, 4	; 24
    11b0:	c3 98       	cbi	0x18, 3	; 24
    11b2:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_spi_send>
    11b6:	c3 9a       	sbi	0x18, 3	; 24
    11b8:	08 95       	ret

000011ba <LCD_init_system>:
    11ba:	0e 94 c5 08 	call	0x118a	; 0x118a <LCD_spi_init>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    11c4:	8f e3       	ldi	r24, 0x3F	; 63
    11c6:	9c e9       	ldi	r25, 0x9C	; 156
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <LCD_init_system+0xe>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <LCD_init_system+0x14>
    11ce:	00 00       	nop
    11d0:	88 e2       	ldi	r24, 0x28	; 40
    11d2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    11d6:	80 ec       	ldi	r24, 0xC0	; 192
    11d8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    11dc:	86 e2       	ldi	r24, 0x26	; 38
    11de:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    11e2:	81 ec       	ldi	r24, 0xC1	; 193
    11e4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    11e8:	81 e1       	ldi	r24, 0x11	; 17
    11ea:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    11ee:	85 ec       	ldi	r24, 0xC5	; 197
    11f0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    11f4:	8c e5       	ldi	r24, 0x5C	; 92
    11f6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    11fa:	8c e4       	ldi	r24, 0x4C	; 76
    11fc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1200:	87 ec       	ldi	r24, 0xC7	; 199
    1202:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1206:	84 e9       	ldi	r24, 0x94	; 148
    1208:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    120c:	86 e3       	ldi	r24, 0x36	; 54
    120e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1212:	88 e4       	ldi	r24, 0x48	; 72
    1214:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1218:	8a e3       	ldi	r24, 0x3A	; 58
    121a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    121e:	85 e5       	ldi	r24, 0x55	; 85
    1220:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1224:	81 eb       	ldi	r24, 0xB1	; 177
    1226:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1230:	88 e1       	ldi	r24, 0x18	; 24
    1232:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1236:	82 ef       	ldi	r24, 0xF2	; 242
    1238:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    123c:	88 e0       	ldi	r24, 0x08	; 8
    123e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1242:	86 e2       	ldi	r24, 0x26	; 38
    1244:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    124e:	80 ee       	ldi	r24, 0xE0	; 224
    1250:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1254:	8f e1       	ldi	r24, 0x1F	; 31
    1256:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    125a:	8a e1       	ldi	r24, 0x1A	; 26
    125c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1260:	88 e1       	ldi	r24, 0x18	; 24
    1262:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1266:	8a e0       	ldi	r24, 0x0A	; 10
    1268:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    126c:	8f e0       	ldi	r24, 0x0F	; 15
    126e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1272:	86 e0       	ldi	r24, 0x06	; 6
    1274:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1278:	85 e4       	ldi	r24, 0x45	; 69
    127a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    127e:	87 e8       	ldi	r24, 0x87	; 135
    1280:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1284:	82 e3       	ldi	r24, 0x32	; 50
    1286:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    128a:	8a e0       	ldi	r24, 0x0A	; 10
    128c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1290:	87 e0       	ldi	r24, 0x07	; 7
    1292:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    129c:	87 e0       	ldi	r24, 0x07	; 7
    129e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12a2:	85 e0       	ldi	r24, 0x05	; 5
    12a4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12ae:	81 ee       	ldi	r24, 0xE1	; 225
    12b0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12ba:	85 e2       	ldi	r24, 0x25	; 37
    12bc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12c0:	87 e2       	ldi	r24, 0x27	; 39
    12c2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12c6:	85 e0       	ldi	r24, 0x05	; 5
    12c8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12cc:	80 e1       	ldi	r24, 0x10	; 16
    12ce:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12d2:	89 e0       	ldi	r24, 0x09	; 9
    12d4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12d8:	8a e3       	ldi	r24, 0x3A	; 58
    12da:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12de:	88 e7       	ldi	r24, 0x78	; 120
    12e0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12e4:	8d e4       	ldi	r24, 0x4D	; 77
    12e6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12ea:	85 e0       	ldi	r24, 0x05	; 5
    12ec:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12f0:	88 e1       	ldi	r24, 0x18	; 24
    12f2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12f6:	8d e0       	ldi	r24, 0x0D	; 13
    12f8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    12fc:	88 e3       	ldi	r24, 0x38	; 56
    12fe:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1302:	8a e3       	ldi	r24, 0x3A	; 58
    1304:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1308:	8f e1       	ldi	r24, 0x1F	; 31
    130a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    130e:	8a e2       	ldi	r24, 0x2A	; 42
    1310:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1326:	8f ee       	ldi	r24, 0xEF	; 239
    1328:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    132c:	8b e2       	ldi	r24, 0x2B	; 43
    132e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1344:	8f e3       	ldi	r24, 0x3F	; 63
    1346:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    134a:	87 eb       	ldi	r24, 0xB7	; 183
    134c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1350:	87 e0       	ldi	r24, 0x07	; 7
    1352:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1356:	86 eb       	ldi	r24, 0xB6	; 182
    1358:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1362:	82 e8       	ldi	r24, 0x82	; 130
    1364:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1368:	87 e2       	ldi	r24, 0x27	; 39
    136a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1374:	86 e3       	ldi	r24, 0x36	; 54
    1376:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    137a:	88 e2       	ldi	r24, 0x28	; 40
    137c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1380:	81 e1       	ldi	r24, 0x11	; 17
    1382:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1386:	9f ef       	ldi	r25, 0xFF	; 255
    1388:	21 ee       	ldi	r18, 0xE1	; 225
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	91 50       	subi	r25, 0x01	; 1
    138e:	20 40       	sbci	r18, 0x00	; 0
    1390:	80 40       	sbci	r24, 0x00	; 0
    1392:	e1 f7       	brne	.-8      	; 0x138c <LCD_init_system+0x1d2>
    1394:	00 c0       	rjmp	.+0      	; 0x1396 <LCD_init_system+0x1dc>
    1396:	00 00       	nop
    1398:	89 e2       	ldi	r24, 0x29	; 41
    139a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	21 ee       	ldi	r18, 0xE1	; 225
    13a2:	84 e0       	ldi	r24, 0x04	; 4
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	20 40       	sbci	r18, 0x00	; 0
    13a8:	80 40       	sbci	r24, 0x00	; 0
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <LCD_init_system+0x1ea>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <LCD_init_system+0x1f4>
    13ae:	00 00       	nop
    13b0:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <grid+0x12>
    13b4:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <arrow+0x8>
    13b8:	08 95       	ret

000013ba <LCD_pushColor>:
    13ba:	cf 93       	push	r28
    13bc:	c8 2f       	mov	r28, r24
    13be:	89 2f       	mov	r24, r25
    13c0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    13c4:	8c 2f       	mov	r24, r28
    13c6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <LCD_setAddress>:
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	d8 2e       	mov	r13, r24
    13e0:	c9 2e       	mov	r12, r25
    13e2:	16 2f       	mov	r17, r22
    13e4:	07 2f       	mov	r16, r23
    13e6:	f4 2e       	mov	r15, r20
    13e8:	e5 2e       	mov	r14, r21
    13ea:	c2 2f       	mov	r28, r18
    13ec:	d3 2f       	mov	r29, r19
    13ee:	8a e2       	ldi	r24, 0x2A	; 42
    13f0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    13f4:	8c 2d       	mov	r24, r12
    13f6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    13fa:	8d 2d       	mov	r24, r13
    13fc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1400:	8e 2d       	mov	r24, r14
    1402:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1406:	8f 2d       	mov	r24, r15
    1408:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    140c:	8b e2       	ldi	r24, 0x2B	; 43
    140e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1412:	80 2f       	mov	r24, r16
    1414:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1418:	81 2f       	mov	r24, r17
    141a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    141e:	8d 2f       	mov	r24, r29
    1420:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    1424:	8c 2f       	mov	r24, r28
    1426:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_writedata8>
    142a:	8c e2       	ldi	r24, 0x2C	; 44
    142c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_writecommand8>
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	08 95       	ret

00001442 <LCD_drawPixel>:
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ea 01       	movw	r28, r20
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_setAddress>
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_pushColor>
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <LCD_drawRect_filled>:
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	7a 01       	movw	r14, r20
    1472:	59 01       	movw	r10, r18
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	31 09       	sbc	r19, r1
    1478:	26 0f       	add	r18, r22
    147a:	37 1f       	adc	r19, r23
    147c:	41 50       	subi	r20, 0x01	; 1
    147e:	51 09       	sbc	r21, r1
    1480:	48 0f       	add	r20, r24
    1482:	59 1f       	adc	r21, r25
    1484:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_setAddress>
    1488:	a1 14       	cp	r10, r1
    148a:	b1 04       	cpc	r11, r1
    148c:	89 f4       	brne	.+34     	; 0x14b0 <LCD_drawRect_filled+0x54>
    148e:	16 c0       	rjmp	.+44     	; 0x14bc <LCD_drawRect_filled+0x60>
    1490:	c0 e0       	ldi	r28, 0x00	; 0
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	c8 01       	movw	r24, r16
    1496:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_pushColor>
    149a:	21 96       	adiw	r28, 0x01	; 1
    149c:	ec 16       	cp	r14, r28
    149e:	fd 06       	cpc	r15, r29
    14a0:	c9 f7       	brne	.-14     	; 0x1494 <LCD_drawRect_filled+0x38>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	c8 1a       	sub	r12, r24
    14a6:	d8 0a       	sbc	r13, r24
    14a8:	ac 14       	cp	r10, r12
    14aa:	bd 04       	cpc	r11, r13
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <LCD_drawRect_filled+0x58>
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <LCD_drawRect_filled+0x60>
    14b0:	c1 2c       	mov	r12, r1
    14b2:	d1 2c       	mov	r13, r1
    14b4:	e1 14       	cp	r14, r1
    14b6:	f1 04       	cpc	r15, r1
    14b8:	59 f7       	brne	.-42     	; 0x1490 <LCD_drawRect_filled+0x34>
    14ba:	f3 cf       	rjmp	.-26     	; 0x14a2 <LCD_drawRect_filled+0x46>
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	08 95       	ret

000014d2 <LCD_drawRect_empty>:
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	7c 01       	movw	r14, r24
    14ec:	6b 01       	movw	r12, r22
    14ee:	ea 01       	movw	r28, r20
    14f0:	49 01       	movw	r8, r18
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    14fa:	b4 01       	movw	r22, r8
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	71 09       	sbc	r23, r1
    1500:	6c 0d       	add	r22, r12
    1502:	7d 1d       	adc	r23, r13
    1504:	21 e0       	ldi	r18, 0x01	; 1
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	ae 01       	movw	r20, r28
    150a:	c7 01       	movw	r24, r14
    150c:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    1510:	94 01       	movw	r18, r8
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	b6 01       	movw	r22, r12
    1518:	c7 01       	movw	r24, r14
    151a:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    151e:	ce 01       	movw	r24, r28
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	94 01       	movw	r18, r8
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	b6 01       	movw	r22, r12
    152a:	8e 0d       	add	r24, r14
    152c:	9f 1d       	adc	r25, r15
    152e:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	9f 90       	pop	r9
    1548:	8f 90       	pop	r8
    154a:	08 95       	ret

0000154c <LCD_drawLogo>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	4c 01       	movw	r8, r24
    1566:	5b 01       	movw	r10, r22
    1568:	7a 01       	movw	r14, r20
    156a:	c1 e6       	ldi	r28, 0x61	; 97
    156c:	d5 e0       	ldi	r29, 0x05	; 5
    156e:	0f 2e       	mov	r0, r31
    1570:	f5 e6       	ldi	r31, 0x65	; 101
    1572:	cf 2e       	mov	r12, r31
    1574:	f9 e0       	ldi	r31, 0x09	; 9
    1576:	df 2e       	mov	r13, r31
    1578:	f0 2d       	mov	r31, r0
    157a:	fe 01       	movw	r30, r28
    157c:	25 91       	lpm	r18, Z+
    157e:	34 91       	lpm	r19, Z
    1580:	d9 01       	movw	r26, r18
    1582:	af 71       	andi	r26, 0x1F	; 31
    1584:	bb 27       	eor	r27, r27
    1586:	c9 01       	movw	r24, r18
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	92 95       	swap	r25
    158e:	82 95       	swap	r24
    1590:	8f 70       	andi	r24, 0x0F	; 15
    1592:	89 27       	eor	r24, r25
    1594:	9f 70       	andi	r25, 0x0F	; 15
    1596:	89 27       	eor	r24, r25
    1598:	8f 71       	andi	r24, 0x1F	; 31
    159a:	99 27       	eor	r25, r25
    159c:	f9 01       	movw	r30, r18
    159e:	ef 2f       	mov	r30, r31
    15a0:	ff 27       	eor	r31, r31
    15a2:	e6 95       	lsr	r30
    15a4:	ee 73       	andi	r30, 0x3E	; 62
    15a6:	ff 27       	eor	r31, r31
    15a8:	e8 57       	subi	r30, 0x78	; 120
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	00 81       	ld	r16, Z
    15ae:	11 81       	ldd	r17, Z+1	; 0x01
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	e2 16       	cp	r14, r18
    15b4:	f1 04       	cpc	r15, r1
    15b6:	51 f4       	brne	.+20     	; 0x15cc <LCD_drawLogo+0x80>
    15b8:	bc 01       	movw	r22, r24
    15ba:	6a 0d       	add	r22, r10
    15bc:	7b 1d       	adc	r23, r11
    15be:	a8 01       	movw	r20, r16
    15c0:	cd 01       	movw	r24, r26
    15c2:	88 0d       	add	r24, r8
    15c4:	99 1d       	adc	r25, r9
    15c6:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_drawPixel>
    15ca:	16 c0       	rjmp	.+44     	; 0x15f8 <LCD_drawLogo+0xac>
    15cc:	8e 9d       	mul	r24, r14
    15ce:	b0 01       	movw	r22, r0
    15d0:	8f 9d       	mul	r24, r15
    15d2:	70 0d       	add	r23, r0
    15d4:	9e 9d       	mul	r25, r14
    15d6:	70 0d       	add	r23, r0
    15d8:	11 24       	eor	r1, r1
    15da:	6a 0d       	add	r22, r10
    15dc:	7b 1d       	adc	r23, r11
    15de:	ae 9d       	mul	r26, r14
    15e0:	c0 01       	movw	r24, r0
    15e2:	af 9d       	mul	r26, r15
    15e4:	90 0d       	add	r25, r0
    15e6:	be 9d       	mul	r27, r14
    15e8:	90 0d       	add	r25, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	97 01       	movw	r18, r14
    15ee:	a7 01       	movw	r20, r14
    15f0:	88 0d       	add	r24, r8
    15f2:	99 1d       	adc	r25, r9
    15f4:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    15f8:	22 96       	adiw	r28, 0x02	; 2
    15fa:	cc 15       	cp	r28, r12
    15fc:	dd 05       	cpc	r29, r13
    15fe:	09 f0       	breq	.+2      	; 0x1602 <LCD_drawLogo+0xb6>
    1600:	bc cf       	rjmp	.-136    	; 0x157a <LCD_drawLogo+0x2e>
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bf 90       	pop	r11
    1614:	af 90       	pop	r10
    1616:	9f 90       	pop	r9
    1618:	8f 90       	pop	r8
    161a:	08 95       	ret

0000161c <LCD_clear>:
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	8c 01       	movw	r16, r24
    1622:	20 ef       	ldi	r18, 0xF0	; 240
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e4       	ldi	r20, 0x40	; 64
    1628:	51 e0       	ldi	r21, 0x01	; 1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	08 95       	ret

0000163c <LCD_clearLine>:
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	e0 e6       	ldi	r30, 0x60	; 96
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	01 85       	ldd	r16, Z+9	; 0x09
    164a:	12 85       	ldd	r17, Z+10	; 0x0a
    164c:	26 81       	ldd	r18, Z+6	; 0x06
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	22 0f       	add	r18, r18
    1652:	33 1f       	adc	r19, r19
    1654:	22 0f       	add	r18, r18
    1656:	33 1f       	adc	r19, r19
    1658:	22 0f       	add	r18, r18
    165a:	33 1f       	adc	r19, r19
    165c:	40 e4       	ldi	r20, 0x40	; 64
    165e:	51 e0       	ldi	r21, 0x01	; 1
    1660:	48 1b       	sub	r20, r24
    1662:	59 0b       	sbc	r21, r25
    1664:	64 81       	ldd	r22, Z+4	; 0x04
    1666:	75 81       	ldd	r23, Z+5	; 0x05
    1668:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <LCD_drawChar>:
	/* Update Frame Data */
	LCD_writecommand8(0x2C);	// Perform memory write
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
    1672:	2f 92       	push	r2
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	2b 97       	sbiw	r28, 0x0b	; 11
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	7f 83       	std	Y+7, r23	; 0x07
    16a8:	6e 83       	std	Y+6, r22	; 0x06
    16aa:	e9 82       	std	Y+1, r14	; 0x01
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	ba 01       	movw	r22, r20
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	46 0f       	add	r20, r22
    16ba:	57 1f       	adc	r21, r23
    16bc:	4e 2c       	mov	r4, r14
    16be:	51 2c       	mov	r5, r1
    16c0:	3c 01       	movw	r6, r24
    16c2:	1c 01       	movw	r2, r24
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
    16c4:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    16c6:	ba 01       	movw	r22, r20
    16c8:	68 1b       	sub	r22, r24
    16ca:	79 0b       	sbc	r23, r25
    16cc:	79 87       	std	Y+9, r23	; 0x09
    16ce:	68 87       	std	Y+8, r22	; 0x08
    16d0:	42 01       	movw	r8, r4
    16d2:	ae 80       	ldd	r10, Y+6	; 0x06
    16d4:	bf 80       	ldd	r11, Y+7	; 0x07
    16d6:	78 e0       	ldi	r23, 0x08	; 8
    16d8:	a7 0e       	add	r10, r23
    16da:	b1 1c       	adc	r11, r1

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
			Color bitColor = pattern & 0x01 ? fg : bg;									//   Record color depending on state of current bit in pattern
    16dc:	2b 83       	std	Y+3, r18	; 0x03
    16de:	3c 83       	std	Y+4, r19	; 0x04
    16e0:	0d 83       	std	Y+5, r16	; 0x05
    16e2:	e1 2e       	mov	r14, r17
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	85 30       	cpi	r24, 0x05	; 5
    16e8:	bc f5       	brge	.+110    	; 0x1758 <LCD_drawChar+0xe6>
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    16ea:	e8 85       	ldd	r30, Y+8	; 0x08
    16ec:	f9 85       	ldd	r31, Y+9	; 0x09
    16ee:	e2 0d       	add	r30, r2
    16f0:	f3 1d       	adc	r31, r3
    16f2:	ea 59       	subi	r30, 0x9A	; 154
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	f4 90       	lpm	r15, Z
    16f8:	30 c0       	rjmp	.+96     	; 0x175a <LCD_drawChar+0xe8>

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
			Color bitColor = pattern & 0x01 ? fg : bg;									//   Record color depending on state of current bit in pattern
    16fa:	f0 fc       	sbrc	r15, 0
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <LCD_drawChar+0x92>
    16fe:	0d 81       	ldd	r16, Y+5	; 0x05
    1700:	1e 2d       	mov	r17, r14
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <LCD_drawChar+0x96>
    1704:	0b 81       	ldd	r16, Y+3	; 0x03
    1706:	1c 81       	ldd	r17, Y+4	; 0x04
			
			if(size == 1)																//   If size of text = 1,
    1708:	99 81       	ldd	r25, Y+1	; 0x01
    170a:	91 30       	cpi	r25, 0x01	; 1
    170c:	41 f4       	brne	.+16     	; 0x171e <LCD_drawChar+0xac>
				LCD_drawPixel(x+line, y+bitNum, bitColor);								//	  Draw pixel using recorded bit color     
    170e:	40 2f       	mov	r20, r16
    1710:	51 2f       	mov	r21, r17
    1712:	6a 85       	ldd	r22, Y+10	; 0x0a
    1714:	7b 85       	ldd	r23, Y+11	; 0x0b
    1716:	c1 01       	movw	r24, r2
    1718:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_drawPixel>
    171c:	06 c0       	rjmp	.+12     	; 0x172a <LCD_drawChar+0xb8>
					
			else                                                                        //	 Else,
				LCD_drawRect_filled(x+line*size, y+bitNum*size, size, size, bitColor);	//	  Draw rectangle using recorded bit color
    171e:	92 01       	movw	r18, r4
    1720:	a2 01       	movw	r20, r4
    1722:	b6 01       	movw	r22, r12
    1724:	c3 01       	movw	r24, r6
    1726:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_drawRect_filled>
				
			pattern >>= 1;																//   Advance to next bit in pattern
    172a:	f6 94       	lsr	r15
    172c:	6a 85       	ldd	r22, Y+10	; 0x0a
    172e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	7b 87       	std	Y+11, r23	; 0x0b
    1736:	6a 87       	std	Y+10, r22	; 0x0a
    1738:	c8 0c       	add	r12, r8
    173a:	d9 1c       	adc	r13, r9
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
    173c:	6a 15       	cp	r22, r10
    173e:	7b 05       	cpc	r23, r11
    1740:	e1 f6       	brne	.-72     	; 0x16fa <LCD_drawChar+0x88>
    1742:	7a 81       	ldd	r23, Y+2	; 0x02
    1744:	7f 5f       	subi	r23, 0xFF	; 255
    1746:	7a 83       	std	Y+2, r23	; 0x02
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	28 1a       	sub	r2, r24
    174c:	38 0a       	sbc	r3, r24
    174e:	64 0c       	add	r6, r4
    1750:	75 1c       	adc	r7, r5
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
    1752:	76 30       	cpi	r23, 0x06	; 6
    1754:	39 f6       	brne	.-114    	; 0x16e4 <LCD_drawChar+0x72>
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <LCD_drawChar+0xf4>
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern
    1758:	f1 2c       	mov	r15, r1
    175a:	6e 81       	ldd	r22, Y+6	; 0x06
    175c:	7f 81       	ldd	r23, Y+7	; 0x07
			
			if(size == 1)																//   If size of text = 1,
				LCD_drawPixel(x+line, y+bitNum, bitColor);								//	  Draw pixel using recorded bit color     
					
			else                                                                        //	 Else,
				LCD_drawRect_filled(x+line*size, y+bitNum*size, size, size, bitColor);	//	  Draw rectangle using recorded bit color
    175e:	6b 01       	movw	r12, r22
    1760:	7b 87       	std	Y+11, r23	; 0x0b
    1762:	6a 87       	std	Y+10, r22	; 0x0a
    1764:	ca cf       	rjmp	.-108    	; 0x16fa <LCD_drawChar+0x88>
				
			pattern >>= 1;																//   Advance to next bit in pattern
		}	
	}
}
    1766:	2b 96       	adiw	r28, 0x0b	; 11
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	3f 90       	pop	r3
    1794:	2f 90       	pop	r2
    1796:	08 95       	ret

00001798 <LCD_printChar>:

void LCD_printChar(char c)
{
    1798:	ef 92       	push	r14
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
	/* Draw 'c' */																// ***
	if (c == '\n') {															// If the character is '\n'
    17a2:	8a 30       	cpi	r24, 0x0A	; 10
    17a4:	89 f4       	brne	.+34     	; 0x17c8 <LCD_printChar+0x30>
		pencil.y += pencil.size * 8;											//  Move pencil cursor down and 
    17a6:	e0 e6       	ldi	r30, 0x60	; 96
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	26 81       	ldd	r18, Z+6	; 0x06
    17ac:	84 81       	ldd	r24, Z+4	; 0x04
    17ae:	95 81       	ldd	r25, Z+5	; 0x05
    17b0:	38 e0       	ldi	r19, 0x08	; 8
    17b2:	23 9f       	mul	r18, r19
    17b4:	80 0d       	add	r24, r0
    17b6:	91 1d       	adc	r25, r1
    17b8:	11 24       	eor	r1, r1
    17ba:	95 83       	std	Z+5, r25	; 0x05
    17bc:	84 83       	std	Z+4, r24	; 0x04
		pencil.x = pencil.xorigin;												//  Move pencil cursor back to xoriging
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	93 83       	std	Z+3, r25	; 0x03
    17c4:	82 83       	std	Z+2, r24	; 0x02
    17c6:	1d c0       	rjmp	.+58     	; 0x1802 <LCD_printChar+0x6a>
    17c8:	48 2f       	mov	r20, r24
	}
	
	else {																		// Else, 
		LCD_drawChar(pencil.x, pencil.y, c, pencil.fg, pencil.bg, pencil.size);	// Draw character using pencil
    17ca:	c0 e6       	ldi	r28, 0x60	; 96
    17cc:	d0 e0       	ldi	r29, 0x00	; 0
    17ce:	09 85       	ldd	r16, Y+9	; 0x09
    17d0:	1a 85       	ldd	r17, Y+10	; 0x0a
    17d2:	2f 81       	ldd	r18, Y+7	; 0x07
    17d4:	38 85       	ldd	r19, Y+8	; 0x08
    17d6:	6c 81       	ldd	r22, Y+4	; 0x04
    17d8:	7d 81       	ldd	r23, Y+5	; 0x05
    17da:	ee 80       	ldd	r14, Y+6	; 0x06
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_drawChar>
		pencil.x += pencil.size * 6;											// Move pencil cursor 6 px to the right
    17e4:	8e 81       	ldd	r24, Y+6	; 0x06
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 01       	movw	r18, r24
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	2a 81       	ldd	r18, Y+2	; 0x02
    17f8:	3b 81       	ldd	r19, Y+3	; 0x03
    17fa:	82 0f       	add	r24, r18
    17fc:	93 1f       	adc	r25, r19
    17fe:	9b 83       	std	Y+3, r25	; 0x03
    1800:	8a 83       	std	Y+2, r24	; 0x02
	}
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <LCD_print_str>:
	/* Clear Current Line of Text */
	LCD_drawRect_filled(pencil.x, pencil.y, TFTWIDTH - pencil.x, 8 * pencil.size, pencil.bg);
}

void LCD_print_str(char * str)
{
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ec 01       	movw	r28, r24
	/* Print all letters of 'str' */			// ***
	for(uint8_t i = 0; i < strlen(str); i++)	// For each letter in 'str'
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <LCD_print_str+0x1a>
		LCD_printChar(str[i]);					//  Print letter
    181a:	fe 01       	movw	r30, r28
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	80 81       	ld	r24, Z
    1822:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_printChar>
}

void LCD_print_str(char * str)
{
	/* Print all letters of 'str' */			// ***
	for(uint8_t i = 0; i < strlen(str); i++)	// For each letter in 'str'
    1826:	1f 5f       	subi	r17, 0xFF	; 255
    1828:	81 2f       	mov	r24, r17
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	fe 01       	movw	r30, r28
    182e:	01 90       	ld	r0, Z+
    1830:	00 20       	and	r0, r0
    1832:	e9 f7       	brne	.-6      	; 0x182e <LCD_print_str+0x20>
    1834:	31 97       	sbiw	r30, 0x01	; 1
    1836:	ec 1b       	sub	r30, r28
    1838:	fd 0b       	sbc	r31, r29
    183a:	8e 17       	cp	r24, r30
    183c:	9f 07       	cpc	r25, r31
    183e:	68 f3       	brcs	.-38     	; 0x181a <LCD_print_str+0xc>
		LCD_printChar(str[i]);					//  Print letter
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	08 95       	ret

00001848 <__vector_11>:
//								INTERRUPTS    											          //
////////////////////////////////////////////////////////////////////////////////////////////////////
/* KEYPAD INTERRUPT FOR FSM */

/* GPS INTERRUPT FOR PARSING */
ISR(USARTRXC_vect){
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	2f 93       	push	r18
    1854:	3f 93       	push	r19
    1856:	4f 93       	push	r20
    1858:	5f 93       	push	r21
    185a:	6f 93       	push	r22
    185c:	7f 93       	push	r23
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	cf 93       	push	r28
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
	
	//Receive the byte to empty out the buffer, then operate on it:
	char vector_data = GPS_receive_byte();
    186c:	0e 94 6d 06 	call	0xcda	; 0xcda <GPS_receive_byte>
    1870:	c8 2f       	mov	r28, r24

	//Always start with an overflow check:
	// -Since the sentence length won't exceed 120, we should worry if it gets to 121.
	// -Should this happen, a hard reset is necessary, so we'll do exactly that.
	if(GPS_BUFFER_INDEX > 120){GPS_flush_buffer();}
    1872:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <GPS_BUFFER_INDEX>
    1876:	89 37       	cpi	r24, 0x79	; 121
    1878:	10 f0       	brcs	.+4      	; 0x187e <__vector_11+0x36>
    187a:	0e 94 71 06 	call	0xce2	; 0xce2 <GPS_flush_buffer>
	
	//Filter out whether or not this data can be transferred to the buffer:
	//	-This requires either that the received character is '$' or GPS_MESSAGE_READY = 1;
	if(vector_data == '$'){
    187e:	c4 32       	cpi	r28, 0x24	; 36
    1880:	49 f4       	brne	.+18     	; 0x1894 <__vector_11+0x4c>
		GPS_MESSAGE_READY = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <__data_end>
		//These assignments help with buffering alignment.
		GPS_BUFFER[0] = '$';
    1888:	94 e2       	ldi	r25, 0x24	; 36
    188a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <GPS_BUFFER>
		GPS_BUFFER_INDEX = 1;
    188e:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <GPS_BUFFER_INDEX>
    1892:	19 c0       	rjmp	.+50     	; 0x18c6 <__vector_11+0x7e>
	}
	//If the character received is instead a terminator, begin the parsing!
	else if((vector_data == '*') && (GPS_MESSAGE_READY)){
    1894:	ca 32       	cpi	r28, 0x2A	; 42
    1896:	49 f4       	brne	.+18     	; 0x18aa <__vector_11+0x62>
    1898:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__data_end>
    189c:	88 23       	and	r24, r24
    189e:	99 f0       	breq	.+38     	; 0x18c6 <__vector_11+0x7e>
		GPS_parse_data();
    18a0:	0e 94 be 06 	call	0xd7c	; 0xd7c <GPS_parse_data>
		APP_update_menu_debug_updateAll();
    18a4:	0e 94 77 05 	call	0xaee	; 0xaee <APP_update_menu_debug_updateAll>
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <__vector_11+0x7e>
	}
	//If neither character was detected, but '$' appeared previously, then just buffer the characters:
	else if(GPS_MESSAGE_READY){
    18aa:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__data_end>
    18ae:	88 23       	and	r24, r24
    18b0:	51 f0       	breq	.+20     	; 0x18c6 <__vector_11+0x7e>
		GPS_BUFFER[GPS_BUFFER_INDEX] = vector_data;
    18b2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <GPS_BUFFER_INDEX>
    18b6:	e8 2f       	mov	r30, r24
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	ee 5f       	subi	r30, 0xFE	; 254
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	c0 83       	st	Z, r28
		GPS_BUFFER_INDEX++;
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <GPS_BUFFER_INDEX>
	}
	
}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	cf 91       	pop	r28
    18cc:	bf 91       	pop	r27
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <main>:
	///////////////
	//   SETUP   //
	///////////////
	
	/* PORTS */
	DDRA = 0xFF;	//Port A is not currently used, but may assert slaves in the future.
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;	
    18ee:	1b ba       	out	0x1b, r1	; 27
	
	DDRB = 0xCD;	//Port B contains:
    18f0:	8d ec       	ldi	r24, 0xCD	; 205
    18f2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x32;	// SPI, INT2 ( Pin 3 ), connection to LCD ( data out ).
    18f4:	82 e3       	ldi	r24, 0x32	; 50
    18f6:	88 bb       	out	0x18, r24	; 24
	
	DDRC = 0x00;	//Port C contains:
    18f8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;	// JTAG interface; this renders some of the pins unusable as I/O.
    18fa:	15 ba       	out	0x15, r1	; 21
	
	DDRD = 0b00010010;	//Port D contains:
    18fc:	82 e1       	ldi	r24, 0x12	; 18
    18fe:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x80;	// USART, INT0, INT1, buzzer driver pin
    1900:	80 e8       	ldi	r24, 0x80	; 128
    1902:	82 bb       	out	0x12, r24	; 18
	
	/* RECOVERY */
	//Recovery program is currently defined in the EEPROM driver.
	EEPROM_enable();
    1904:	0e 94 12 06 	call	0xc24	; 0xc24 <EEPROM_enable>
	//This recovery program must have two components!
	//EEPROM_recovery(); AND SD_recovery(); which is not yet available!
	EEPROM_recovery();				//Reacquire old persistent information.
    1908:	0e 94 1e 06 	call	0xc3c	; 0xc3c <EEPROM_recovery>
	/* TIMERS/BUZZER */
	

	/* DISPLAY */
	uint16_t text_x = 92, text_y = 184;
	LCD_init_system();				// Init LCD
    190c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_init_system>
	init_buzzer();					// Init Buzzer
    1910:	0e 94 0d 06 	call	0xc1a	; 0xc1a <init_buzzer>
	APP_generate_menu(LOADINGMENU);	// Display Loading Screen
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <APP_generate_menu>
	LCD_setText_all(text_x,text_y,1,WHITE,GREY);
    191a:	08 e6       	ldi	r16, 0x68	; 104
    191c:	1a e4       	ldi	r17, 0x4A	; 74
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	68 eb       	ldi	r22, 0xB8	; 184
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	8c e5       	ldi	r24, 0x5C	; 92
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_setText_all>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1930:	8f e3       	ldi	r24, 0x3F	; 63
    1932:	9c e9       	ldi	r25, 0x9C	; 156
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <main+0x4a>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <main+0x50>
    193a:	00 00       	nop
	_delay_ms(20);
	
	
	/* GPS */
	//Initialize communication, then configure MTK3339 firmware, then open up.
	GPS_BUFFER_INDEX = 0;			//Begin at start of data buffer.
    193c:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <GPS_BUFFER_INDEX>
	GPS_MESSAGE_READY= 0;			//Buffer will begin to fill normally.
    1940:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	LCD_print_str("Initializing USART...    ");
    1944:	84 e9       	ldi	r24, 0x94	; 148
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	GPS_init_USART(MY_UBBR);
    194c:	83 e3       	ldi	r24, 0x33	; 51
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 37 06 	call	0xc6e	; 0xc6e <GPS_init_USART>
	
	LCD_setText_cursor(text_x,text_y);
    1954:	68 eb       	ldi	r22, 0xB8	; 184
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	8c e5       	ldi	r24, 0x5C	; 92
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <LCD_setText_cursor>
	LCD_print_str("Configuring Firmware...  ");
    1960:	8e ea       	ldi	r24, 0xAE	; 174
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	GPS_configure_firmware();
    1968:	0e 94 42 06 	call	0xc84	; 0xc84 <GPS_configure_firmware>
	
	LCD_setText_cursor(text_x,text_y);
    196c:	68 eb       	ldi	r22, 0xB8	; 184
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	8c e5       	ldi	r24, 0x5C	; 92
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 63 08 	call	0x10c6	; 0x10c6 <LCD_setText_cursor>
	LCD_print_str("Enabling Stream...       ");
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	0e 94 07 0c 	call	0x180e	; 0x180e <LCD_print_str>
	APP_generate_menu(DEBUGMENU);
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <APP_generate_menu>
	GPS_enable_stream();			//Begin receiving data
    1986:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPS_enable_stream>

	/* INTERRUPTS */
	sei();
    198a:	78 94       	sei
    198c:	ff cf       	rjmp	.-2      	; 0x198c <main+0xa2>

0000198e <__tablejump2__>:
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	05 90       	lpm	r0, Z+
    1994:	f4 91       	lpm	r31, Z
    1996:	e0 2d       	mov	r30, r0
    1998:	09 94       	ijmp

0000199a <_exit>:
    199a:	f8 94       	cli

0000199c <__stop_program>:
    199c:	ff cf       	rjmp	.-2      	; 0x199c <__stop_program>
