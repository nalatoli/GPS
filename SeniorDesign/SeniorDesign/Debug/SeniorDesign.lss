
SeniorDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000176c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  0000176c  00001800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  008001fc  008001fc  0000199c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062ef  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109f  00000000  00000000  00007f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b3  00000000  00000000  0000901e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  0000a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6c  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000302e  00000000  00000000  0000bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000effe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 04 	jmp	0x954	; 0x954 <__ctors_end>
       4:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
       8:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
       c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      10:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      14:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      18:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      1c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      20:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      24:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      28:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      2c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_11>
      30:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      34:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      38:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      3c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      40:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      44:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      48:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      4c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>
      50:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 00       	nop
      56:	00 00       	nop
      58:	00 3e       	cpi	r16, 0xE0	; 224
      5a:	5b 4f       	sbci	r21, 0xFB	; 251
      5c:	5b 3e       	cpi	r21, 0xEB	; 235
      5e:	3e 6b       	ori	r19, 0xBE	; 190
      60:	4f 6b       	ori	r20, 0xBF	; 191
      62:	3e 1c       	adc	r3, r14
      64:	3e 7c       	andi	r19, 0xCE	; 206
      66:	3e 1c       	adc	r3, r14
      68:	18 3c       	cpi	r17, 0xC8	; 200
      6a:	7e 3c       	cpi	r23, 0xCE	; 206
      6c:	18 1c       	adc	r1, r8
      6e:	57 7d       	andi	r21, 0xD7	; 215
      70:	57 1c       	adc	r5, r7
      72:	1c 5e       	subi	r17, 0xEC	; 236
      74:	7f 5e       	subi	r23, 0xEF	; 239
      76:	1c 00       	.word	0x001c	; ????
      78:	18 3c       	cpi	r17, 0xC8	; 200
      7a:	18 00       	.word	0x0018	; ????
      7c:	ff e7       	ldi	r31, 0x7F	; 127
      7e:	c3 e7       	ldi	r28, 0x73	; 115
      80:	ff 00       	.word	0x00ff	; ????
      82:	18 24       	eor	r1, r8
      84:	18 00       	.word	0x0018	; ????
      86:	ff e7       	ldi	r31, 0x7F	; 127
      88:	db e7       	ldi	r29, 0x7B	; 123
      8a:	ff 30       	cpi	r31, 0x0F	; 15
      8c:	48 3a       	cpi	r20, 0xA8	; 168
      8e:	06 0e       	add	r0, r22
      90:	26 29       	or	r18, r6
      92:	79 29       	or	r23, r9
      94:	26 40       	sbci	r18, 0x06	; 6
      96:	7f 05       	cpc	r23, r15
      98:	05 07       	cpc	r16, r21
      9a:	40 7f       	andi	r20, 0xF0	; 240
      9c:	05 25       	eor	r16, r5
      9e:	3f 5a       	subi	r19, 0xAF	; 175
      a0:	3c e7       	ldi	r19, 0x7C	; 124
      a2:	3c 5a       	subi	r19, 0xAC	; 172
      a4:	7f 3e       	cpi	r23, 0xEF	; 239
      a6:	1c 1c       	adc	r1, r12
      a8:	08 08       	sbc	r0, r8
      aa:	1c 1c       	adc	r1, r12
      ac:	3e 7f       	andi	r19, 0xFE	; 254
      ae:	14 22       	and	r1, r20
      b0:	7f 22       	and	r7, r31
      b2:	14 5f       	subi	r17, 0xF4	; 244
      b4:	5f 00       	.word	0x005f	; ????
      b6:	5f 5f       	subi	r21, 0xFF	; 255
      b8:	06 09       	sbc	r16, r6
      ba:	7f 01       	movw	r14, r30
      bc:	7f 00       	.word	0x007f	; ????
      be:	66 89       	ldd	r22, Z+22	; 0x16
      c0:	95 6a       	ori	r25, 0xA5	; 165
      c2:	60 60       	ori	r22, 0x00	; 0
      c4:	60 60       	ori	r22, 0x00	; 0
      c6:	60 94       	com	r6
      c8:	a2 ff       	sbrs	r26, 2
      ca:	a2 94       	swap	r10
      cc:	08 04       	cpc	r0, r8
      ce:	7e 04       	cpc	r7, r14
      d0:	08 10       	cpse	r0, r8
      d2:	20 7e       	andi	r18, 0xE0	; 224
      d4:	20 10       	cpse	r2, r0
      d6:	08 08       	sbc	r0, r8
      d8:	2a 1c       	adc	r2, r10
      da:	08 08       	sbc	r0, r8
      dc:	1c 2a       	or	r1, r28
      de:	08 08       	sbc	r0, r8
      e0:	1e 10       	cpse	r1, r14
      e2:	10 10       	cpse	r1, r0
      e4:	10 0c       	add	r1, r0
      e6:	1e 0c       	add	r1, r14
      e8:	1e 0c       	add	r1, r14
      ea:	30 38       	cpi	r19, 0x80	; 128
      ec:	3e 38       	cpi	r19, 0x8E	; 142
      ee:	30 06       	cpc	r3, r16
      f0:	0e 3e       	cpi	r16, 0xEE	; 238
      f2:	0e 06       	cpc	r0, r30
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 00       	nop
      fa:	00 5f       	subi	r16, 0xF0	; 240
      fc:	00 00       	nop
      fe:	00 07       	cpc	r16, r16
     100:	00 07       	cpc	r16, r16
     102:	00 14       	cp	r0, r0
     104:	7f 14       	cp	r7, r15
     106:	7f 14       	cp	r7, r15
     108:	24 2a       	or	r2, r20
     10a:	7f 2a       	or	r7, r31
     10c:	12 23       	and	r17, r18
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	36 49       	sbci	r19, 0x96	; 150
     114:	56 20       	and	r5, r6
     116:	50 00       	.word	0x0050	; ????
     118:	08 07       	cpc	r16, r24
     11a:	03 00       	.word	0x0003	; ????
     11c:	00 1c       	adc	r0, r0
     11e:	22 41       	sbci	r18, 0x12	; 18
     120:	00 00       	nop
     122:	41 22       	and	r4, r17
     124:	1c 00       	.word	0x001c	; ????
     126:	2a 1c       	adc	r2, r10
     128:	7f 1c       	adc	r7, r15
     12a:	2a 08       	sbc	r2, r10
     12c:	08 3e       	cpi	r16, 0xE8	; 232
     12e:	08 08       	sbc	r0, r8
     130:	00 80       	ld	r0, Z
     132:	70 30       	cpi	r23, 0x00	; 0
     134:	00 08       	sbc	r0, r0
     136:	08 08       	sbc	r0, r8
     138:	08 08       	sbc	r0, r8
     13a:	00 00       	nop
     13c:	60 60       	ori	r22, 0x00	; 0
     13e:	00 20       	and	r0, r0
     140:	10 08       	sbc	r1, r0
     142:	04 02       	muls	r16, r20
     144:	3e 51       	subi	r19, 0x1E	; 30
     146:	49 45       	sbci	r20, 0x59	; 89
     148:	3e 00       	.word	0x003e	; ????
     14a:	42 7f       	andi	r20, 0xF2	; 242
     14c:	40 00       	.word	0x0040	; ????
     14e:	72 49       	sbci	r23, 0x92	; 146
     150:	49 49       	sbci	r20, 0x99	; 153
     152:	46 21       	and	r20, r6
     154:	41 49       	sbci	r20, 0x91	; 145
     156:	4d 33       	cpi	r20, 0x3D	; 61
     158:	18 14       	cp	r1, r8
     15a:	12 7f       	andi	r17, 0xF2	; 242
     15c:	10 27       	eor	r17, r16
     15e:	45 45       	sbci	r20, 0x55	; 85
     160:	45 39       	cpi	r20, 0x95	; 149
     162:	3c 4a       	sbci	r19, 0xAC	; 172
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	31 41       	sbci	r19, 0x11	; 17
     168:	21 11       	cpse	r18, r1
     16a:	09 07       	cpc	r16, r25
     16c:	36 49       	sbci	r19, 0x96	; 150
     16e:	49 49       	sbci	r20, 0x99	; 153
     170:	36 46       	sbci	r19, 0x66	; 102
     172:	49 49       	sbci	r20, 0x99	; 153
     174:	29 1e       	adc	r2, r25
     176:	00 00       	nop
     178:	14 00       	.word	0x0014	; ????
     17a:	00 00       	nop
     17c:	40 34       	cpi	r20, 0x40	; 64
     17e:	00 00       	nop
     180:	00 08       	sbc	r0, r0
     182:	14 22       	and	r1, r20
     184:	41 14       	cp	r4, r1
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	00 41       	sbci	r16, 0x10	; 16
     18c:	22 14       	cp	r2, r2
     18e:	08 02       	muls	r16, r24
     190:	01 59       	subi	r16, 0x91	; 145
     192:	09 06       	cpc	r0, r25
     194:	3e 41       	sbci	r19, 0x1E	; 30
     196:	5d 59       	subi	r21, 0x9D	; 157
     198:	4e 7c       	andi	r20, 0xCE	; 206
     19a:	12 11       	cpse	r17, r2
     19c:	12 7c       	andi	r17, 0xC2	; 194
     19e:	7f 49       	sbci	r23, 0x9F	; 159
     1a0:	49 49       	sbci	r20, 0x99	; 153
     1a2:	36 3e       	cpi	r19, 0xE6	; 230
     1a4:	41 41       	sbci	r20, 0x11	; 17
     1a6:	41 22       	and	r4, r17
     1a8:	7f 41       	sbci	r23, 0x1F	; 31
     1aa:	41 41       	sbci	r20, 0x11	; 17
     1ac:	3e 7f       	andi	r19, 0xFE	; 254
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	49 41       	sbci	r20, 0x19	; 25
     1b2:	7f 09       	sbc	r23, r15
     1b4:	09 09       	sbc	r16, r9
     1b6:	01 3e       	cpi	r16, 0xE1	; 225
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	51 73       	andi	r21, 0x31	; 49
     1bc:	7f 08       	sbc	r7, r15
     1be:	08 08       	sbc	r0, r8
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	41 7f       	andi	r20, 0xF1	; 241
     1c4:	41 00       	.word	0x0041	; ????
     1c6:	20 40       	sbci	r18, 0x00	; 0
     1c8:	41 3f       	cpi	r20, 0xF1	; 241
     1ca:	01 7f       	andi	r16, 0xF1	; 241
     1cc:	08 14       	cp	r0, r8
     1ce:	22 41       	sbci	r18, 0x12	; 18
     1d0:	7f 40       	sbci	r23, 0x0F	; 15
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	40 7f       	andi	r20, 0xF0	; 240
     1d6:	02 1c       	adc	r0, r2
     1d8:	02 7f       	andi	r16, 0xF2	; 242
     1da:	7f 04       	cpc	r7, r15
     1dc:	08 10       	cpse	r0, r8
     1de:	7f 3e       	cpi	r23, 0xEF	; 239
     1e0:	41 41       	sbci	r20, 0x11	; 17
     1e2:	41 3e       	cpi	r20, 0xE1	; 225
     1e4:	7f 09       	sbc	r23, r15
     1e6:	09 09       	sbc	r16, r9
     1e8:	06 3e       	cpi	r16, 0xE6	; 230
     1ea:	41 51       	subi	r20, 0x11	; 17
     1ec:	21 5e       	subi	r18, 0xE1	; 225
     1ee:	7f 09       	sbc	r23, r15
     1f0:	19 29       	or	r17, r9
     1f2:	46 26       	eor	r4, r22
     1f4:	49 49       	sbci	r20, 0x99	; 153
     1f6:	49 32       	cpi	r20, 0x29	; 41
     1f8:	03 01       	movw	r0, r6
     1fa:	7f 01       	movw	r14, r30
     1fc:	03 3f       	cpi	r16, 0xF3	; 243
     1fe:	40 40       	sbci	r20, 0x00	; 0
     200:	40 3f       	cpi	r20, 0xF0	; 240
     202:	1f 20       	and	r1, r15
     204:	40 20       	and	r4, r0
     206:	1f 3f       	cpi	r17, 0xFF	; 255
     208:	40 38       	cpi	r20, 0x80	; 128
     20a:	40 3f       	cpi	r20, 0xF0	; 240
     20c:	63 14       	cp	r6, r3
     20e:	08 14       	cp	r0, r8
     210:	63 03       	mulsu	r22, r19
     212:	04 78       	andi	r16, 0x84	; 132
     214:	04 03       	mulsu	r16, r20
     216:	61 59       	subi	r22, 0x91	; 145
     218:	49 4d       	sbci	r20, 0xD9	; 217
     21a:	43 00       	.word	0x0043	; ????
     21c:	7f 41       	sbci	r23, 0x1F	; 31
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	02 04       	cpc	r0, r2
     222:	08 10       	cpse	r0, r8
     224:	20 00       	.word	0x0020	; ????
     226:	41 41       	sbci	r20, 0x11	; 17
     228:	41 7f       	andi	r20, 0xF1	; 241
     22a:	04 02       	muls	r16, r20
     22c:	01 02       	muls	r16, r17
     22e:	04 40       	sbci	r16, 0x04	; 4
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	40 40       	sbci	r20, 0x00	; 0
     234:	00 03       	mulsu	r16, r16
     236:	07 08       	sbc	r0, r7
     238:	00 20       	and	r0, r0
     23a:	54 54       	subi	r21, 0x44	; 68
     23c:	78 40       	sbci	r23, 0x08	; 8
     23e:	7f 28       	or	r7, r15
     240:	44 44       	sbci	r20, 0x44	; 68
     242:	38 38       	cpi	r19, 0x88	; 136
     244:	44 44       	sbci	r20, 0x44	; 68
     246:	44 28       	or	r4, r4
     248:	38 44       	sbci	r19, 0x48	; 72
     24a:	44 28       	or	r4, r4
     24c:	7f 38       	cpi	r23, 0x8F	; 143
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	54 18       	sub	r5, r4
     252:	00 08       	sbc	r0, r0
     254:	7e 09       	sbc	r23, r14
     256:	02 18       	sub	r0, r2
     258:	a4 a4       	ldd	r10, Z+44	; 0x2c
     25a:	9c 78       	andi	r25, 0x8C	; 140
     25c:	7f 08       	sbc	r7, r15
     25e:	04 04       	cpc	r0, r4
     260:	78 00       	.word	0x0078	; ????
     262:	44 7d       	andi	r20, 0xD4	; 212
     264:	40 00       	.word	0x0040	; ????
     266:	20 40       	sbci	r18, 0x00	; 0
     268:	40 3d       	cpi	r20, 0xD0	; 208
     26a:	00 7f       	andi	r16, 0xF0	; 240
     26c:	10 28       	or	r1, r0
     26e:	44 00       	.word	0x0044	; ????
     270:	00 41       	sbci	r16, 0x10	; 16
     272:	7f 40       	sbci	r23, 0x0F	; 15
     274:	00 7c       	andi	r16, 0xC0	; 192
     276:	04 78       	andi	r16, 0x84	; 132
     278:	04 78       	andi	r16, 0x84	; 132
     27a:	7c 08       	sbc	r7, r12
     27c:	04 04       	cpc	r0, r4
     27e:	78 38       	cpi	r23, 0x88	; 136
     280:	44 44       	sbci	r20, 0x44	; 68
     282:	44 38       	cpi	r20, 0x84	; 132
     284:	fc 18       	sub	r15, r12
     286:	24 24       	eor	r2, r4
     288:	18 18       	sub	r1, r8
     28a:	24 24       	eor	r2, r4
     28c:	18 fc       	.word	0xfc18	; ????
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	08 48       	sbci	r16, 0x88	; 136
     294:	54 54       	subi	r21, 0x44	; 68
     296:	54 24       	eor	r5, r4
     298:	04 04       	cpc	r0, r4
     29a:	3f 44       	sbci	r19, 0x4F	; 79
     29c:	24 3c       	cpi	r18, 0xC4	; 196
     29e:	40 40       	sbci	r20, 0x00	; 0
     2a0:	20 7c       	andi	r18, 0xC0	; 192
     2a2:	1c 20       	and	r1, r12
     2a4:	40 20       	and	r4, r0
     2a6:	1c 3c       	cpi	r17, 0xCC	; 204
     2a8:	40 30       	cpi	r20, 0x00	; 0
     2aa:	40 3c       	cpi	r20, 0xC0	; 192
     2ac:	44 28       	or	r4, r4
     2ae:	10 28       	or	r1, r0
     2b0:	44 4c       	sbci	r20, 0xC4	; 196
     2b2:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x79b4>
     2b6:	44 64       	ori	r20, 0x44	; 68
     2b8:	54 4c       	sbci	r21, 0xC4	; 196
     2ba:	44 00       	.word	0x0044	; ????
     2bc:	08 36       	cpi	r16, 0x68	; 104
     2be:	41 00       	.word	0x0041	; ????
     2c0:	00 00       	nop
     2c2:	77 00       	.word	0x0077	; ????
     2c4:	00 00       	nop
     2c6:	41 36       	cpi	r20, 0x61	; 97
     2c8:	08 00       	.word	0x0008	; ????
     2ca:	02 01       	movw	r0, r4
     2cc:	02 04       	cpc	r0, r2
     2ce:	02 3c       	cpi	r16, 0xC2	; 194
     2d0:	26 23       	and	r18, r22
     2d2:	26 3c       	cpi	r18, 0xC6	; 198
     2d4:	1e a1       	ldd	r17, Y+38	; 0x26
     2d6:	a1 61       	ori	r26, 0x11	; 17
     2d8:	12 3a       	cpi	r17, 0xA2	; 162
     2da:	40 40       	sbci	r20, 0x00	; 0
     2dc:	20 7a       	andi	r18, 0xA0	; 160
     2de:	38 54       	subi	r19, 0x48	; 72
     2e0:	54 55       	subi	r21, 0x54	; 84
     2e2:	59 21       	and	r21, r9
     2e4:	55 55       	subi	r21, 0x55	; 85
     2e6:	79 41       	sbci	r23, 0x19	; 25
     2e8:	22 54       	subi	r18, 0x42	; 66
     2ea:	54 78       	andi	r21, 0x84	; 132
     2ec:	42 21       	and	r20, r2
     2ee:	55 54       	subi	r21, 0x45	; 69
     2f0:	78 40       	sbci	r23, 0x08	; 8
     2f2:	20 54       	subi	r18, 0x40	; 64
     2f4:	55 79       	andi	r21, 0x95	; 149
     2f6:	40 0c       	add	r4, r0
     2f8:	1e 52       	subi	r17, 0x2E	; 46
     2fa:	72 12       	cpse	r7, r18
     2fc:	39 55       	subi	r19, 0x59	; 89
     2fe:	55 55       	subi	r21, 0x55	; 85
     300:	59 39       	cpi	r21, 0x99	; 153
     302:	54 54       	subi	r21, 0x44	; 68
     304:	54 59       	subi	r21, 0x94	; 148
     306:	39 55       	subi	r19, 0x59	; 89
     308:	54 54       	subi	r21, 0x44	; 68
     30a:	58 00       	.word	0x0058	; ????
     30c:	00 45       	sbci	r16, 0x50	; 80
     30e:	7c 41       	sbci	r23, 0x1C	; 28
     310:	00 02       	muls	r16, r16
     312:	45 7d       	andi	r20, 0xD5	; 213
     314:	42 00       	.word	0x0042	; ????
     316:	01 45       	sbci	r16, 0x51	; 81
     318:	7c 40       	sbci	r23, 0x0C	; 12
     31a:	7d 12       	cpse	r7, r29
     31c:	11 12       	cpse	r1, r17
     31e:	7d f0       	brhs	.+30     	; 0x33e <__trampolines_end+0x2ea>
     320:	28 25       	eor	r18, r8
     322:	28 f0       	brcs	.+10     	; 0x32e <__trampolines_end+0x2da>
     324:	7c 54       	subi	r23, 0x4C	; 76
     326:	55 45       	sbci	r21, 0x55	; 85
     328:	00 20       	and	r0, r0
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	7c 54       	subi	r23, 0x4C	; 76
     32e:	7c 0a       	sbc	r7, r28
     330:	09 7f       	andi	r16, 0xF9	; 249
     332:	49 32       	cpi	r20, 0x29	; 41
     334:	49 49       	sbci	r20, 0x99	; 153
     336:	49 32       	cpi	r20, 0x29	; 41
     338:	3a 44       	sbci	r19, 0x4A	; 74
     33a:	44 44       	sbci	r20, 0x44	; 68
     33c:	3a 32       	cpi	r19, 0x2A	; 42
     33e:	4a 48       	sbci	r20, 0x8A	; 138
     340:	48 30       	cpi	r20, 0x08	; 8
     342:	3a 41       	sbci	r19, 0x1A	; 26
     344:	41 21       	and	r20, r1
     346:	7a 3a       	cpi	r23, 0xAA	; 170
     348:	42 40       	sbci	r20, 0x02	; 2
     34a:	20 78       	andi	r18, 0x80	; 128
     34c:	00 9d       	mul	r16, r0
     34e:	a0 a0       	ldd	r10, Z+32	; 0x20
     350:	7d 3d       	cpi	r23, 0xDD	; 221
     352:	42 42       	sbci	r20, 0x22	; 34
     354:	42 3d       	cpi	r20, 0xD2	; 210
     356:	3d 40       	sbci	r19, 0x0D	; 13
     358:	40 40       	sbci	r20, 0x00	; 0
     35a:	3d 3c       	cpi	r19, 0xCD	; 205
     35c:	24 ff       	sbrs	r18, 4
     35e:	24 24       	eor	r2, r4
     360:	48 7e       	andi	r20, 0xE8	; 232
     362:	49 43       	sbci	r20, 0x39	; 57
     364:	66 2b       	or	r22, r22
     366:	2f fc       	.word	0xfc2f	; ????
     368:	2f 2b       	or	r18, r31
     36a:	ff 09       	sbc	r31, r15
     36c:	29 f6       	brne	.-118    	; 0x2f8 <__trampolines_end+0x2a4>
     36e:	20 c0       	rjmp	.+64     	; 0x3b0 <__trampolines_end+0x35c>
     370:	88 7e       	andi	r24, 0xE8	; 232
     372:	09 03       	fmul	r16, r17
     374:	20 54       	subi	r18, 0x40	; 64
     376:	54 79       	andi	r21, 0x94	; 148
     378:	41 00       	.word	0x0041	; ????
     37a:	00 44       	sbci	r16, 0x40	; 64
     37c:	7d 41       	sbci	r23, 0x1D	; 29
     37e:	30 48       	sbci	r19, 0x80	; 128
     380:	48 4a       	sbci	r20, 0xA8	; 168
     382:	32 38       	cpi	r19, 0x82	; 130
     384:	40 40       	sbci	r20, 0x00	; 0
     386:	22 7a       	andi	r18, 0xA2	; 162
     388:	00 7a       	andi	r16, 0xA0	; 160
     38a:	0a 0a       	sbc	r0, r26
     38c:	72 7d       	andi	r23, 0xD2	; 210
     38e:	0d 19       	sub	r16, r13
     390:	31 7d       	andi	r19, 0xD1	; 209
     392:	26 29       	or	r18, r6
     394:	29 2f       	mov	r18, r25
     396:	28 26       	eor	r2, r24
     398:	29 29       	or	r18, r9
     39a:	29 26       	eor	r2, r25
     39c:	30 48       	sbci	r19, 0x80	; 128
     39e:	4d 40       	sbci	r20, 0x0D	; 13
     3a0:	20 38       	cpi	r18, 0x80	; 128
     3a2:	08 08       	sbc	r0, r8
     3a4:	08 08       	sbc	r0, r8
     3a6:	08 08       	sbc	r0, r8
     3a8:	08 08       	sbc	r0, r8
     3aa:	38 2f       	mov	r19, r24
     3ac:	10 c8       	rjmp	.-4064   	; 0xfffff3ce <__eeprom_end+0xff7ef3ce>
     3ae:	ac ba       	out	0x1c, r10	; 28
     3b0:	2f 10       	cpse	r2, r15
     3b2:	28 34       	cpi	r18, 0x48	; 72
     3b4:	fa 00       	.word	0x00fa	; ????
     3b6:	00 7b       	andi	r16, 0xB0	; 176
     3b8:	00 00       	nop
     3ba:	08 14       	cp	r0, r8
     3bc:	2a 14       	cp	r2, r10
     3be:	22 22       	and	r2, r18
     3c0:	14 2a       	or	r1, r20
     3c2:	14 08       	sbc	r1, r4
     3c4:	aa 00       	.word	0x00aa	; ????
     3c6:	55 00       	.word	0x0055	; ????
     3c8:	aa aa       	std	Y+50, r10	; 0x32
     3ca:	55 aa       	std	Z+53, r5	; 0x35
     3cc:	55 aa       	std	Z+53, r5	; 0x35
     3ce:	00 00       	nop
     3d0:	00 ff       	sbrs	r16, 0
     3d2:	00 10       	cpse	r0, r0
     3d4:	10 10       	cpse	r1, r0
     3d6:	ff 00       	.word	0x00ff	; ????
     3d8:	14 14       	cp	r1, r4
     3da:	14 ff       	sbrs	r17, 4
     3dc:	00 10       	cpse	r0, r0
     3de:	10 ff       	sbrs	r17, 0
     3e0:	00 ff       	sbrs	r16, 0
     3e2:	10 10       	cpse	r1, r0
     3e4:	f0 10       	cpse	r15, r0
     3e6:	f0 14       	cp	r15, r0
     3e8:	14 14       	cp	r1, r4
     3ea:	fc 00       	.word	0x00fc	; ????
     3ec:	14 14       	cp	r1, r4
     3ee:	f7 00       	.word	0x00f7	; ????
     3f0:	ff 00       	.word	0x00ff	; ????
     3f2:	00 ff       	sbrs	r16, 0
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	14 14       	cp	r1, r4
     3f8:	f4 04       	cpc	r15, r4
     3fa:	fc 14       	cp	r15, r12
     3fc:	14 17       	cp	r17, r20
     3fe:	10 1f       	adc	r17, r16
     400:	10 10       	cpse	r1, r0
     402:	1f 10       	cpse	r1, r15
     404:	1f 14       	cp	r1, r15
     406:	14 14       	cp	r1, r4
     408:	1f 00       	.word	0x001f	; ????
     40a:	10 10       	cpse	r1, r0
     40c:	10 f0       	brcs	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	00 00       	nop
     410:	00 00       	nop
     412:	1f 10       	cpse	r1, r15
     414:	10 10       	cpse	r1, r0
     416:	10 1f       	adc	r17, r16
     418:	10 10       	cpse	r1, r0
     41a:	10 10       	cpse	r1, r0
     41c:	f0 10       	cpse	r15, r0
     41e:	00 00       	nop
     420:	00 ff       	sbrs	r16, 0
     422:	10 10       	cpse	r1, r0
     424:	10 10       	cpse	r1, r0
     426:	10 10       	cpse	r1, r0
     428:	10 10       	cpse	r1, r0
     42a:	10 ff       	sbrs	r17, 0
     42c:	10 00       	.word	0x0010	; ????
     42e:	00 00       	nop
     430:	ff 14       	cp	r15, r15
     432:	00 00       	nop
     434:	ff 00       	.word	0x00ff	; ????
     436:	ff 00       	.word	0x00ff	; ????
     438:	00 1f       	adc	r16, r16
     43a:	10 17       	cp	r17, r16
     43c:	00 00       	nop
     43e:	fc 04       	cpc	r15, r12
     440:	f4 14       	cp	r15, r4
     442:	14 17       	cp	r17, r20
     444:	10 17       	cp	r17, r16
     446:	14 14       	cp	r1, r4
     448:	f4 04       	cpc	r15, r4
     44a:	f4 00       	.word	0x00f4	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 f7       	brcc	.-64     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     450:	14 14       	cp	r1, r4
     452:	14 14       	cp	r1, r4
     454:	14 14       	cp	r1, r4
     456:	14 f7       	brge	.-60     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     458:	00 f7       	brcc	.-64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     45a:	14 14       	cp	r1, r4
     45c:	14 17       	cp	r17, r20
     45e:	14 10       	cpse	r1, r4
     460:	10 1f       	adc	r17, r16
     462:	10 1f       	adc	r17, r16
     464:	14 14       	cp	r1, r4
     466:	14 f4       	brge	.+4      	; 0x46c <__stack+0xd>
     468:	14 10       	cpse	r1, r4
     46a:	10 f0       	brcs	.+4      	; 0x470 <__stack+0x11>
     46c:	10 f0       	brcs	.+4      	; 0x472 <__stack+0x13>
     46e:	00 00       	nop
     470:	1f 10       	cpse	r1, r15
     472:	1f 00       	.word	0x001f	; ????
     474:	00 00       	nop
     476:	1f 14       	cp	r1, r15
     478:	00 00       	nop
     47a:	00 fc       	sbrc	r0, 0
     47c:	14 00       	.word	0x0014	; ????
     47e:	00 f0       	brcs	.+0      	; 0x480 <__stack+0x21>
     480:	10 f0       	brcs	.+4      	; 0x486 <__stack+0x27>
     482:	10 10       	cpse	r1, r0
     484:	ff 10       	cpse	r15, r15
     486:	ff 14       	cp	r15, r15
     488:	14 14       	cp	r1, r4
     48a:	ff 14       	cp	r15, r15
     48c:	10 10       	cpse	r1, r0
     48e:	10 1f       	adc	r17, r16
     490:	00 00       	nop
     492:	00 00       	nop
     494:	f0 10       	cpse	r15, r0
     496:	ff ff       	.word	0xffff	; ????
     498:	ff ff       	.word	0xffff	; ????
     49a:	ff f0       	brie	.+62     	; 0x4da <__stack+0x7b>
     49c:	f0 f0       	brcs	.+60     	; 0x4da <__stack+0x7b>
     49e:	f0 f0       	brcs	.+60     	; 0x4dc <__stack+0x7d>
     4a0:	ff ff       	.word	0xffff	; ????
     4a2:	ff 00       	.word	0x00ff	; ????
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	ff ff       	.word	0xffff	; ????
     4aa:	0f 0f       	add	r16, r31
     4ac:	0f 0f       	add	r16, r31
     4ae:	0f 38       	cpi	r16, 0x8F	; 143
     4b0:	44 44       	sbci	r20, 0x44	; 68
     4b2:	38 44       	sbci	r19, 0x48	; 72
     4b4:	fc 4a       	sbci	r31, 0xAC	; 172
     4b6:	4a 4a       	sbci	r20, 0xAA	; 170
     4b8:	34 7e       	andi	r19, 0xE4	; 228
     4ba:	02 02       	muls	r16, r18
     4bc:	06 06       	cpc	r0, r22
     4be:	02 7e       	andi	r16, 0xE2	; 226
     4c0:	02 7e       	andi	r16, 0xE2	; 226
     4c2:	02 63       	ori	r16, 0x32	; 50
     4c4:	55 49       	sbci	r21, 0x95	; 149
     4c6:	41 63       	ori	r20, 0x31	; 49
     4c8:	38 44       	sbci	r19, 0x48	; 72
     4ca:	44 3c       	cpi	r20, 0xC4	; 196
     4cc:	04 40       	sbci	r16, 0x04	; 4
     4ce:	7e 20       	and	r7, r14
     4d0:	1e 20       	and	r1, r14
     4d2:	06 02       	muls	r16, r22
     4d4:	7e 02       	muls	r23, r30
     4d6:	02 99       	sbic	0x00, 2	; 0
     4d8:	a5 e7       	ldi	r26, 0x75	; 117
     4da:	a5 99       	sbic	0x14, 5	; 20
     4dc:	1c 2a       	or	r1, r28
     4de:	49 2a       	or	r4, r25
     4e0:	1c 4c       	sbci	r17, 0xCC	; 204
     4e2:	72 01       	movw	r14, r4
     4e4:	72 4c       	sbci	r23, 0xC2	; 194
     4e6:	30 4a       	sbci	r19, 0xA0	; 160
     4e8:	4d 4d       	sbci	r20, 0xDD	; 221
     4ea:	30 30       	cpi	r19, 0x00	; 0
     4ec:	48 78       	andi	r20, 0x88	; 136
     4ee:	48 30       	cpi	r20, 0x08	; 8
     4f0:	bc 62       	ori	r27, 0x2C	; 44
     4f2:	5a 46       	sbci	r21, 0x6A	; 106
     4f4:	3d 3e       	cpi	r19, 0xED	; 237
     4f6:	49 49       	sbci	r20, 0x99	; 153
     4f8:	49 00       	.word	0x0049	; ????
     4fa:	7e 01       	movw	r14, r28
     4fc:	01 01       	movw	r0, r2
     4fe:	7e 2a       	or	r7, r30
     500:	2a 2a       	or	r2, r26
     502:	2a 2a       	or	r2, r26
     504:	44 44       	sbci	r20, 0x44	; 68
     506:	5f 44       	sbci	r21, 0x4F	; 79
     508:	44 40       	sbci	r20, 0x04	; 4
     50a:	51 4a       	sbci	r21, 0xA1	; 161
     50c:	44 40       	sbci	r20, 0x04	; 4
     50e:	40 44       	sbci	r20, 0x40	; 64
     510:	4a 51       	subi	r20, 0x1A	; 26
     512:	40 00       	.word	0x0040	; ????
     514:	00 ff       	sbrs	r16, 0
     516:	01 03       	mulsu	r16, r17
     518:	e0 80       	ld	r14, Z
     51a:	ff 00       	.word	0x00ff	; ????
     51c:	00 08       	sbc	r0, r0
     51e:	08 6b       	ori	r16, 0xB8	; 184
     520:	6b 08       	sbc	r6, r11
     522:	36 12       	cpse	r3, r22
     524:	36 24       	eor	r3, r6
     526:	36 06       	cpc	r3, r22
     528:	0f 09       	sbc	r16, r15
     52a:	0f 06       	cpc	r0, r31
     52c:	00 00       	nop
     52e:	18 18       	sub	r1, r8
     530:	00 00       	nop
     532:	00 10       	cpse	r0, r0
     534:	10 00       	.word	0x0010	; ????
     536:	30 40       	sbci	r19, 0x00	; 0
     538:	ff 01       	movw	r30, r30
     53a:	01 00       	.word	0x0001	; ????
     53c:	1f 01       	movw	r2, r30
     53e:	01 1e       	adc	r0, r17
     540:	00 19       	sub	r16, r0
     542:	1d 17       	cp	r17, r29
     544:	12 00       	.word	0x0012	; ????
     546:	3c 3c       	cpi	r19, 0xCC	; 204
     548:	3c 3c       	cpi	r19, 0xCC	; 204
     54a:	00 00       	nop
     54c:	00 00       	nop
	...

0000054f <logo_BMP>:
     54f:	0d 00 0e 00 0f 00 10 00 2b 00 2c 00 2d 14 2e 14     ........+.,.-...
     55f:	2f 14 30 14 31 00 32 00 33 00 49 00 4a 00 4b 14     /.0.1.2.3.I.J.K.
     56f:	4c 14 4d 14 4e 14 4f 14 50 14 51 14 52 00 68 00     L.M.N.O.P.Q.R.h.
     57f:	69 14 6a 14 6b 14 6c 14 6d 14 6e 14 6f 14 70 14     i.j.k.l.m.n.o.p.
     58f:	71 00 72 00 73 00 74 00 87 00 88 14 89 14 8a 14     q.r.s.t.........
     59f:	8b 14 8c 14 8d 00 8e 00 8f 00 90 14 91 14 92 14     ................
     5af:	93 14 94 14 95 00 96 00 97 00 a6 00 a7 14 a8 14     ................
     5bf:	a9 14 aa 14 ab 14 ac 00 ae 00 af 14 b0 14 b1 14     ................
     5cf:	b2 14 b3 14 b4 14 b5 14 b6 14 b7 14 b8 00 c6 00     ................
     5df:	c7 14 c8 14 c9 14 ca 00 cb 00 cd 00 ce 14 cf 14     ................
     5ef:	d0 14 d1 00 d2 00 d3 00 d4 14 d5 14 d6 14 d7 14     ................
     5ff:	d8 14 d9 00 e5 00 e6 14 e7 14 e8 14 e9 00 ec 00     ................
     60f:	ed 00 ee 00 ef 00 f0 00 f4 00 f5 00 f6 14 f7 14     ................
     61f:	f8 14 f9 00 05 01 06 15 07 15 08 15 09 01 16 01     ................
     62f:	17 15 18 15 19 01 25 01 26 15 27 15 28 01 36 01     ......%.&.'.(.6.
     63f:	37 15 38 01 44 01 45 15 46 15 47 15 48 01 57 01     7.8.D.E.F.G.H.W.
     64f:	64 01 65 15 66 15 67 15 68 01 85 01 86 15 87 01     d.e.f.g.h.......
     65f:	8f 01 90 01 91 01 92 01 93 01 94 01 95 01 96 01     ................
     66f:	97 01 98 01 99 01 9a 01 9b 01 9c 01 a1 01 a2 01     ................
     67f:	a5 01 a6 15 a7 01 ac 01 ad 01 af 01 b0 0d b1 0d     ................
     68f:	b2 0d b3 0d b4 0d b5 0d b6 0d b7 0d b8 0d b9 0d     ................
     69f:	ba 0d bb 01 bc 11 bd 01 c0 01 c1 05 c2 05 c3 01     ................
     6af:	c5 01 c6 15 c7 01 cb 01 cc 05 cd 05 ce 01 cf 01     ................
     6bf:	d0 0d d1 0d d2 0d d3 0d d4 0d d5 0d d6 0d d7 0d     ................
     6cf:	d8 0d d9 0d da 0d db 01 dc 11 dd 01 e0 01 e1 05     ................
     6df:	e2 05 e3 01 e6 01 eb 01 ec 05 ed 05 ee 01 ef 09     ................
     6ef:	f0 01 f1 0d f2 0d f3 0d f4 0d f5 0d f6 0d f7 0d     ................
     6ff:	f8 0d f9 0d fa 0d fb 01 fc 11 fd 01 00 02 01 02     ................
     70f:	02 06 03 06 04 02 0a 02 0b 06 0c 06 0d 02 0e 02     ................
     71f:	0f 0a 10 02 11 02 12 02 13 02 14 0e 15 0e 16 0e     ................
     72f:	17 02 18 02 19 02 1a 02 1b 02 1c 12 1d 02 21 02     ..............!.
     73f:	22 06 23 06 24 02 2a 02 2b 06 2c 06 2d 02 2e 0a     ".#.$.*.+.,.-...
     74f:	2f 02 30 02 33 02 34 0e 35 0e 36 0e 37 02 38 12     /.0.3.4.5.6.7.8.
     75f:	39 12 3a 12 3b 12 3c 12 3d 02 41 02 42 02 43 06     9.:.;.<.=.A.B.C.
     76f:	44 06 45 02 49 02 4a 06 4b 06 4c 02 4d 02 4e 0a     D.E.I.J.K.L.M.N.
     77f:	4f 02 53 02 54 0e 55 0e 56 0e 57 02 58 12 59 02     O.S.T.U.V.W.X.Y.
     78f:	5a 02 5b 02 5c 02 62 02 63 06 64 06 65 02 69 02     Z.[.\.b.c.d.e.i.
     79f:	6a 06 6b 06 6c 02 6d 0a 6e 02 6f 02 73 02 74 0e     j.k.l.m.n.o.s.t.
     7af:	75 0e 76 0e 77 02 78 12 79 02 82 02 83 02 84 06     u.v.w.x.y.......
     7bf:	85 06 86 02 88 02 89 06 8a 06 8b 02 8c 02 8d 0a     ................
     7cf:	8e 02 93 02 94 0e 95 0e 96 0e 97 02 98 12 99 02     ................
     7df:	a3 02 a4 06 a5 06 a6 02 a8 02 a9 06 aa 06 ab 02     ................
     7ef:	ac 0a ad 02 ae 02 b3 02 b4 0e b5 0e b6 0e b7 02     ................
     7ff:	b8 12 b9 02 c3 02 c4 02 c5 06 c6 06 c7 02 c8 06     ................
     80f:	c9 06 ca 02 cb 02 cc 0a cd 02 d3 02 d4 0e d5 0e     ................
     81f:	d6 0e d7 02 d8 12 d9 02 e4 02 e5 06 e6 06 e7 06     ................
     82f:	e8 06 e9 06 ea 02 eb 0a ec 02 ed 02 ef 02 f0 02     ................
     83f:	f1 02 f2 02 f3 02 f4 0e f5 0e f6 0e f7 02 f8 02     ................
     84f:	f9 02 fa 02 fb 02 fc 02 04 03 05 03 06 07 07 07     ................
     85f:	08 07 09 03 0a 03 0b 0b 0c 03 0f 03 10 0f 11 0f     ................
     86f:	12 0f 13 0f 14 0f 15 0f 16 0f 17 0f 18 0f 19 0f     ................
     87f:	1a 0f 1b 03 1c 13 1d 03 25 03 26 07 27 07 28 07     ........%.&.'.(.
     88f:	29 03 2a 0b 2b 03 2c 03 2f 03 30 0f 31 0f 32 0f     ).*.+.,./.0.1.2.
     89f:	33 0f 34 0f 35 0f 36 0f 37 0f 38 0f 39 0f 3a 0f     3.4.5.6.7.8.9.:.
     8af:	3b 03 3c 13 3d 03 45 03 46 03 47 07 48 03 49 03     ;.<.=.E.F.G.H.I.
     8bf:	4a 0b 4b 03 4f 03 50 0f 51 0f 52 0f 53 0f 54 0f     J.K.O.P.Q.R.S.T.
     8cf:	55 0f 56 0f 57 0f 58 0f 59 0f 5a 0f 5b 03 5c 13     U.V.W.X.Y.Z.[.\.
     8df:	5d 03 66 03 67 07 68 03 69 0b 6a 03 6b 03 6f 03     ].f.g.h.i.j.k.o.
     8ef:	70 03 71 03 72 03 73 03 74 03 75 03 76 03 77 03     p.q.r.s.t.u.v.w.
     8ff:	78 03 79 03 7a 03 7b 03 7c 13 7d 03 86 03 87 03     x.y.z.{.|.}.....
     90f:	88 03 89 0b 8a 03 8f 03 90 13 91 13 92 13 93 13     ................
     91f:	94 13 95 13 96 13 97 13 98 13 99 13 9a 13 9b 13     ................
     92f:	9c 03 9d 03 a7 03 a8 03 a9 03 b0 03 b1 03 b2 03     ................
     93f:	b3 03 b4 03 b5 03 b6 03 b7 03 b8 03 b9 03 ba 03     ................
     94f:	bb 03 bc 03 00                                      .....

00000954 <__ctors_end>:
     954:	11 24       	eor	r1, r1
     956:	1f be       	out	0x3f, r1	; 63
     958:	cf e5       	ldi	r28, 0x5F	; 95
     95a:	d4 e0       	ldi	r29, 0x04	; 4
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	cd bf       	out	0x3d, r28	; 61

00000960 <__do_copy_data>:
     960:	11 e0       	ldi	r17, 0x01	; 1
     962:	a0 e6       	ldi	r26, 0x60	; 96
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	ec e6       	ldi	r30, 0x6C	; 108
     968:	f7 e1       	ldi	r31, 0x17	; 23
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__do_copy_data+0x10>
     96c:	05 90       	lpm	r0, Z+
     96e:	0d 92       	st	X+, r0
     970:	ac 3f       	cpi	r26, 0xFC	; 252
     972:	b1 07       	cpc	r27, r17
     974:	d9 f7       	brne	.-10     	; 0x96c <__do_copy_data+0xc>

00000976 <__do_clear_bss>:
     976:	22 e0       	ldi	r18, 0x02	; 2
     978:	ac ef       	ldi	r26, 0xFC	; 252
     97a:	b1 e0       	ldi	r27, 0x01	; 1
     97c:	01 c0       	rjmp	.+2      	; 0x980 <.do_clear_bss_start>

0000097e <.do_clear_bss_loop>:
     97e:	1d 92       	st	X+, r1

00000980 <.do_clear_bss_start>:
     980:	ac 3d       	cpi	r26, 0xDC	; 220
     982:	b2 07       	cpc	r27, r18
     984:	e1 f7       	brne	.-8      	; 0x97e <.do_clear_bss_loop>
     986:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <main>
     98a:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <_exit>

0000098e <__bad_interrupt>:
     98e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000992 <APP_generate_menu_loading>:
{
	
}

void APP_generate_menu_loading()
{
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
	Color screenColor = GREY;
		
	/* Set Logo Pivot Coordinates and Text Parameters */
	uint16_t x = TFTWIDTH / 2 - LOGOSIZE * (text_size + 2) / 2 + logo_xoff;
	uint16_t y = TFTHEIGHT / 2 - LOGOSIZE * (text_size + 2) / 2 + logo_yoff;
	LCD_setText_all(x + text_xoff, y + LOGOSIZE * (text_size + 2) + text_yoff, text_size, text_color, screenColor);
     996:	08 e6       	ldi	r16, 0x68	; 104
     998:	1a e4       	ldi	r17, 0x4A	; 74
     99a:	20 ee       	ldi	r18, 0xE0	; 224
     99c:	37 e0       	ldi	r19, 0x07	; 7
     99e:	42 e0       	ldi	r20, 0x02	; 2
     9a0:	60 ea       	ldi	r22, 0xA0	; 160
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	8d e5       	ldi	r24, 0x5D	; 93
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_setText_all>
		
	/* Draw Loading Screen */
	LCD_clear(screenColor);
     9ac:	88 e6       	ldi	r24, 0x68	; 104
     9ae:	9a e4       	ldi	r25, 0x4A	; 74
     9b0:	0e 94 18 0a 	call	0x1430	; 0x1430 <LCD_clear>
	LCD_drawLogo(x,y,text_size + 2);
     9b4:	44 e0       	ldi	r20, 0x04	; 4
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	6e e1       	ldi	r22, 0x1E	; 30
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	84 e6       	ldi	r24, 0x64	; 100
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_drawLogo>
	LCD_print_str("Power Couple");
     9c4:	8b e6       	ldi	r24, 0x6B	; 107
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_setText_size(text_size - 1);
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCD_setText_size>
	LCD_print_str("TM");
     9d2:	88 e7       	ldi	r24, 0x78	; 120
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	//LCD_drawRect_empty(0,0,TFTWIDTH,TFTHEIGHT,RED);
	//LCD_drawRect_empty(1,1,TFTWIDTH-2,TFTHEIGHT-2,WHITE);
	//LCD_drawRect_empty(2,2,TFTWIDTH-4,TFTHEIGHT-4,RED);
}
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <APP_generate_menu_debug>:

void APP_generate_menu_debug()
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
	Color identifier_color = GREEN;
	uint16_t text_size = 2;
	uint16_t text_yoff = 40;
	Color text_color = ORANGE;
	
	LCD_setText_all(identifier_xoff, identifier_yoff, identifier_size,identifier_color,screenColor);
     9e4:	00 e0       	ldi	r16, 0x00	; 0
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	20 ee       	ldi	r18, 0xE0	; 224
     9ea:	37 e0       	ldi	r19, 0x07	; 7
     9ec:	43 e0       	ldi	r20, 0x03	; 3
     9ee:	6a e0       	ldi	r22, 0x0A	; 10
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8a e0       	ldi	r24, 0x0A	; 10
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_setText_all>
	LCD_clear(screenColor);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 18 0a 	call	0x1430	; 0x1430 <LCD_clear>
	
	
	LCD_drawRect_empty(identifier_xoff - 2, identifier_yoff - 2, strlen("DEBUG") * 6 * identifier_size + 4, 8 * identifier_size + 4, identifier_color);
     a02:	00 ee       	ldi	r16, 0xE0	; 224
     a04:	17 e0       	ldi	r17, 0x07	; 7
     a06:	2c e1       	ldi	r18, 0x1C	; 28
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	4e e5       	ldi	r20, 0x5E	; 94
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	68 e0       	ldi	r22, 0x08	; 8
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	88 e0       	ldi	r24, 0x08	; 8
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_drawRect_empty>
	LCD_print_str("DEBUG\n\n");
     a1a:	8b e7       	ldi	r24, 0x7B	; 123
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	
	LCD_setText_all(identifier_xoff, identifier_yoff + text_yoff, text_size, text_color, screenColor);
     a22:	00 e0       	ldi	r16, 0x00	; 0
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	20 e2       	ldi	r18, 0x20	; 32
     a28:	3d ef       	ldi	r19, 0xFD	; 253
     a2a:	42 e0       	ldi	r20, 0x02	; 2
     a2c:	62 e3       	ldi	r22, 0x32	; 50
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_setText_all>
	LCD_print_str("Time (UTC) :\n");
     a38:	83 e8       	ldi	r24, 0x83	; 131
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Date       :\n");
     a40:	81 e9       	ldi	r24, 0x91	; 145
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Data Status:\n");
     a48:	8f e9       	ldi	r24, 0x9F	; 159
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Latitude   :\n");
     a50:	8d ea       	ldi	r24, 0xAD	; 173
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Longitude  :\n");
     a58:	8b eb       	ldi	r24, 0xBB	; 187
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("N/S        :\n");
     a60:	89 ec       	ldi	r24, 0xC9	; 201
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("E/W        :\n");
     a68:	87 ed       	ldi	r24, 0xD7	; 215
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Speed      :\n");
     a70:	85 ee       	ldi	r24, 0xE5	; 229
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	LCD_print_str("Course     :\n");
     a78:	83 ef       	ldi	r24, 0xF3	; 243
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	
	
	

}
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <APP_generate_menu>:
////////////////////////////////////////////////////////////////////////////////////////////////////

Bool APP_generate_menu(MenuType menu)
{
	///* Generate 'menu' and return generation status*/
	switch(menu){
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	18 f4       	brcc	.+6      	; 0xa90 <APP_generate_menu+0xa>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	28 f0       	brcs	.+10     	; 0xa98 <APP_generate_menu+0x12>
     a8e:	0c c0       	rjmp	.+24     	; 0xaa8 <APP_generate_menu+0x22>
     a90:	83 30       	cpi	r24, 0x03	; 3
     a92:	31 f0       	breq	.+12     	; 0xaa0 <APP_generate_menu+0x1a>
		
		case DEBUGMENU:
		APP_generate_menu_debug();
		return TRUE;
	}
	return FALSE;
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	08 95       	ret
Bool APP_generate_menu(MenuType menu)
{
	///* Generate 'menu' and return generation status*/
	switch(menu){
		case LOADINGMENU:
		APP_generate_menu_loading();
     a98:	0e 94 c9 04 	call	0x992	; 0x992 <APP_generate_menu_loading>
		return TRUE;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	08 95       	ret
		
		case SETTINGSMENU:
		return TRUE;
		
		case DEBUGMENU:
		APP_generate_menu_debug();
     aa0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <APP_generate_menu_debug>
		return TRUE;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	08 95       	ret
		case LOADINGMENU:
		APP_generate_menu_loading();
		return TRUE;
		
		case MAINMENU:
		return TRUE;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
		case DEBUGMENU:
		APP_generate_menu_debug();
		return TRUE;
	}
	return FALSE;
}
     aaa:	08 95       	ret

00000aac <init_buzzer>:
////////////////////////////////////////////////////////////////////////////////////////////////////
//											Functions											  //
////////////////////////////////////////////////////////////////////////////////////////////////////
void init_buzzer(){	
	// Initialize Buzzer
	DDRD |= (1 << BUZZER_PIN);			// Set buzzer pin (PD4) direction
     aac:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1 << BUZZER_PIN);		// Clear buzzer output
     aae:	94 98       	cbi	0x12, 4	; 18
	TCCR1B = (1 << WGM12)|(1 << CS11);	// Enable "CTC" mode and set prescaler = 64	 	
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	8e bd       	out	0x2e, r24	; 46
     ab4:	08 95       	ret

00000ab6 <EEPROM_enable>:
	
	//Enable writes to EEPROM:
	EECR |= (1 << EEMWE);
	
	//Trigger the write-enable strobe:
	EECR |= (1 << EEWE);
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	8c bb       	out	0x1c, r24	; 28
     aba:	1f ba       	out	0x1f, r1	; 31
     abc:	1e ba       	out	0x1e, r1	; 30
     abe:	08 95       	ret

00000ac0 <EEPROM_read>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t EEPROM_read(uint16_t address){
	
	//Wait for previous write-enable strobe to null out:
	while(EECR & (1 << EEWE));
     ac0:	e1 99       	sbic	0x1c, 1	; 28
     ac2:	fe cf       	rjmp	.-4      	; 0xac0 <EEPROM_read>
	
	//Load the address:
	EEARH = (address >> 8);
     ac4:	9f bb       	out	0x1f, r25	; 31
	EEARL = (address) & 0xFF;
     ac6:	8e bb       	out	0x1e, r24	; 30
	
	//Read in the data by strobing:
	EECR |= (1 << EERE);
     ac8:	e0 9a       	sbi	0x1c, 0	; 28
	
	//Return the contents of the data register:
	return EEDR;
     aca:	8d b3       	in	r24, 0x1d	; 29
}
     acc:	08 95       	ret

00000ace <EEPROM_recovery>:
void EEPROM_recovery(void){
	
	//Clear out erroneous data from powerdown:

	//Fetch all of the data stored in the EEPROM space, and return it to its space in memory:
	NV_SYSTEM_STATUS_0 = EEPROM_read(EEPROM_SYSTEM_STATUS_0);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 60 05 	call	0xac0	; 0xac0 <EEPROM_read>
     ad6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <NV_SYSTEM_STATUS_0>
	NV_SYSTEM_STATUS_1 = EEPROM_read(EEPROM_SYSTEM_STATUS_1);
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 60 05 	call	0xac0	; 0xac0 <EEPROM_read>
     ae2:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <NV_SYSTEM_STATUS_1>
	NV_USER_PREFERENCES_0 = EEPROM_read(EEPROM_USER_PREF_0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 60 05 	call	0xac0	; 0xac0 <EEPROM_read>
     aee:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <NV_USER_PREFERENCES_0>
	NV_USER_PREFERENCES_1 = EEPROM_read(EEPROM_USER_PREF_1);
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 60 05 	call	0xac0	; 0xac0 <EEPROM_read>
     afa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <NV_USER_PREFERENCES_1>
     afe:	08 95       	ret

00000b00 <GPS_init_USART>:
	
*/
void GPS_disable_stream(void){
	
	//Clear receiver-interrupt enable bit, while maintaining register contents:
	UCSRB = UCSRB & (!(1 << RXCIE));
     b00:	90 bd       	out	0x20, r25	; 32
     b02:	89 b9       	out	0x09, r24	; 9
     b04:	88 e1       	ldi	r24, 0x18	; 24
     b06:	8a b9       	out	0x0a, r24	; 10
     b08:	8e e8       	ldi	r24, 0x8E	; 142
     b0a:	80 bd       	out	0x20, r24	; 32
     b0c:	08 95       	ret

00000b0e <GPS_USART_Transmit>:
     b0e:	5d 9b       	sbis	0x0b, 5	; 11
     b10:	fe cf       	rjmp	.-4      	; 0xb0e <GPS_USART_Transmit>
     b12:	8c b9       	out	0x0c, r24	; 12
     b14:	08 95       	ret

00000b16 <GPS_configure_firmware>:
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	c5 e5       	ldi	r28, 0x55	; 85
     b20:	d1 e0       	ldi	r29, 0x01	; 1
     b22:	08 e8       	ldi	r16, 0x88	; 136
     b24:	11 e0       	ldi	r17, 0x01	; 1
     b26:	89 91       	ld	r24, Y+
     b28:	0e 94 87 05 	call	0xb0e	; 0xb0e <GPS_USART_Transmit>
     b2c:	0c 17       	cp	r16, r28
     b2e:	1d 07       	cpc	r17, r29
     b30:	d1 f7       	brne	.-12     	; 0xb26 <GPS_configure_firmware+0x10>
     b32:	c4 e4       	ldi	r28, 0x44	; 68
     b34:	d1 e0       	ldi	r29, 0x01	; 1
     b36:	05 e5       	ldi	r16, 0x55	; 85
     b38:	11 e0       	ldi	r17, 0x01	; 1
     b3a:	89 91       	ld	r24, Y+
     b3c:	0e 94 87 05 	call	0xb0e	; 0xb0e <GPS_USART_Transmit>
     b40:	0c 17       	cp	r16, r28
     b42:	1d 07       	cpc	r17, r29
     b44:	d1 f7       	brne	.-12     	; 0xb3a <GPS_configure_firmware+0x24>
     b46:	cb e2       	ldi	r28, 0x2B	; 43
     b48:	d1 e0       	ldi	r29, 0x01	; 1
     b4a:	04 e4       	ldi	r16, 0x44	; 68
     b4c:	11 e0       	ldi	r17, 0x01	; 1
     b4e:	89 91       	ld	r24, Y+
     b50:	0e 94 87 05 	call	0xb0e	; 0xb0e <GPS_USART_Transmit>
     b54:	0c 17       	cp	r16, r28
     b56:	1d 07       	cpc	r17, r29
     b58:	d1 f7       	brne	.-12     	; 0xb4e <GPS_configure_firmware+0x38>
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <GPS_send_byte>:
	
*/
void GPS_send_byte(char data){
	
	//Wait for the system to be ready to transmit more data:
	while(!(UCSRA & (1 << UDRE)));
     b64:	5d 9b       	sbis	0x0b, 5	; 11
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <GPS_send_byte>
	
	//Load byte into the transmitter:
	UDR = data;
     b68:	8c b9       	out	0x0c, r24	; 12
     b6a:	08 95       	ret

00000b6c <GPS_receive_byte>:
	
*/
char GPS_receive_byte(void){
	
	//Check to see if data has been received:
	while(!(UCSRA & (1 << RXC)));
     b6c:	5f 9b       	sbis	0x0b, 7	; 11
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <GPS_receive_byte>
	
	//Return the data to where it is desired:
	return UDR;
     b70:	8c b1       	in	r24, 0x0c	; 12
	
}
     b72:	08 95       	ret

00000b74 <GPS_flush_buffer>:
	
	DESCRIPTION:	Systematically clears out the data contained in the USART receive buffer, 
					then sets the value of the head pointer to 0;
	
*/
void GPS_flush_buffer(void){
     b74:	e2 e0       	ldi	r30, 0x02	; 2
     b76:	f2 e0       	ldi	r31, 0x02	; 2
     b78:	8a e7       	ldi	r24, 0x7A	; 122
     b7a:	92 e0       	ldi	r25, 0x02	; 2
	
	//Clear out data
	for(int i = 0; i < 120; i++){
		GPS_BUFFER[i] = 0;
     b7c:	11 92       	st	Z+, r1
	
*/
void GPS_flush_buffer(void){
	
	//Clear out data
	for(int i = 0; i < 120; i++){
     b7e:	e8 17       	cp	r30, r24
     b80:	f9 07       	cpc	r31, r25
     b82:	e1 f7       	brne	.-8      	; 0xb7c <GPS_flush_buffer+0x8>
		GPS_BUFFER[i] = 0;
	}
	
	//Set pointer to zero:
	GPS_BUFFER_INDEX = 0;				//Buffer is at start position.
     b84:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <GPS_BUFFER_INDEX>
	
	//Clear the pre-parsing flag:
	GPS_MESSAGE_READY = 0;				//Buffer is closed off.
     b88:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
     b8c:	08 95       	ret

00000b8e <GPS_enable_stream>:
	
*/
void GPS_enable_stream(void){
	
	//Flush the buffer each time, such that there is a fresh start:
	GPS_flush_buffer();
     b8e:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPS_flush_buffer>
	
	//Also make sure that the parsing flag is reset as well to prevent erroneous behavior:
	GPS_MESSAGE_READY = 0;
     b92:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	
	//Set receiver-interrupt enable bit, while maintaining register contents:
	UCSRB |= (1 << RXCIE);
     b96:	57 9a       	sbi	0x0a, 7	; 10
     b98:	08 95       	ret

00000b9a <GPS_TX_PARSE_ERROR>:
	//?. Enable stream, thereby flushing the buffer of all its contents.
	GPS_enable_stream();
	
};
////////////////////////////////////////////////////////////////////////////////////////////////////
void GPS_TX_PARSE_ERROR(void){
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cc e1       	ldi	r28, 0x1C	; 28
     ba4:	d1 e0       	ldi	r29, 0x01	; 1
     ba6:	0b e2       	ldi	r16, 0x2B	; 43
     ba8:	11 e0       	ldi	r17, 0x01	; 1
	//To get here, the invalid data character was detected.
	
	//Send a transmission containing the UTC time, as well as
	//a generic NO FIX message:
	for(uint8_t i = 0; i < 15; i++){
		GPS_send_byte(MSG_DATA_ERROR[i]);
     baa:	89 91       	ld	r24, Y+
     bac:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
void GPS_TX_PARSE_ERROR(void){
	//To get here, the invalid data character was detected.
	
	//Send a transmission containing the UTC time, as well as
	//a generic NO FIX message:
	for(uint8_t i = 0; i < 15; i++){
     bb0:	c0 17       	cp	r28, r16
     bb2:	d1 07       	cpc	r29, r17
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <GPS_TX_PARSE_ERROR+0x10>
		GPS_send_byte(MSG_DATA_ERROR[i]);
	}
	
	//Send carriage return and linefeed:
	GPS_send_byte('\r');
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
     bb8:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte('\n');
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
     bc2:	c5 e1       	ldi	r28, 0x15	; 21
     bc4:	d1 e0       	ldi	r29, 0x01	; 1
     bc6:	0c e1       	ldi	r16, 0x1C	; 28
     bc8:	11 e0       	ldi	r17, 0x01	; 1
	
	//Send the UTC time and date:
	for(uint8_t i = 0; i < 7; i++){
		GPS_send_byte(MSG_REPORT_UTC[i]);
     bca:	89 91       	ld	r24, Y+
     bcc:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	//Send carriage return and linefeed:
	GPS_send_byte('\r');
	GPS_send_byte('\n');
	
	//Send the UTC time and date:
	for(uint8_t i = 0; i < 7; i++){
     bd0:	c0 17       	cp	r28, r16
     bd2:	d1 07       	cpc	r29, r17
     bd4:	d1 f7       	brne	.-12     	; 0xbca <GPS_TX_PARSE_ERROR+0x30>
		GPS_send_byte(MSG_REPORT_UTC[i]);
	}
	GPS_send_byte(SYS_GPS.UTC_H);
     bd6:	cf e7       	ldi	r28, 0x7F	; 127
     bd8:	d2 e0       	ldi	r29, 0x02	; 2
     bda:	8e 81       	ldd	r24, Y+6	; 0x06
     bdc:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte('.');
     be0:	8e e2       	ldi	r24, 0x2E	; 46
     be2:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte(SYS_GPS.UTC_M);
     be6:	8f 81       	ldd	r24, Y+7	; 0x07
     be8:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte('.');
     bec:	8e e2       	ldi	r24, 0x2E	; 46
     bee:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte(SYS_GPS.UTC_S);
     bf2:	88 85       	ldd	r24, Y+8	; 0x08
     bf4:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte('\r');
     bf8:	8d e0       	ldi	r24, 0x0D	; 13
     bfa:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	GPS_send_byte('\n');
     bfe:	8a e0       	ldi	r24, 0x0A	; 10
     c00:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>

     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <GPS_parse_data>:
					byte through the linear buffer to extract the relevant NMEA output sentences.
					After the completion of this parsing, the receiver will be enabled again, which
					will clear the buffer and its reception flag, and the cycle will repeat.
			
*/
void GPS_parse_data(void){
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
	
	//1. Shut down the stream.
	//GPS_disable_stream();
	
	//2. Reset the MESSAGE_RECEIVED flag
	GPS_MESSAGE_READY = 0;
     c16:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	
	//3. Look for the sentence type, and confirm RMC:
	//	-The first character should be '$'
	//	-Therefore, GPS_BUFFER[1] is the first sentence-indicating character.
	if( (GPS_BUFFER[1] == 'G')&&
     c1a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <GPS_BUFFER+0x1>
     c1e:	87 34       	cpi	r24, 0x47	; 71
     c20:	21 f4       	brne	.+8      	; 0xc2a <GPS_parse_data+0x1c>
     c22:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <GPS_BUFFER+0x2>
     c26:	80 35       	cpi	r24, 0x50	; 80
     c28:	29 f0       	breq	.+10     	; 0xc34 <GPS_parse_data+0x26>
     c2a:	c1 e0       	ldi	r28, 0x01	; 1
     c2c:	d1 e0       	ldi	r29, 0x01	; 1
     c2e:	05 e1       	ldi	r16, 0x15	; 21
     c30:	11 e0       	ldi	r17, 0x01	; 1
     c32:	0d c0       	rjmp	.+26     	; 0xc4e <GPS_parse_data+0x40>
		(GPS_BUFFER[2] == 'P')&&
     c34:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <GPS_BUFFER+0x3>
     c38:	82 35       	cpi	r24, 0x52	; 82
     c3a:	b9 f7       	brne	.-18     	; 0xc2a <GPS_parse_data+0x1c>
		(GPS_BUFFER[3] == 'R')&&
     c3c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <GPS_BUFFER+0x4>
     c40:	8d 34       	cpi	r24, 0x4D	; 77
     c42:	99 f7       	brne	.-26     	; 0xc2a <GPS_parse_data+0x1c>
		(GPS_BUFFER[4] == 'M')&&
     c44:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <GPS_BUFFER+0x5>
     c48:	83 34       	cpi	r24, 0x43	; 67
     c4a:	79 f7       	brne	.-34     	; 0xc2a <GPS_parse_data+0x1c>
     c4c:	0c c0       	rjmp	.+24     	; 0xc66 <GPS_parse_data+0x58>
			//Continue normally!
		}
	else{
		//When the GPRMC is not detected, we need to let the serial monitor know.
		for(int i = 0; i < 20; i++){
			GPS_send_byte(MSG_GPRMC_NOT_RECEIVED[i]);
     c4e:	89 91       	ld	r24, Y+
     c50:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
		(GPS_BUFFER[5] == 'C')	){
			//Continue normally!
		}
	else{
		//When the GPRMC is not detected, we need to let the serial monitor know.
		for(int i = 0; i < 20; i++){
     c54:	0c 17       	cp	r16, r28
     c56:	1d 07       	cpc	r17, r29
     c58:	d1 f7       	brne	.-12     	; 0xc4e <GPS_parse_data+0x40>
			GPS_send_byte(MSG_GPRMC_NOT_RECEIVED[i]);
		}
		GPS_send_byte('\r');
     c5a:	8d e0       	ldi	r24, 0x0D	; 13
     c5c:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
		GPS_send_byte('\n');
     c60:	8a e0       	ldi	r24, 0x0A	; 10
     c62:	0e 94 b2 05 	call	0xb64	; 0xb64 <GPS_send_byte>
	}
	
	//4. Unpack all of the data between '$' and '*'. Store it on the SYS_GPS object.
		//A. UTC data:
		SYS_GPS.UTC_H = (GPS_BUFFER[RMC_UTC] * 10)		+ (GPS_BUFFER[RMC_UTC + 1]);	
     c66:	af e7       	ldi	r26, 0x7F	; 127
     c68:	b2 e0       	ldi	r27, 0x02	; 2
     c6a:	e2 e0       	ldi	r30, 0x02	; 2
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	87 81       	ldd	r24, Z+7	; 0x07
     c70:	88 0f       	add	r24, r24
     c72:	98 2f       	mov	r25, r24
     c74:	99 0f       	add	r25, r25
     c76:	99 0f       	add	r25, r25
     c78:	89 0f       	add	r24, r25
     c7a:	90 85       	ldd	r25, Z+8	; 0x08
     c7c:	89 0f       	add	r24, r25
     c7e:	16 96       	adiw	r26, 0x06	; 6
     c80:	8c 93       	st	X, r24
     c82:	16 97       	sbiw	r26, 0x06	; 6
		SYS_GPS.UTC_M = ((GPS_BUFFER[RMC_UTC + 2] * 10) + (GPS_BUFFER[RMC_UTC + 3])); 
     c84:	81 85       	ldd	r24, Z+9	; 0x09
     c86:	88 0f       	add	r24, r24
     c88:	98 2f       	mov	r25, r24
     c8a:	99 0f       	add	r25, r25
     c8c:	99 0f       	add	r25, r25
     c8e:	89 0f       	add	r24, r25
     c90:	92 85       	ldd	r25, Z+10	; 0x0a
     c92:	89 0f       	add	r24, r25
     c94:	17 96       	adiw	r26, 0x07	; 7
     c96:	8c 93       	st	X, r24
     c98:	17 97       	sbiw	r26, 0x07	; 7
		SYS_GPS.UTC_S = ((GPS_BUFFER[RMC_UTC + 4] * 10) + (GPS_BUFFER[RMC_UTC + 5]));
     c9a:	83 85       	ldd	r24, Z+11	; 0x0b
     c9c:	88 0f       	add	r24, r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	99 0f       	add	r25, r25
     ca2:	99 0f       	add	r25, r25
     ca4:	89 0f       	add	r24, r25
     ca6:	94 85       	ldd	r25, Z+12	; 0x0c
     ca8:	89 0f       	add	r24, r25
     caa:	18 96       	adiw	r26, 0x08	; 8
     cac:	8c 93       	st	X, r24
     cae:	18 97       	sbiw	r26, 0x08	; 8
		//B. STATUS:
		SYS_GPS.STATUS = GPS_BUFFER[RMC_STATUS];
     cb0:	82 89       	ldd	r24, Z+18	; 0x12
     cb2:	52 96       	adiw	r26, 0x12	; 18
     cb4:	8c 93       	st	X, r24
// LOGICAL CHECK:
// If the data received is NOT valid, then the program will skip over the rest of the parse, and send out a
// "no fix" message:
if (SYS_GPS.STATUS == 'V'){
     cb6:	86 35       	cpi	r24, 0x56	; 86
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <GPS_parse_data+0xb6>
	//Send the error message containing the UTC data:
	GPS_TX_PARSE_ERROR();
     cba:	0e 94 cd 05 	call	0xb9a	; 0xb9a <GPS_TX_PARSE_ERROR>
	GPS_enable_stream();
     cbe:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPS_enable_stream>
	return;	
     cc2:	37 c1       	rjmp	.+622    	; 0xf32 <GPS_parse_data+0x324>
     cc4:	e6 e1       	ldi	r30, 0x16	; 22
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	a2 e9       	ldi	r26, 0x92	; 146
     cca:	b2 e0       	ldi	r27, 0x02	; 2
     ccc:	2f e1       	ldi	r18, 0x1F	; 31
     cce:	32 e0       	ldi	r19, 0x02	; 2
}
		//C. LATITUDE:
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LATITUDE; i++){
			SYS_GPS.LATITUDE_ASCII[i] = GPS_BUFFER[RMC_LAT + i];
     cd0:	81 91       	ld	r24, Z+
     cd2:	8d 93       	st	X+, r24
	GPS_enable_stream();
	return;	
}
		//C. LATITUDE:
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LATITUDE; i++){
     cd4:	e2 17       	cp	r30, r18
     cd6:	f3 07       	cpc	r31, r19
     cd8:	d9 f7       	brne	.-10     	; 0xcd0 <GPS_parse_data+0xc2>
			SYS_GPS.LATITUDE_ASCII[i] = GPS_BUFFER[RMC_LAT + i];
		}
		//Compress to decimal:
		SYS_GPS.latitude_H =	(	(GPS_BUFFER[RMC_LAT]		* 1000)		+ 
     cda:	af e7       	ldi	r26, 0x7F	; 127
     cdc:	b2 e0       	ldi	r27, 0x02	; 2
     cde:	e2 e0       	ldi	r30, 0x02	; 2
     ce0:	f2 e0       	ldi	r31, 0x02	; 2
     ce2:	24 89       	ldd	r18, Z+20	; 0x14
     ce4:	48 ee       	ldi	r20, 0xE8	; 232
     ce6:	53 e0       	ldi	r21, 0x03	; 3
     ce8:	24 9f       	mul	r18, r20
     cea:	c0 01       	movw	r24, r0
     cec:	25 9f       	mul	r18, r21
     cee:	90 0d       	add	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	25 89       	ldd	r18, Z+21	; 0x15
     cf4:	c4 e6       	ldi	r28, 0x64	; 100
     cf6:	bc 01       	movw	r22, r24
     cf8:	c2 9f       	mul	r28, r18
     cfa:	60 0d       	add	r22, r0
     cfc:	71 1d       	adc	r23, r1
     cfe:	11 24       	eor	r1, r1
     d00:	96 89       	ldd	r25, Z+22	; 0x16
     d02:	89 2f       	mov	r24, r25
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8c 01       	movw	r16, r24
     d08:	00 0f       	add	r16, r16
     d0a:	11 1f       	adc	r17, r17
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	c8 01       	movw	r24, r16
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	86 0f       	add	r24, r22
     d22:	97 1f       	adc	r25, r23
     d24:	27 89       	ldd	r18, Z+23	; 0x17
     d26:	82 0f       	add	r24, r18
     d28:	91 1d       	adc	r25, r1
     d2a:	5d 96       	adiw	r26, 0x1d	; 29
     d2c:	9c 93       	st	X, r25
     d2e:	8e 93       	st	-X, r24
     d30:	5c 97       	sbiw	r26, 0x1c	; 28
									(GPS_BUFFER[RMC_LAT + 1]	* 100)		+
									(GPS_BUFFER[RMC_LAT + 2]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 3]));
		SYS_GPS.latitude_L =	(	(GPS_BUFFER[RMC_LAT + 5]	* 1000)		+
     d32:	21 8d       	ldd	r18, Z+25	; 0x19
     d34:	24 9f       	mul	r18, r20
     d36:	c0 01       	movw	r24, r0
     d38:	25 9f       	mul	r18, r21
     d3a:	90 0d       	add	r25, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	22 8d       	ldd	r18, Z+26	; 0x1a
     d40:	ac 01       	movw	r20, r24
     d42:	c2 9f       	mul	r28, r18
     d44:	40 0d       	add	r20, r0
     d46:	51 1d       	adc	r21, r1
     d48:	11 24       	eor	r1, r1
     d4a:	93 8d       	ldd	r25, Z+27	; 0x1b
     d4c:	89 2f       	mov	r24, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	bc 01       	movw	r22, r24
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	9c 01       	movw	r18, r24
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	22 0f       	add	r18, r18
     d5e:	33 1f       	adc	r19, r19
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	cb 01       	movw	r24, r22
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	84 0f       	add	r24, r20
     d6c:	95 1f       	adc	r25, r21
     d6e:	24 8d       	ldd	r18, Z+28	; 0x1c
     d70:	82 0f       	add	r24, r18
     d72:	91 1d       	adc	r25, r1
     d74:	5f 96       	adiw	r26, 0x1f	; 31
     d76:	9c 93       	st	X, r25
     d78:	8e 93       	st	-X, r24
     d7a:	5e 97       	sbiw	r26, 0x1e	; 30
									(GPS_BUFFER[RMC_LAT + 6]	* 100)		+
									(GPS_BUFFER[RMC_LAT + 7]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 8]));
		SYS_GPS.NS = GPS_BUFFER[RMC_NS];
     d7c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d7e:	90 96       	adiw	r26, 0x20	; 32
     d80:	8c 93       	st	X, r24
     d82:	e2 e2       	ldi	r30, 0x22	; 34
     d84:	f2 e0       	ldi	r31, 0x02	; 2
     d86:	a0 ea       	ldi	r26, 0xA0	; 160
     d88:	b2 e0       	ldi	r27, 0x02	; 2
     d8a:	2c e2       	ldi	r18, 0x2C	; 44
     d8c:	32 e0       	ldi	r19, 0x02	; 2
		//D. LONGITUDE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LONGITUDE; i++){
		SYS_GPS.LONGITUDE_ASCII[i] = GPS_BUFFER[RMC_LON + i];
     d8e:	81 91       	ld	r24, Z+
     d90:	8d 93       	st	X+, r24
									(GPS_BUFFER[RMC_LAT + 7]	* 10)		+
									(GPS_BUFFER[RMC_LAT + 8]));
		SYS_GPS.NS = GPS_BUFFER[RMC_NS];
		//D. LONGITUDE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_LONGITUDE; i++){
     d92:	e2 17       	cp	r30, r18
     d94:	f3 07       	cpc	r31, r19
     d96:	d9 f7       	brne	.-10     	; 0xd8e <GPS_parse_data+0x180>
		SYS_GPS.LONGITUDE_ASCII[i] = GPS_BUFFER[RMC_LON + i];
		}
		//Compress to decimal:
		SYS_GPS.longitude_H =	(	(GPS_BUFFER[RMC_LON]		* 10000)	+
     d98:	cf e7       	ldi	r28, 0x7F	; 127
     d9a:	d2 e0       	ldi	r29, 0x02	; 2
     d9c:	e2 e0       	ldi	r30, 0x02	; 2
     d9e:	f2 e0       	ldi	r31, 0x02	; 2
     da0:	40 a1       	ldd	r20, Z+32	; 0x20
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	97 e2       	ldi	r25, 0x27	; 39
     da6:	48 9f       	mul	r20, r24
     da8:	90 01       	movw	r18, r0
     daa:	49 9f       	mul	r20, r25
     dac:	30 0d       	add	r19, r0
     dae:	11 24       	eor	r1, r1
     db0:	61 a1       	ldd	r22, Z+33	; 0x21
     db2:	48 ee       	ldi	r20, 0xE8	; 232
     db4:	53 e0       	ldi	r21, 0x03	; 3
     db6:	64 9f       	mul	r22, r20
     db8:	c0 01       	movw	r24, r0
     dba:	65 9f       	mul	r22, r21
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	22 a1       	ldd	r18, Z+34	; 0x22
     dc6:	64 e6       	ldi	r22, 0x64	; 100
     dc8:	62 9f       	mul	r22, r18
     dca:	80 0d       	add	r24, r0
     dcc:	91 1d       	adc	r25, r1
     dce:	11 24       	eor	r1, r1
     dd0:	23 a1       	ldd	r18, Z+35	; 0x23
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	d9 01       	movw	r26, r18
     dd6:	aa 0f       	add	r26, r26
     dd8:	bb 1f       	adc	r27, r27
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	2a 0f       	add	r18, r26
     de8:	3b 1f       	adc	r19, r27
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	24 a1       	ldd	r18, Z+36	; 0x24
     df0:	82 0f       	add	r24, r18
     df2:	91 1d       	adc	r25, r1
     df4:	09 2e       	mov	r0, r25
     df6:	00 0c       	add	r0, r0
     df8:	aa 0b       	sbc	r26, r26
     dfa:	bb 0b       	sbc	r27, r27
     dfc:	8b a7       	std	Y+43, r24	; 0x2b
     dfe:	9c a7       	std	Y+44, r25	; 0x2c
     e00:	ad a7       	std	Y+45, r26	; 0x2d
     e02:	be a7       	std	Y+46, r27	; 0x2e
									(GPS_BUFFER[RMC_LON + 1]	* 1000)		+
									(GPS_BUFFER[RMC_LON + 2]	* 100)		+
									(GPS_BUFFER[RMC_LON + 3]	* 10)		+
									(GPS_BUFFER[RMC_LON + 4]));
		SYS_GPS.longitude_L =	(	(GPS_BUFFER[RMC_LON + 6]	* 1000)		+
     e04:	26 a1       	ldd	r18, Z+38	; 0x26
     e06:	24 9f       	mul	r18, r20
     e08:	c0 01       	movw	r24, r0
     e0a:	25 9f       	mul	r18, r21
     e0c:	90 0d       	add	r25, r0
     e0e:	11 24       	eor	r1, r1
     e10:	27 a1       	ldd	r18, Z+39	; 0x27
     e12:	ac 01       	movw	r20, r24
     e14:	62 9f       	mul	r22, r18
     e16:	40 0d       	add	r20, r0
     e18:	51 1d       	adc	r21, r1
     e1a:	11 24       	eor	r1, r1
     e1c:	90 a5       	ldd	r25, Z+40	; 0x28
     e1e:	89 2f       	mov	r24, r25
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	bc 01       	movw	r22, r24
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	9c 01       	movw	r18, r24
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	cb 01       	movw	r24, r22
     e38:	82 0f       	add	r24, r18
     e3a:	93 1f       	adc	r25, r19
     e3c:	84 0f       	add	r24, r20
     e3e:	95 1f       	adc	r25, r21
     e40:	21 a5       	ldd	r18, Z+41	; 0x29
     e42:	82 0f       	add	r24, r18
     e44:	91 1d       	adc	r25, r1
     e46:	98 ab       	std	Y+48, r25	; 0x30
     e48:	8f a7       	std	Y+47, r24	; 0x2f
									(GPS_BUFFER[RMC_LON + 7]	* 100)		+
									(GPS_BUFFER[RMC_LON + 8]	* 10)		+
									(GPS_BUFFER[RMC_LON + 9]));
		SYS_GPS.EW = GPS_BUFFER[RMC_EW];
     e4a:	83 a5       	ldd	r24, Z+43	; 0x2b
     e4c:	89 ab       	std	Y+49, r24	; 0x31
		//E. SPEED AND COURSE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_SPEED; i++){
			SYS_GPS.SPEED_ASCII[i] = GPS_BUFFER[RMC_SPEED + i];
     e4e:	25 a5       	ldd	r18, Z+45	; 0x2d
     e50:	2a ab       	std	Y+50, r18	; 0x32
     e52:	86 a5       	ldd	r24, Z+46	; 0x2e
     e54:	8b ab       	std	Y+51, r24	; 0x33
     e56:	87 a5       	ldd	r24, Z+47	; 0x2f
     e58:	8c ab       	std	Y+52, r24	; 0x34
     e5a:	90 a9       	ldd	r25, Z+48	; 0x30
     e5c:	9d ab       	std	Y+53, r25	; 0x35
		}
		//Compress to decimal:
		SYS_GPS.ground_speed_high = GPS_BUFFER[RMC_SPEED];
     e5e:	2e ab       	std	Y+54, r18	; 0x36
		SYS_GPS.ground_speed_low = ((GPS_BUFFER[RMC_SPEED + 2]		* 10)	+ 
     e60:	88 0f       	add	r24, r24
     e62:	28 2f       	mov	r18, r24
     e64:	22 0f       	add	r18, r18
     e66:	22 0f       	add	r18, r18
     e68:	82 0f       	add	r24, r18
     e6a:	98 0f       	add	r25, r24
     e6c:	9f ab       	std	Y+55, r25	; 0x37
     e6e:	e4 e3       	ldi	r30, 0x34	; 52
     e70:	f2 e0       	ldi	r31, 0x02	; 2
     e72:	a7 eb       	ldi	r26, 0xB7	; 183
     e74:	b2 e0       	ldi	r27, 0x02	; 2
     e76:	2a e3       	ldi	r18, 0x3A	; 58
     e78:	32 e0       	ldi	r19, 0x02	; 2
									(GPS_BUFFER[RMC_SPEED + 3]));
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_COURSE; i++){
			SYS_GPS.COURSE_ASCII[i] = GPS_BUFFER[RMC_COURSE + i];
     e7a:	81 91       	ld	r24, Z+
     e7c:	8d 93       	st	X+, r24
		//Compress to decimal:
		SYS_GPS.ground_speed_high = GPS_BUFFER[RMC_SPEED];
		SYS_GPS.ground_speed_low = ((GPS_BUFFER[RMC_SPEED + 2]		* 10)	+ 
									(GPS_BUFFER[RMC_SPEED + 3]));
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_COURSE; i++){
     e7e:	e2 17       	cp	r30, r18
     e80:	f3 07       	cpc	r31, r19
     e82:	d9 f7       	brne	.-10     	; 0xe7a <GPS_parse_data+0x26c>
			SYS_GPS.COURSE_ASCII[i] = GPS_BUFFER[RMC_COURSE + i];
		}
		//Compress to decimal:
		SYS_GPS.course_high =	(	(GPS_BUFFER[RMC_COURSE]			* 100)	+
     e84:	e2 e0       	ldi	r30, 0x02	; 2
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	22 a9       	ldd	r18, Z+50	; 0x32
     e8a:	83 a9       	ldd	r24, Z+51	; 0x33
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	ac 01       	movw	r20, r24
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	84 0f       	add	r24, r20
     ea2:	95 1f       	adc	r25, r21
     ea4:	34 e6       	ldi	r19, 0x64	; 100
     ea6:	23 9f       	mul	r18, r19
     ea8:	80 0d       	add	r24, r0
     eaa:	91 1d       	adc	r25, r1
     eac:	11 24       	eor	r1, r1
     eae:	24 a9       	ldd	r18, Z+52	; 0x34
     eb0:	82 0f       	add	r24, r18
     eb2:	91 1d       	adc	r25, r1
     eb4:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <SYS_GPS+0x3f>
     eb8:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <SYS_GPS+0x3e>
									(GPS_BUFFER[RMC_COURSE + 1]		* 10)	+
									(GPS_BUFFER[RMC_COURSE + 2]));
		SYS_GPS.course_low = (		(GPS_BUFFER[RMC_COURSE + 4]		* 10)	+ 
     ebc:	86 a9       	ldd	r24, Z+54	; 0x36
     ebe:	88 0f       	add	r24, r24
     ec0:	98 2f       	mov	r25, r24
     ec2:	99 0f       	add	r25, r25
     ec4:	99 0f       	add	r25, r25
     ec6:	89 0f       	add	r24, r25
     ec8:	97 a9       	ldd	r25, Z+55	; 0x37
     eca:	89 0f       	add	r24, r25
     ecc:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SYS_GPS+0x40>
     ed0:	eb e3       	ldi	r30, 0x3B	; 59
     ed2:	f2 e0       	ldi	r31, 0x02	; 2
     ed4:	a8 e8       	ldi	r26, 0x88	; 136
     ed6:	b2 e0       	ldi	r27, 0x02	; 2
     ed8:	21 e4       	ldi	r18, 0x41	; 65
     eda:	32 e0       	ldi	r19, 0x02	; 2
									(GPS_BUFFER[RMC_COURSE + 5]));
		//F. DATE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_UTC_DATE; i++){
			SYS_GPS.UTC_DATE_ASCII[i] = GPS_BUFFER[RMC_DATE + i];
     edc:	81 91       	ld	r24, Z+
     ede:	8d 93       	st	X+, r24
									(GPS_BUFFER[RMC_COURSE + 2]));
		SYS_GPS.course_low = (		(GPS_BUFFER[RMC_COURSE + 4]		* 10)	+ 
									(GPS_BUFFER[RMC_COURSE + 5]));
		//F. DATE
		//Buffer ASCII characters:
		for(uint8_t i = 0; i < GPS_BYTES_ASCII_UTC_DATE; i++){
     ee0:	2e 17       	cp	r18, r30
     ee2:	3f 07       	cpc	r19, r31
     ee4:	d9 f7       	brne	.-10     	; 0xedc <GPS_parse_data+0x2ce>
			SYS_GPS.UTC_DATE_ASCII[i] = GPS_BUFFER[RMC_DATE + i];
		}
		//Compress to decimal:
		SYS_GPS.UTC_DAY =	((GPS_BUFFER[RMC_DATE]		* 10)	+ (GPS_BUFFER[RMC_DATE + 1]));
     ee6:	af e7       	ldi	r26, 0x7F	; 127
     ee8:	b2 e0       	ldi	r27, 0x02	; 2
     eea:	e2 e0       	ldi	r30, 0x02	; 2
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	81 ad       	ldd	r24, Z+57	; 0x39
     ef0:	88 0f       	add	r24, r24
     ef2:	98 2f       	mov	r25, r24
     ef4:	99 0f       	add	r25, r25
     ef6:	99 0f       	add	r25, r25
     ef8:	89 0f       	add	r24, r25
     efa:	92 ad       	ldd	r25, Z+58	; 0x3a
     efc:	89 0f       	add	r24, r25
     efe:	1f 96       	adiw	r26, 0x0f	; 15
     f00:	8c 93       	st	X, r24
     f02:	1f 97       	sbiw	r26, 0x0f	; 15
		SYS_GPS.UTC_MONTH = ((GPS_BUFFER[RMC_DATE + 2]	* 10)	+ (GPS_BUFFER[RMC_DATE + 3]));
     f04:	83 ad       	ldd	r24, Z+59	; 0x3b
     f06:	88 0f       	add	r24, r24
     f08:	98 2f       	mov	r25, r24
     f0a:	99 0f       	add	r25, r25
     f0c:	99 0f       	add	r25, r25
     f0e:	89 0f       	add	r24, r25
     f10:	94 ad       	ldd	r25, Z+60	; 0x3c
     f12:	89 0f       	add	r24, r25
     f14:	50 96       	adiw	r26, 0x10	; 16
     f16:	8c 93       	st	X, r24
     f18:	50 97       	sbiw	r26, 0x10	; 16
		SYS_GPS.UTC_YEAR =	((GPS_BUFFER[RMC_DATE + 4]	* 10)	+ (GPS_BUFFER[RMC_DATE + 5]));
     f1a:	85 ad       	ldd	r24, Z+61	; 0x3d
     f1c:	88 0f       	add	r24, r24
     f1e:	98 2f       	mov	r25, r24
     f20:	99 0f       	add	r25, r25
     f22:	99 0f       	add	r25, r25
     f24:	89 0f       	add	r24, r25
     f26:	96 ad       	ldd	r25, Z+62	; 0x3e
     f28:	89 0f       	add	r24, r25
     f2a:	51 96       	adiw	r26, 0x11	; 17
     f2c:	8c 93       	st	X, r24
	
	//?. Enable stream, thereby flushing the buffer of all its contents.
	GPS_enable_stream();
     f2e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPS_enable_stream>
	
};
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <LCD_setText_cursor>:
	grid.yoff = yOff;
	grid.fg = fg;
	grid.bg = bg;
	grid.isDrawn = TRUE;
	
}
     f3c:	e0 e6       	ldi	r30, 0x60	; 96
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	93 83       	std	Z+3, r25	; 0x03
     f46:	82 83       	std	Z+2, r24	; 0x02
     f48:	75 83       	std	Z+5, r23	; 0x05
     f4a:	64 83       	std	Z+4, r22	; 0x04
     f4c:	08 95       	ret

00000f4e <LCD_setText_size>:
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	98 0f       	add	r25, r24
     f52:	98 30       	cpi	r25, 0x08	; 8
     f54:	08 f0       	brcs	.+2      	; 0xf58 <LCD_setText_size+0xa>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_start+0x6>
     f5c:	08 95       	ret

00000f5e <LCD_setText_all>:
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	79 01       	movw	r14, r18
     f6c:	c0 e6       	ldi	r28, 0x60	; 96
     f6e:	d0 e0       	ldi	r29, 0x00	; 0
     f70:	99 83       	std	Y+1, r25	; 0x01
     f72:	88 83       	st	Y, r24
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	7d 83       	std	Y+5, r23	; 0x05
     f7a:	6c 83       	std	Y+4, r22	; 0x04
     f7c:	84 2f       	mov	r24, r20
     f7e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCD_setText_size>
     f82:	f8 86       	std	Y+8, r15	; 0x08
     f84:	ef 82       	std	Y+7, r14	; 0x07
     f86:	1a 87       	std	Y+10, r17	; 0x0a
     f88:	09 87       	std	Y+9, r16	; 0x09
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <LCD_spi_init>:
     f98:	87 b3       	in	r24, 0x17	; 23
     f9a:	8a 6b       	ori	r24, 0xBA	; 186
     f9c:	87 bb       	out	0x17, r24	; 23
     f9e:	80 e5       	ldi	r24, 0x50	; 80
     fa0:	8d b9       	out	0x0d, r24	; 13
     fa2:	c3 9a       	sbi	0x18, 3	; 24
     fa4:	08 95       	ret

00000fa6 <LCD_spi_send>:
     fa6:	8f b9       	out	0x0f, r24	; 15
     fa8:	77 9b       	sbis	0x0e, 7	; 14
     faa:	fe cf       	rjmp	.-4      	; 0xfa8 <LCD_spi_send+0x2>
     fac:	08 95       	ret

00000fae <LCD_writecommand8>:
     fae:	98 b3       	in	r25, 0x18	; 24
     fb0:	97 7e       	andi	r25, 0xE7	; 231
     fb2:	98 bb       	out	0x18, r25	; 24
     fb4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCD_spi_send>
     fb8:	c3 9a       	sbi	0x18, 3	; 24
     fba:	08 95       	ret

00000fbc <LCD_writedata8>:
     fbc:	c4 9a       	sbi	0x18, 4	; 24
     fbe:	c3 98       	cbi	0x18, 3	; 24
     fc0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCD_spi_send>
     fc4:	c3 9a       	sbi	0x18, 3	; 24
     fc6:	08 95       	ret

00000fc8 <LCD_init_system>:
     fc8:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_spi_init>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
     fd2:	8f e3       	ldi	r24, 0x3F	; 63
     fd4:	9c e9       	ldi	r25, 0x9C	; 156
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <LCD_init_system+0xe>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <LCD_init_system+0x14>
     fdc:	00 00       	nop
     fde:	88 e2       	ldi	r24, 0x28	; 40
     fe0:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
     fe4:	80 ec       	ldi	r24, 0xC0	; 192
     fe6:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
     fea:	86 e2       	ldi	r24, 0x26	; 38
     fec:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
     ff0:	81 ec       	ldi	r24, 0xC1	; 193
     ff2:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
     ff6:	81 e1       	ldi	r24, 0x11	; 17
     ff8:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
     ffc:	85 ec       	ldi	r24, 0xC5	; 197
     ffe:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1002:	8c e5       	ldi	r24, 0x5C	; 92
    1004:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1008:	8c e4       	ldi	r24, 0x4C	; 76
    100a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    100e:	87 ec       	ldi	r24, 0xC7	; 199
    1010:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1014:	84 e9       	ldi	r24, 0x94	; 148
    1016:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    101a:	86 e3       	ldi	r24, 0x36	; 54
    101c:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1020:	88 e4       	ldi	r24, 0x48	; 72
    1022:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1026:	8a e3       	ldi	r24, 0x3A	; 58
    1028:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    102c:	85 e5       	ldi	r24, 0x55	; 85
    102e:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1032:	81 eb       	ldi	r24, 0xB1	; 177
    1034:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    103e:	88 e1       	ldi	r24, 0x18	; 24
    1040:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1044:	82 ef       	ldi	r24, 0xF2	; 242
    1046:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1050:	86 e2       	ldi	r24, 0x26	; 38
    1052:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    105c:	80 ee       	ldi	r24, 0xE0	; 224
    105e:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1062:	8f e1       	ldi	r24, 0x1F	; 31
    1064:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1068:	8a e1       	ldi	r24, 0x1A	; 26
    106a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    106e:	88 e1       	ldi	r24, 0x18	; 24
    1070:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    107a:	8f e0       	ldi	r24, 0x0F	; 15
    107c:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1080:	86 e0       	ldi	r24, 0x06	; 6
    1082:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1086:	85 e4       	ldi	r24, 0x45	; 69
    1088:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    108c:	87 e8       	ldi	r24, 0x87	; 135
    108e:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1092:	82 e3       	ldi	r24, 0x32	; 50
    1094:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    109e:	87 e0       	ldi	r24, 0x07	; 7
    10a0:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10aa:	87 e0       	ldi	r24, 0x07	; 7
    10ac:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10b0:	85 e0       	ldi	r24, 0x05	; 5
    10b2:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10bc:	81 ee       	ldi	r24, 0xE1	; 225
    10be:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10c8:	85 e2       	ldi	r24, 0x25	; 37
    10ca:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10ce:	87 e2       	ldi	r24, 0x27	; 39
    10d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10d4:	85 e0       	ldi	r24, 0x05	; 5
    10d6:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10da:	80 e1       	ldi	r24, 0x10	; 16
    10dc:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10e6:	8a e3       	ldi	r24, 0x3A	; 58
    10e8:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10ec:	88 e7       	ldi	r24, 0x78	; 120
    10ee:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10f2:	8d e4       	ldi	r24, 0x4D	; 77
    10f4:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10f8:	85 e0       	ldi	r24, 0x05	; 5
    10fa:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    10fe:	88 e1       	ldi	r24, 0x18	; 24
    1100:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1104:	8d e0       	ldi	r24, 0x0D	; 13
    1106:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    110a:	88 e3       	ldi	r24, 0x38	; 56
    110c:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1110:	8a e3       	ldi	r24, 0x3A	; 58
    1112:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1116:	8f e1       	ldi	r24, 0x1F	; 31
    1118:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    111c:	8a e2       	ldi	r24, 0x2A	; 42
    111e:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1134:	8f ee       	ldi	r24, 0xEF	; 239
    1136:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    113a:	8b e2       	ldi	r24, 0x2B	; 43
    113c:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1152:	8f e3       	ldi	r24, 0x3F	; 63
    1154:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1158:	87 eb       	ldi	r24, 0xB7	; 183
    115a:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1164:	86 eb       	ldi	r24, 0xB6	; 182
    1166:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    116a:	8a e0       	ldi	r24, 0x0A	; 10
    116c:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1170:	82 e8       	ldi	r24, 0x82	; 130
    1172:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1176:	87 e2       	ldi	r24, 0x27	; 39
    1178:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1182:	81 e1       	ldi	r24, 0x11	; 17
    1184:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	21 ee       	ldi	r18, 0xE1	; 225
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	20 40       	sbci	r18, 0x00	; 0
    1192:	80 40       	sbci	r24, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <LCD_init_system+0x1c6>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <LCD_init_system+0x1d0>
    1198:	00 00       	nop
    119a:	89 e2       	ldi	r24, 0x29	; 41
    119c:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	21 ee       	ldi	r18, 0xE1	; 225
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	91 50       	subi	r25, 0x01	; 1
    11a8:	20 40       	sbci	r18, 0x00	; 0
    11aa:	80 40       	sbci	r24, 0x00	; 0
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <LCD_init_system+0x1de>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <LCD_init_system+0x1e8>
    11b0:	00 00       	nop
    11b2:	8c e2       	ldi	r24, 0x2C	; 44
    11b4:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    11b8:	86 e3       	ldi	r24, 0x36	; 54
    11ba:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    11be:	88 e2       	ldi	r24, 0x28	; 40
    11c0:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    11c4:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <grid+0x12>
    11c8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <arrow+0x8>
    11cc:	08 95       	ret

000011ce <LCD_pushColor>:
    11ce:	cf 93       	push	r28
    11d0:	c8 2f       	mov	r28, r24
    11d2:	89 2f       	mov	r24, r25
    11d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    11d8:	8c 2f       	mov	r24, r28
    11da:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <LCD_setAddress>:
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	d8 2e       	mov	r13, r24
    11f4:	c9 2e       	mov	r12, r25
    11f6:	16 2f       	mov	r17, r22
    11f8:	07 2f       	mov	r16, r23
    11fa:	f4 2e       	mov	r15, r20
    11fc:	e5 2e       	mov	r14, r21
    11fe:	c2 2f       	mov	r28, r18
    1200:	d3 2f       	mov	r29, r19
    1202:	8a e2       	ldi	r24, 0x2A	; 42
    1204:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1208:	8c 2d       	mov	r24, r12
    120a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    120e:	8d 2d       	mov	r24, r13
    1210:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1214:	8e 2d       	mov	r24, r14
    1216:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    121a:	8f 2d       	mov	r24, r15
    121c:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1220:	8b e2       	ldi	r24, 0x2B	; 43
    1222:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1226:	80 2f       	mov	r24, r16
    1228:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    122c:	81 2f       	mov	r24, r17
    122e:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1232:	8d 2f       	mov	r24, r29
    1234:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    1238:	8c 2f       	mov	r24, r28
    123a:	0e 94 de 07 	call	0xfbc	; 0xfbc <LCD_writedata8>
    123e:	8c e2       	ldi	r24, 0x2C	; 44
    1240:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_writecommand8>
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	08 95       	ret

00001256 <LCD_drawPixel>:
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ea 01       	movw	r28, r20
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_setAddress>
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_pushColor>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <LCD_drawRect_filled>:
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	7a 01       	movw	r14, r20
    1286:	59 01       	movw	r10, r18
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	31 09       	sbc	r19, r1
    128c:	26 0f       	add	r18, r22
    128e:	37 1f       	adc	r19, r23
    1290:	41 50       	subi	r20, 0x01	; 1
    1292:	51 09       	sbc	r21, r1
    1294:	48 0f       	add	r20, r24
    1296:	59 1f       	adc	r21, r25
    1298:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_setAddress>
    129c:	a1 14       	cp	r10, r1
    129e:	b1 04       	cpc	r11, r1
    12a0:	89 f4       	brne	.+34     	; 0x12c4 <LCD_drawRect_filled+0x54>
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <LCD_drawRect_filled+0x60>
    12a4:	c0 e0       	ldi	r28, 0x00	; 0
    12a6:	d0 e0       	ldi	r29, 0x00	; 0
    12a8:	c8 01       	movw	r24, r16
    12aa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_pushColor>
    12ae:	21 96       	adiw	r28, 0x01	; 1
    12b0:	ec 16       	cp	r14, r28
    12b2:	fd 06       	cpc	r15, r29
    12b4:	c9 f7       	brne	.-14     	; 0x12a8 <LCD_drawRect_filled+0x38>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	c8 1a       	sub	r12, r24
    12ba:	d8 0a       	sbc	r13, r24
    12bc:	ac 14       	cp	r10, r12
    12be:	bd 04       	cpc	r11, r13
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <LCD_drawRect_filled+0x58>
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <LCD_drawRect_filled+0x60>
    12c4:	c1 2c       	mov	r12, r1
    12c6:	d1 2c       	mov	r13, r1
    12c8:	e1 14       	cp	r14, r1
    12ca:	f1 04       	cpc	r15, r1
    12cc:	59 f7       	brne	.-42     	; 0x12a4 <LCD_drawRect_filled+0x34>
    12ce:	f3 cf       	rjmp	.-26     	; 0x12b6 <LCD_drawRect_filled+0x46>
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	08 95       	ret

000012e6 <LCD_drawRect_empty>:
    12e6:	8f 92       	push	r8
    12e8:	9f 92       	push	r9
    12ea:	af 92       	push	r10
    12ec:	bf 92       	push	r11
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	7c 01       	movw	r14, r24
    1300:	6b 01       	movw	r12, r22
    1302:	ea 01       	movw	r28, r20
    1304:	49 01       	movw	r8, r18
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    130e:	b4 01       	movw	r22, r8
    1310:	61 50       	subi	r22, 0x01	; 1
    1312:	71 09       	sbc	r23, r1
    1314:	6c 0d       	add	r22, r12
    1316:	7d 1d       	adc	r23, r13
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	ae 01       	movw	r20, r28
    131e:	c7 01       	movw	r24, r14
    1320:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    1324:	94 01       	movw	r18, r8
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	b6 01       	movw	r22, r12
    132c:	c7 01       	movw	r24, r14
    132e:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    1332:	ce 01       	movw	r24, r28
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	94 01       	movw	r18, r8
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	b6 01       	movw	r22, r12
    133e:	8e 0d       	add	r24, r14
    1340:	9f 1d       	adc	r25, r15
    1342:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <LCD_drawLogo>:
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	4c 01       	movw	r8, r24
    137a:	5b 01       	movw	r10, r22
    137c:	7a 01       	movw	r14, r20
    137e:	cf e4       	ldi	r28, 0x4F	; 79
    1380:	d5 e0       	ldi	r29, 0x05	; 5
    1382:	0f 2e       	mov	r0, r31
    1384:	f3 e5       	ldi	r31, 0x53	; 83
    1386:	cf 2e       	mov	r12, r31
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	df 2e       	mov	r13, r31
    138c:	f0 2d       	mov	r31, r0
    138e:	fe 01       	movw	r30, r28
    1390:	25 91       	lpm	r18, Z+
    1392:	34 91       	lpm	r19, Z
    1394:	d9 01       	movw	r26, r18
    1396:	af 71       	andi	r26, 0x1F	; 31
    1398:	bb 27       	eor	r27, r27
    139a:	c9 01       	movw	r24, r18
    139c:	96 95       	lsr	r25
    139e:	87 95       	ror	r24
    13a0:	92 95       	swap	r25
    13a2:	82 95       	swap	r24
    13a4:	8f 70       	andi	r24, 0x0F	; 15
    13a6:	89 27       	eor	r24, r25
    13a8:	9f 70       	andi	r25, 0x0F	; 15
    13aa:	89 27       	eor	r24, r25
    13ac:	8f 71       	andi	r24, 0x1F	; 31
    13ae:	99 27       	eor	r25, r25
    13b0:	f9 01       	movw	r30, r18
    13b2:	ef 2f       	mov	r30, r31
    13b4:	ff 27       	eor	r31, r31
    13b6:	e6 95       	lsr	r30
    13b8:	ee 73       	andi	r30, 0x3E	; 62
    13ba:	ff 27       	eor	r31, r31
    13bc:	e8 57       	subi	r30, 0x78	; 120
    13be:	fe 4f       	sbci	r31, 0xFE	; 254
    13c0:	00 81       	ld	r16, Z
    13c2:	11 81       	ldd	r17, Z+1	; 0x01
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	e2 16       	cp	r14, r18
    13c8:	f1 04       	cpc	r15, r1
    13ca:	51 f4       	brne	.+20     	; 0x13e0 <LCD_drawLogo+0x80>
    13cc:	bc 01       	movw	r22, r24
    13ce:	6a 0d       	add	r22, r10
    13d0:	7b 1d       	adc	r23, r11
    13d2:	a8 01       	movw	r20, r16
    13d4:	cd 01       	movw	r24, r26
    13d6:	88 0d       	add	r24, r8
    13d8:	99 1d       	adc	r25, r9
    13da:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_drawPixel>
    13de:	16 c0       	rjmp	.+44     	; 0x140c <LCD_drawLogo+0xac>
    13e0:	8e 9d       	mul	r24, r14
    13e2:	b0 01       	movw	r22, r0
    13e4:	8f 9d       	mul	r24, r15
    13e6:	70 0d       	add	r23, r0
    13e8:	9e 9d       	mul	r25, r14
    13ea:	70 0d       	add	r23, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	6a 0d       	add	r22, r10
    13f0:	7b 1d       	adc	r23, r11
    13f2:	ae 9d       	mul	r26, r14
    13f4:	c0 01       	movw	r24, r0
    13f6:	af 9d       	mul	r26, r15
    13f8:	90 0d       	add	r25, r0
    13fa:	be 9d       	mul	r27, r14
    13fc:	90 0d       	add	r25, r0
    13fe:	11 24       	eor	r1, r1
    1400:	97 01       	movw	r18, r14
    1402:	a7 01       	movw	r20, r14
    1404:	88 0d       	add	r24, r8
    1406:	99 1d       	adc	r25, r9
    1408:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    140c:	22 96       	adiw	r28, 0x02	; 2
    140e:	cc 15       	cp	r28, r12
    1410:	dd 05       	cpc	r29, r13
    1412:	09 f0       	breq	.+2      	; 0x1416 <LCD_drawLogo+0xb6>
    1414:	bc cf       	rjmp	.-136    	; 0x138e <LCD_drawLogo+0x2e>
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

00001430 <LCD_clear>:
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	8c 01       	movw	r16, r24
    1436:	20 ef       	ldi	r18, 0xF0	; 240
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e4       	ldi	r20, 0x40	; 64
    143c:	51 e0       	ldi	r21, 0x01	; 1
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <LCD_drawChar>:
	/* Update Frame Data */
	LCD_writecommand8(0x2C);	// Perform memory write
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
    1450:	2f 92       	push	r2
    1452:	3f 92       	push	r3
    1454:	4f 92       	push	r4
    1456:	5f 92       	push	r5
    1458:	6f 92       	push	r6
    145a:	7f 92       	push	r7
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	2b 97       	sbiw	r28, 0x0b	; 11
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	7f 83       	std	Y+7, r23	; 0x07
    1486:	6e 83       	std	Y+6, r22	; 0x06
    1488:	e9 82       	std	Y+1, r14	; 0x01
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	ba 01       	movw	r22, r20
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	46 0f       	add	r20, r22
    1498:	57 1f       	adc	r21, r23
    149a:	4e 2c       	mov	r4, r14
    149c:	51 2c       	mov	r5, r1
    149e:	3c 01       	movw	r6, r24
    14a0:	1c 01       	movw	r2, r24
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
    14a2:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    14a4:	ba 01       	movw	r22, r20
    14a6:	68 1b       	sub	r22, r24
    14a8:	79 0b       	sbc	r23, r25
    14aa:	79 87       	std	Y+9, r23	; 0x09
    14ac:	68 87       	std	Y+8, r22	; 0x08
    14ae:	42 01       	movw	r8, r4
    14b0:	ae 80       	ldd	r10, Y+6	; 0x06
    14b2:	bf 80       	ldd	r11, Y+7	; 0x07
    14b4:	78 e0       	ldi	r23, 0x08	; 8
    14b6:	a7 0e       	add	r10, r23
    14b8:	b1 1c       	adc	r11, r1

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
			Color bitColor = pattern & 0x01 ? fg : bg;									//   Record color depending on state of current bit in pattern
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	3c 83       	std	Y+4, r19	; 0x04
    14be:	0d 83       	std	Y+5, r16	; 0x05
    14c0:	e1 2e       	mov	r14, r17
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
		uint8_t pattern;																//  Declare bit pattern variable
		
		if (line < 5)																	//  If the last line is NOT reached,
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	85 30       	cpi	r24, 0x05	; 5
    14c6:	bc f5       	brge	.+110    	; 0x1536 <LCD_drawChar+0xe6>
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  
    14c8:	e8 85       	ldd	r30, Y+8	; 0x08
    14ca:	f9 85       	ldd	r31, Y+9	; 0x09
    14cc:	e2 0d       	add	r30, r2
    14ce:	f3 1d       	adc	r31, r3
    14d0:	ec 5a       	subi	r30, 0xAC	; 172
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	f4 90       	lpm	r15, Z
    14d6:	30 c0       	rjmp	.+96     	; 0x1538 <LCD_drawChar+0xe8>

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
			Color bitColor = pattern & 0x01 ? fg : bg;									//   Record color depending on state of current bit in pattern
    14d8:	f0 fc       	sbrc	r15, 0
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <LCD_drawChar+0x92>
    14dc:	0d 81       	ldd	r16, Y+5	; 0x05
    14de:	1e 2d       	mov	r17, r14
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <LCD_drawChar+0x96>
    14e2:	0b 81       	ldd	r16, Y+3	; 0x03
    14e4:	1c 81       	ldd	r17, Y+4	; 0x04
			
			if(size == 1)																//   If size of text = 1,
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	91 30       	cpi	r25, 0x01	; 1
    14ea:	41 f4       	brne	.+16     	; 0x14fc <LCD_drawChar+0xac>
				LCD_drawPixel(x+line, y+bitNum, bitColor);								//	  Draw pixel using recorded bit color     
    14ec:	40 2f       	mov	r20, r16
    14ee:	51 2f       	mov	r21, r17
    14f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    14f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    14f4:	c1 01       	movw	r24, r2
    14f6:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_drawPixel>
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <LCD_drawChar+0xb8>
					
			else                                                                        //	 Else,
				LCD_drawRect_filled(x+line*size, y+bitNum*size, size, size, bitColor);	//	  Draw rectangle using recorded bit color
    14fc:	92 01       	movw	r18, r4
    14fe:	a2 01       	movw	r20, r4
    1500:	b6 01       	movw	r22, r12
    1502:	c3 01       	movw	r24, r6
    1504:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_drawRect_filled>
				
			pattern >>= 1;																//   Advance to next bit in pattern
    1508:	f6 94       	lsr	r15
    150a:	6a 85       	ldd	r22, Y+10	; 0x0a
    150c:	7b 85       	ldd	r23, Y+11	; 0x0b
    150e:	6f 5f       	subi	r22, 0xFF	; 255
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	7b 87       	std	Y+11, r23	; 0x0b
    1514:	6a 87       	std	Y+10, r22	; 0x0a
    1516:	c8 0c       	add	r12, r8
    1518:	d9 1c       	adc	r13, r9
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern

		for (uint8_t bitNum = 0; bitNum < 8; bitNum++) {								//  For each bit in current pattern,
    151a:	6a 15       	cp	r22, r10
    151c:	7b 05       	cpc	r23, r11
    151e:	e1 f6       	brne	.-72     	; 0x14d8 <LCD_drawChar+0x88>
    1520:	7a 81       	ldd	r23, Y+2	; 0x02
    1522:	7f 5f       	subi	r23, 0xFF	; 255
    1524:	7a 83       	std	Y+2, r23	; 0x02
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	28 1a       	sub	r2, r24
    152a:	38 0a       	sbc	r3, r24
    152c:	64 0c       	add	r6, r4
    152e:	75 1c       	adc	r7, r5
}

void LCD_drawChar(int16_t x, int16_t y, char c, Color fg, Color bg, uint8_t size)
{	
	/* Draw a Character with Given Text Parameters */									// ***
	for (int8_t line = 0; line < 6; line++){											// For every line of character 'c'
    1530:	76 30       	cpi	r23, 0x06	; 6
    1532:	39 f6       	brne	.-114    	; 0x14c2 <LCD_drawChar+0x72>
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <LCD_drawChar+0xf4>
		
		if (line < 5)																	//  If the last line is NOT reached,
			pattern = pgm_read_byte(font + c*5 + line);									//   Load bit pattern at designated line  

		else																			//  Else,
			pattern = 0x0;																//   Load an empty bit pattern
    1536:	f1 2c       	mov	r15, r1
    1538:	6e 81       	ldd	r22, Y+6	; 0x06
    153a:	7f 81       	ldd	r23, Y+7	; 0x07
			
			if(size == 1)																//   If size of text = 1,
				LCD_drawPixel(x+line, y+bitNum, bitColor);								//	  Draw pixel using recorded bit color     
					
			else                                                                        //	 Else,
				LCD_drawRect_filled(x+line*size, y+bitNum*size, size, size, bitColor);	//	  Draw rectangle using recorded bit color
    153c:	6b 01       	movw	r12, r22
    153e:	7b 87       	std	Y+11, r23	; 0x0b
    1540:	6a 87       	std	Y+10, r22	; 0x0a
    1542:	ca cf       	rjmp	.-108    	; 0x14d8 <LCD_drawChar+0x88>
				
			pattern >>= 1;																//   Advance to next bit in pattern
		}	
	}
}
    1544:	2b 96       	adiw	r28, 0x0b	; 11
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	7f 90       	pop	r7
    156a:	6f 90       	pop	r6
    156c:	5f 90       	pop	r5
    156e:	4f 90       	pop	r4
    1570:	3f 90       	pop	r3
    1572:	2f 90       	pop	r2
    1574:	08 95       	ret

00001576 <LCD_printChar>:

void LCD_printChar(char c)
{
    1576:	ef 92       	push	r14
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
	/* Draw 'c' */																// ***
	if (c == '\n') {															// If the character is '\n'
    1580:	8a 30       	cpi	r24, 0x0A	; 10
    1582:	89 f4       	brne	.+34     	; 0x15a6 <LCD_printChar+0x30>
		pencil.y += pencil.size * 8;											//  Move pencil cursor down and 
    1584:	e0 e6       	ldi	r30, 0x60	; 96
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	26 81       	ldd	r18, Z+6	; 0x06
    158a:	84 81       	ldd	r24, Z+4	; 0x04
    158c:	95 81       	ldd	r25, Z+5	; 0x05
    158e:	38 e0       	ldi	r19, 0x08	; 8
    1590:	23 9f       	mul	r18, r19
    1592:	80 0d       	add	r24, r0
    1594:	91 1d       	adc	r25, r1
    1596:	11 24       	eor	r1, r1
    1598:	95 83       	std	Z+5, r25	; 0x05
    159a:	84 83       	std	Z+4, r24	; 0x04
		pencil.x = pencil.xorigin;															//  Move pencil cursor all the way to the left
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	93 83       	std	Z+3, r25	; 0x03
    15a2:	82 83       	std	Z+2, r24	; 0x02
    15a4:	1d c0       	rjmp	.+58     	; 0x15e0 <LCD_printChar+0x6a>
    15a6:	48 2f       	mov	r20, r24
	}
	
	else {																		// Else, 
		LCD_drawChar(pencil.x, pencil.y, c, pencil.fg, pencil.bg, pencil.size);	// Draw character using pencil
    15a8:	c0 e6       	ldi	r28, 0x60	; 96
    15aa:	d0 e0       	ldi	r29, 0x00	; 0
    15ac:	09 85       	ldd	r16, Y+9	; 0x09
    15ae:	1a 85       	ldd	r17, Y+10	; 0x0a
    15b0:	2f 81       	ldd	r18, Y+7	; 0x07
    15b2:	38 85       	ldd	r19, Y+8	; 0x08
    15b4:	6c 81       	ldd	r22, Y+4	; 0x04
    15b6:	7d 81       	ldd	r23, Y+5	; 0x05
    15b8:	ee 80       	ldd	r14, Y+6	; 0x06
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	9b 81       	ldd	r25, Y+3	; 0x03
    15be:	0e 94 28 0a 	call	0x1450	; 0x1450 <LCD_drawChar>
		pencil.x += pencil.size * 6;											// Move pencil cursor 6 px to the right
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 01       	movw	r18, r24
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	82 0f       	add	r24, r18
    15ce:	93 1f       	adc	r25, r19
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 81       	ldd	r18, Y+2	; 0x02
    15d6:	3b 81       	ldd	r19, Y+3	; 0x03
    15d8:	82 0f       	add	r24, r18
    15da:	93 1f       	adc	r25, r19
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	8a 83       	std	Y+2, r24	; 0x02
	}
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ef 90       	pop	r14
    15ea:	08 95       	ret

000015ec <LCD_print_str>:
	pencil.x += pencil.size * 6 * spaces;	// Move cursor in the x-direction
	pencil.y += (pencil.size * 7) * lines; 	// Move cursor in the y-direction
}

void LCD_print_str(char * str)
{
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
	/* Print all letters of 'str' */			// ***
	for(uint8_t i = 0; i < strlen(str); i++)	// For each letter in 'str'
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <LCD_print_str+0x1a>
		LCD_printChar(str[i]);					//  Print letter
    15f8:	fe 01       	movw	r30, r28
    15fa:	e8 0f       	add	r30, r24
    15fc:	f9 1f       	adc	r31, r25
    15fe:	80 81       	ld	r24, Z
    1600:	0e 94 bb 0a 	call	0x1576	; 0x1576 <LCD_printChar>
}

void LCD_print_str(char * str)
{
	/* Print all letters of 'str' */			// ***
	for(uint8_t i = 0; i < strlen(str); i++)	// For each letter in 'str'
    1604:	1f 5f       	subi	r17, 0xFF	; 255
    1606:	81 2f       	mov	r24, r17
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fe 01       	movw	r30, r28
    160c:	01 90       	ld	r0, Z+
    160e:	00 20       	and	r0, r0
    1610:	e9 f7       	brne	.-6      	; 0x160c <LCD_print_str+0x20>
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	ec 1b       	sub	r30, r28
    1616:	fd 0b       	sbc	r31, r29
    1618:	8e 17       	cp	r24, r30
    161a:	9f 07       	cpc	r25, r31
    161c:	68 f3       	brcs	.-38     	; 0x15f8 <LCD_print_str+0xc>
		LCD_printChar(str[i]);					//  Print letter
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	08 95       	ret

00001626 <__vector_11>:
//								INTERRUPTS    											          //
////////////////////////////////////////////////////////////////////////////////////////////////////
/* KEYPAD INTERRUPT FOR FSM */

/* GPS INTERRUPT FOR PARSING */
ISR(USARTRXC_vect){
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	cf 93       	push	r28
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
	
	//Receive the byte to empty out the buffer, then operate on it:
	char vector_data = GPS_receive_byte();
    164a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <GPS_receive_byte>
    164e:	c8 2f       	mov	r28, r24

	//Always start with an overflow check:
	// -Since the sentence length won't exceed 120, we should worry if it gets to 121.
	// -Should this happen, a hard reset is necessary, so we'll do exactly that.
	if(GPS_BUFFER_INDEX > 120){GPS_flush_buffer();}
    1650:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <GPS_BUFFER_INDEX>
    1654:	89 37       	cpi	r24, 0x79	; 121
    1656:	10 f0       	brcs	.+4      	; 0x165c <__vector_11+0x36>
    1658:	0e 94 ba 05 	call	0xb74	; 0xb74 <GPS_flush_buffer>
	
	//Filter out whether or not this data can be transferred to the buffer:
	//	-This requires either that the received character is '$' or GPS_MESSAGE_READY = 1;
	if(vector_data == '$'){
    165c:	c4 32       	cpi	r28, 0x24	; 36
    165e:	49 f4       	brne	.+18     	; 0x1672 <__vector_11+0x4c>
		GPS_MESSAGE_READY = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <__data_end>
		//These assignments help with buffering alignment.
		GPS_BUFFER[0] = '$';
    1666:	94 e2       	ldi	r25, 0x24	; 36
    1668:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <GPS_BUFFER>
		GPS_BUFFER_INDEX = 1;
    166c:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <GPS_BUFFER_INDEX>
    1670:	17 c0       	rjmp	.+46     	; 0x16a0 <__vector_11+0x7a>
	}
	//If the character received is instead a terminator, begin the parsing!
	else if((vector_data == '*') && (GPS_MESSAGE_READY)){
    1672:	ca 32       	cpi	r28, 0x2A	; 42
    1674:	39 f4       	brne	.+14     	; 0x1684 <__vector_11+0x5e>
    1676:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__data_end>
    167a:	88 23       	and	r24, r24
    167c:	89 f0       	breq	.+34     	; 0x16a0 <__vector_11+0x7a>
		GPS_parse_data();
    167e:	0e 94 07 06 	call	0xc0e	; 0xc0e <GPS_parse_data>
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <__vector_11+0x7a>
	}
	//If neither character was detected, but '$' appeared previously, then just buffer the characters:
	else if(GPS_MESSAGE_READY){
    1684:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__data_end>
    1688:	88 23       	and	r24, r24
    168a:	51 f0       	breq	.+20     	; 0x16a0 <__vector_11+0x7a>
		GPS_BUFFER[GPS_BUFFER_INDEX] = vector_data;
    168c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <GPS_BUFFER_INDEX>
    1690:	e8 2f       	mov	r30, r24
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	ee 5f       	subi	r30, 0xFE	; 254
    1696:	fd 4f       	sbci	r31, 0xFD	; 253
    1698:	c0 83       	st	Z, r28
		GPS_BUFFER_INDEX++;
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <GPS_BUFFER_INDEX>
	}
	
}
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	cf 91       	pop	r28
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	7f 91       	pop	r23
    16b0:	6f 91       	pop	r22
    16b2:	5f 91       	pop	r21
    16b4:	4f 91       	pop	r20
    16b6:	3f 91       	pop	r19
    16b8:	2f 91       	pop	r18
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <main>:
	///////////////
	//   SETUP   //
	///////////////
	
	/* PORTS */
	DDRA = 0xFF;	//Port A is not currently used, but may assert slaves in the future.
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;	
    16c8:	1b ba       	out	0x1b, r1	; 27
	
	DDRB = 0xCD;	//Port B contains:
    16ca:	8d ec       	ldi	r24, 0xCD	; 205
    16cc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x32;	// SPI, INT2 ( Pin 3 ), connection to LCD ( data out ).
    16ce:	82 e3       	ldi	r24, 0x32	; 50
    16d0:	88 bb       	out	0x18, r24	; 24
	
	DDRC = 0x00;	//Port C contains:
    16d2:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;	// JTAG interface; this renders some of the pins unusable as I/O.
    16d4:	15 ba       	out	0x15, r1	; 21
	
	DDRD = 0b00010010;	//Port D contains:
    16d6:	82 e1       	ldi	r24, 0x12	; 18
    16d8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x80;	// USART, INT0, INT1, buzzer driver pin
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	82 bb       	out	0x12, r24	; 18
	
	/* RECOVERY */
	//Recovery program is currently defined in the EEPROM driver.
	EEPROM_enable();
    16de:	0e 94 5b 05 	call	0xab6	; 0xab6 <EEPROM_enable>
	//This recovery program must have two components!
	//EEPROM_recovery(); AND SD_recovery(); which is not yet available!
	EEPROM_recovery();				//Reacquire old persistent information.
    16e2:	0e 94 67 05 	call	0xace	; 0xace <EEPROM_recovery>
	/* TIMERS/BUZZER */
	

	/* DISPLAY */
	uint16_t text_x = 92, text_y = 184;
	LCD_init_system();				// Init LCD
    16e6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_init_system>
	init_buzzer();					// Init Buzzer
    16ea:	0e 94 56 05 	call	0xaac	; 0xaac <init_buzzer>
	APP_generate_menu(LOADINGMENU);	// Display Loading Screen
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 43 05 	call	0xa86	; 0xa86 <APP_generate_menu>
	LCD_setText_all(text_x,text_y,1,WHITE,GREY);
    16f4:	08 e6       	ldi	r16, 0x68	; 104
    16f6:	1a e4       	ldi	r17, 0x4A	; 74
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	68 eb       	ldi	r22, 0xB8	; 184
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	8c e5       	ldi	r24, 0x5C	; 92
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_setText_all>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    170a:	8f e3       	ldi	r24, 0x3F	; 63
    170c:	9c e9       	ldi	r25, 0x9C	; 156
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <main+0x4a>
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <main+0x50>
    1714:	00 00       	nop
	_delay_ms(20);
	
	
	/* GPS */
	//Initialize communication, then configure MTK3339 firmware, then open up.
	GPS_BUFFER_INDEX = 0;			//Begin at start of data buffer.
    1716:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <GPS_BUFFER_INDEX>
	GPS_MESSAGE_READY= 0;			//Buffer will begin to fill normally.
    171a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__data_end>
	LCD_print_str("Initializing USART...    ");
    171e:	84 e9       	ldi	r24, 0x94	; 148
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	GPS_init_USART(MY_UBBR);
    1726:	83 e3       	ldi	r24, 0x33	; 51
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 80 05 	call	0xb00	; 0xb00 <GPS_init_USART>
	
	LCD_setText_cursor(text_x,text_y);
    172e:	68 eb       	ldi	r22, 0xB8	; 184
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	8c e5       	ldi	r24, 0x5C	; 92
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_setText_cursor>
	LCD_print_str("Configuring Firmware...  ");
    173a:	8e ea       	ldi	r24, 0xAE	; 174
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	GPS_configure_firmware();
    1742:	0e 94 8b 05 	call	0xb16	; 0xb16 <GPS_configure_firmware>
	
	LCD_setText_cursor(text_x,text_y);
    1746:	68 eb       	ldi	r22, 0xB8	; 184
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	8c e5       	ldi	r24, 0x5C	; 92
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_setText_cursor>
	LCD_print_str("Enabling Stream...       ");
    1752:	88 ec       	ldi	r24, 0xC8	; 200
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <LCD_print_str>
	APP_generate_menu(DEBUGMENU);
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	0e 94 43 05 	call	0xa86	; 0xa86 <APP_generate_menu>
	GPS_enable_stream();			//Begin receiving data
    1760:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPS_enable_stream>

	/* INTERRUPTS */
	sei();
    1764:	78 94       	sei
    1766:	ff cf       	rjmp	.-2      	; 0x1766 <main+0xa2>

00001768 <_exit>:
    1768:	f8 94       	cli

0000176a <__stop_program>:
    176a:	ff cf       	rjmp	.-2      	; 0x176a <__stop_program>
