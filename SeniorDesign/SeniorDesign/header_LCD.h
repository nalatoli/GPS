////////////////////////////////////////////////////////////////////////////////////////////////////
//									          LCD Header										  //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef HEADER_LCD_H
#define HEADER_LCD_H
////////////////////////////////////////////////////////////////////////////////////////////////////
//											   Libraries										  //
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#define F_CPU 8E6
#include "util/delay.h"
#include "header_KEYPAD.h"
////////////////////////////////////////////////////////////////////////////////////////////////////
//									        Type Definitions								      //
////////////////////////////////////////////////////////////////////////////////////////////////////

/***************************************************************************************************
	Type Definition: Color
	Description:
		Identifies a 16-bit value as an RGB565 formatted code. The format of RGB565 is:
			
			<R4><R3><R2><R1><R0><G5><G4><G3><G2><G1><G0><B4><B3><B2><B1><B0>
			
		Where:
			R[4:0] (RED) is the most significant (first oncoming) 5 bits in an oncoming transmission
			G[4:0] (GREEN) is the next (second oncoming) 5 bits in an oncoming transmission
			B[4:0] (BLUE) is least significant (third oncoming) 5 bits in an oncoming transmission
			 
***************************************************************************************************/	
typedef uint16_t Color;

/***************************************************************************************************
	Type Definition: OutlineImage (Enumeration)
	Description:
		Identifies outlined images that can be drawn with the 'drawImage' function. The 
		(uniformly-scalable) dimensions of image is:
		
		 Image | Height | Width
		-------|--------|-------
		 CARD  |   22   |  16
		 GPS   |   14   |  16
			
***************************************************************************************************/
typedef enum {
	CARDICON,
	GPSICON
} OutlineImage;

/***************************************************************************************************
	Type Definition: Vector2 (Data Structure)
	Description:
		Defines direction and magnitude of a 2-D Vector. The embedded data types are:
		
			x: magnitude of vector in x-direction [px]
			y: magnitude of vector in y-direction [px]
			
		A 2-D vector can be used to describe position relative to a reference point (ex: coordinates)
		or can be used to describe direction (ex: object shift).
		
***************************************************************************************************/
typedef struct {
	int16_t x;
	int16_t y;
} Vector2;

/***************************************************************************************************
	Type Definition: TextHandler (Data Structure) [EXTERNALLY AVAILABLE AS 'pencil']
	Description:
		Defines parameters for the text handler. The embedded data types are:
		
			xorigin: Absolute x-position of first character's top-left corner [px]
			x:		 absolute x-position of pending character's top-left corner [px]
			y:		 absolute y-position of pending character's top-left corner [px]
			size:	 text scaling factor
			fg:		 color of characters
			bg:		 color around characters
		
		The text handler is responsible for keeping track of pending characters. The text handler
		has its own set of functions that make manipulating the flow of prints simpler. 
		
		The text handler is instantiated inside the LCD driver file. It SHOULD NOT instantiated
		elsewhere.
		
***************************************************************************************************/
typedef struct{
	uint16_t xorigin;
	uint16_t x;
	uint16_t y;
	uint8_t size;
	Color fg;
	Color bg;
} TextHandler; 
extern TextHandler pencil;

/***************************************************************************************************
	Enumeration: ScreenType [Externally Available as 'screen']
	Description:
		Organizes screens for generate and refresh functions on the API level. The types are: 
			
			MAIN:  Screen that application loads first, which connects to all other screens
			DEBUG: Screen displaying GPS parameters in list format for debugging
			TRACE: Screen displaying GPS parameters in panes, along with map 
			 
***************************************************************************************************/
typedef enum {
	MAINSCREEN,
	DEBUGSCREEN,
	TRACESCREEN
} ScreenType;
extern ScreenType screen;

////////////////////////////////////////////////////////////////////////////////////////////////////
//										  Public Functions										  //
////////////////////////////////////////////////////////////////////////////////////////////////////

/***************************************************************************************************
	Function: init
		- Used for initializing LCD module. Configures following MCU, ILI9341, and driver settings:
		
			1. MCU SPI Interface / Control Pin Directions
			2. Power
			3. Memory
			4. Frame Rate
			5. Gamma Control
			6. DDRAM
			7. Screen
			8. OIO (One-Instance-Object) States		
		
***************************************************************************************************/
void LCD_init();

/***************************************************************************************************
	Function: drawPixel
		- Draws 'color'-colored pixel at coordinates ('x','y').
		
***************************************************************************************************/
void LCD_drawPixel (uint16_t x, uint16_t y, Color color);

/***************************************************************************************************
	Function: drawRect_filled	
		- Draws 'color'-colored filled rectangle at pivot-coordinates ('x','y') [PIVOT = TOPLEFT] 
		  with width 'w' and height 'h'.	
		
***************************************************************************************************/	
void LCD_drawRect_filled (uint16_t x, uint16_t y, uint16_t w, uint16_t h, Color color);

/***************************************************************************************************
	Function: drawRect_empty	
		- Draws 'color'-colored empty rectangle [THICKNESS = 1] at pivot-coordinates ('x','y')
	      [PIVOT = TOPLEFT] with width 'w' and height 'h'.
		
***************************************************************************************************/
void LCD_drawRect_empty (uint16_t x, uint16_t y, uint16_t w, uint16_t h, Color color);

/***************************************************************************************************
	Function: drawCircle_filled	
		- Draws 'color'-colored filled circle at pivot-coordinates ('x0','y0') [PIVOT = CENTER]
	      with radius 'radius'.
		
***************************************************************************************************/
void LCD_drawCircle_filled(uint16_t x0, uint16_t y0, uint8_t radius, Color color);

/***************************************************************************************************
	Function: drawCircle_empty	
		- Draws 'color'-colored empty circle [THICKNESS = 1] at pivot-coordinates ('x0','y0')
	      [PIVOT = CENTER] with radius 'radius'.
		
***************************************************************************************************/
void LCD_drawCircle_empty(uint16_t x0, uint16_t y0, uint8_t radius, Color color);

/***************************************************************************************************
	Function: drawLogo	
		- Draws 30 x 30 [px] "Power Couple" logo at pivot-coordinates ('x','y') [PIVOT = TOPLEFT] 
		  scaled by factor 'size'.
		
***************************************************************************************************/
void LCD_drawLogo(uint16_t x, uint16_t y, uint16_t size);

/***************************************************************************************************
	Function: drawArrow	
		- Draws a 'fg'-colored 29 x 29 [px] arrow at pivot-coordinates ('x','y') [PIVOT = TOPLEFT] 
		  with a rotation of 'rot' [deg] with 'bg' background color.
		! 'rot' yields different images in multiples of 10deg,  between 0 and 350 [deg] inclusive
		
***************************************************************************************************/
void LCD_drawArrow(uint16_t x, uint16_t y, int16_t rot, Color fg, Color bg);

/***************************************************************************************************
	Function: drawImage	
		- Draws a 'fg'-colored 'type' image at pivot-coordinates ('x','y') [PIVOT = TOPLEFT] 
		  with 'bg' background color.
		
***************************************************************************************************/
void LCD_drawImage(OutlineImage type, uint16_t x, uint16_t y, uint8_t size, Color color);

/***************************************************************************************************
	Function: clearScreen_down	
		- Fills entire screen with 'color'-colored pixels starting from top to bottom
		
***************************************************************************************************/
void LCD_clearScreen_down (Color color);

/***************************************************************************************************
	Function: clearScreen_out
		- Fills entire screen with 'color'-colored pixels starting from center outwards
		
***************************************************************************************************/
void LCD_clearScreen_out (Color color);

/***************************************************************************************************
	Function: clearScreen_in
		- Fills entire screen with 'color'-colored pixels starting from bounds inwards
		
***************************************************************************************************/
void LCD_clearScreen_in (Color color);

/***************************************************************************************************
	Function: setText	
		- Sets pending-character's pivot-coordinates (cursor) to ('x','y').
		  Scales successive characters' size by 'size'.
		  Sets successive characters' text color to 'fg' and background color to 'bg'.
		
***************************************************************************************************/
void LCD_setText(uint16_t x, uint16_t y, uint8_t size, Color fg, Color bg);

/***************************************************************************************************
	Function: moveCursor	
		- Moves cursor 'spaces' spaces horizontally and 'lines' lines vertically. Each parameter
		  can be positive or negative and will move cursor with respect to text size.
		
***************************************************************************************************/
void LCD_moveCursor(int16_t spaces, int16_t lines);

/***************************************************************************************************
	Functions: print	
		- Prints text according to text handler ('setText_[parameters](parameters)'). The cursor
		  will be automatically moved horizontally.
		- '\n' will move cursor to next line, according to the text handler's xorigin
		! If end of screen is reached, text will NOT go to next line.
		
***************************************************************************************************/
void LCD_print_char(char c);
void LCD_print_str(char * str);
void LCD_print_str_len(char * str, uint8_t len);
void LCD_print_int(int num);

/***************************************************************************************************
	Functions: println	
		- Prints text according to text handler ('setText_[parameters](parameters)'). The cursor
		  will be automatically moved horizontally and move to next line automatically.
		- '\n' will move cursor to next line, according to the text handler's xorigin
		! If end of screen is reached, text will NOT go to next line.
		
***************************************************************************************************/
void LCD_println_char(char c);
void LCD_println_str(char * str);
void LCD_println_str_len(char * str, uint8_t len);
void LCD_println_int(int num);

/***************************************************************************************************
	Function: generateScreen
		- Generates 'type' menu. The objects generated for each screen is:
			
			MAIN: Basic screen with the following options:
				- Navigation Data - Generates DEBUG screen on selection
				- Start Trace - Generates TRACE screen on selection
			DEBUG: Screen displaying list of GPS parameters and the following options:
				- Save Coordinate - Saves current coordinate into APP memory
				- Exit - Generates MAIN screen
			TRACE: Screen displaying panes of GPS parameters and the following options:
				- Sleep - Turns display off, saving power
				- Exit - Terminates trace and generates MAIN screen
		
		! Overwrites current screen by performing initial clear
		
***************************************************************************************************/
void LCD_generateScreen(ScreenType type);

/***************************************************************************************************
	Function: moveScreenCursor
		- Moves option cursor to the 'optionNumber' option on the current screen. Execution of
			FSM is dependent on current option.	
		
***************************************************************************************************/
void LCD_moveScreenCursor(uint8_t optionNumber);

/***************************************************************************************************
	Function: setIconState
		- Draws 'type' and 'state' defined outline image in defined location
		
***************************************************************************************************/
void LCD_setIconState(OutlineImage type, uint8_t state);

////////////////////////////////////////////////////////////////////////////////////////////////////
//									        Public MACROS										  //
////////////////////////////////////////////////////////////////////////////////////////////////////
/* Control Constants */
#define SPPORT PORTB
#define SPDDR DDRB
#define SPPIN PINB
#define LDC 3
#define LCS 4
#define TFTHEIGHT 240
#define TFTWIDTH 320
#define ARROWSIZE 29
#define LOGOSIZE 30
#define LOGOPXCOUNT 514

/* RGB565 Color Codes */
#define BLACK       0x0000
#define NAVY        0x000F
#define DARKGREEN   0x03E0
#define DARKCYAN    0x03EF
#define MAROON      0x7800
#define PURPLE      0x780F
#define OLIVE       0x7BE0
#define LIGHTGREY   0xC618
#define GREY		0x4A68 
#define DARKGREY    0x7BEF
#define BLUE        0x001F
#define DARKBLUE    0x006A 
#define GREEN       0x07E0
#define CYAN        0x07FF
#define RED         0xF800
#define DARKRED     0x6000
#define MAGENTA     0xF81F
#define YELLOW      0xFFE0
#define WHITE       0xFFFF
#define ORANGE      0xFD20
#define GREENYELLOW 0xAFE5
#define PINK        0xF81F

/* BMP Parameters */
#define CARDBMP_H 22
#define CARDBMP_W 16
#define GPSBMP_H 12
#define GPSBMP_W 16

/* Set Universal Screen Parameters */
#define ALLSCREENS_LOGO_SIZE		1
#define ALLSCREENS_LOGO_X			(TFTWIDTH - ALLSCREENS_LOGO_SIZE * (LOGOSIZE - 1))
#define ALLSCREENS_LOGO_Y			ALLSCREENS_LOGO_SIZE
#define ALLSCREENS_CARD_SIZE		1
#define ALLSCREENS_CARD_COLORON		RED
#define ALLSCREENS_CARD_COLOROFF	GREY
#define ALLSCREENS_CARD_X			(TFTWIDTH - CARDBMP_W - 2)
#define ALLSCREENS_CARD_Y			(TFTHEIGHT - CARDBMP_H - 2)
#define ALLSCREENS_GPS_SIZE			1
#define ALLSCREENS_GPS_COLORON		ORANGE
#define ALLSCREENS_GPS_COLOROFF		GREY
#define ALLSCREENS_GPS_X			(ALLSCREENS_CARD_X - 20)
#define ALLSCREENS_GPS_Y			(ALLSCREENS_CARD_Y + 5)

/* Set Main Screen Parameters */
#define MAINSCREEN_SCREENCOLOR		NAVY
#define MAINSCREEN_IDENTIFIER_SIZE	3
#define MAINSCREEN_IDENTIFIER_XOFF	10
#define MAINSCREEN_IDENTIFIER_YOFF	10
#define MAINSCREEN_IDENTIFIER_COLOR YELLOW
#define MAINSCREEN_BORDEROFF		2
#define MAINSCREEN_TEXT_SIZE		2
#define MAINSCREEN_TEXT_COLOR		WHITE
#define MAINSCREEN_START_X			(MAINSCREEN_IDENTIFIER_XOFF + (12 * 6 * MAINSCREEN_TEXT_SIZE))
#define MAINSCREEN_START_Y			(MAINSCREEN_IDENTIFIER_YOFF + (16 * MAINSCREEN_IDENTIFIER_SIZE))
#define MAINSCREEN_OPTION_X			MAINSCREEN_IDENTIFIER_XOFF
#define MAINSCREEN_OPTION_Y			(MAINSCREEN_IDENTIFIER_YOFF + (2 * MAINSCREEN_IDENTIFIER_SIZE * 8))
#define MAINSCREEN_OPTION_SIZE		MAINSCREEN_TEXT_SIZE
#define MAINSCREEN_OPTION_COLOR		MAINSCREEN_TEXT_COLOR
#define MAINSCREEN_OPTION_COUNT		OPTION_LENGTH_MAIN

/* Set Debug Screen Parameters */
#define DEBUGSCREEN_SCREENCOLOR		BLACK
#define DEBUGSCREEN_IDENTIFIER_SIZE 3
#define DEBUGSCREEN_IDENTIFIER_XOFF 10
#define DEBUGSCREEN_IDENTIFIER_YOFF	10
#define DEBUGSCREEN_IDENTIFIER_COLOR GREEN
#define DEBUGSCREEN_BORDEROFF		2
#define DEBUGSCREEN_TEXT_SIZE		2
#define DEBUGSCREEN_TEXT_COLOR		WHITE
#define DEBUGSCREEN_START_X			(DEBUGSCREEN_IDENTIFIER_XOFF + (12 * 6 * DEBUGSCREEN_TEXT_SIZE))
#define DEBUGSCREEN_START_Y			(DEBUGSCREEN_IDENTIFIER_YOFF + (16 * DEBUGSCREEN_IDENTIFIER_SIZE))
#define DEBUGSCREEN_OPTION_X		DEBUGSCREEN_IDENTIFIER_XOFF
#define DEBUGSCREEN_OPTION_Y		(DEBUGSCREEN_IDENTIFIER_YOFF + (12 * DEBUGSCREEN_TEXT_SIZE * 8))
#define DEBUGSCREEN_OPTION_SIZE		DEBUGSCREEN_TEXT_SIZE
#define DEBUGSCREEN_OPTION_COLOR	YELLOW
#define DEBUGSCREEN_OPTION_COUNT	OPTION_LENGTH_NAV

/* Set Navigation Screen Parameters */
#define NAVSCREEN_MAP_PANECOLOR		RED
#define NAVSCREEN_MAP_PANEX			0
#define NAVSCREEN_MAP_PANEY			0
#define NAVSCREEN_MAP_PANEW			180
#define NAVSCREEN_MAP_PANEH			180
#define NAVSCREEN_MAP_X0			(NAVSCREEN_MAP_PANEW / 2)
#define NAVSCREEN_MAP_Y0			(NAVSCREEN_MAP_PANEH / 2)
#define NAVSCREEN_DIRA_PANECOLOR	LIGHTGREY
#define NAVSCREEN_DIRA_PANEX		NAVSCREEN_MAP_PANEX
#define NAVSCREEN_DIRA_PANEY		(NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_DIRA_PANEW		(NAVSCREEN_MAP_PANEW/2)
#define NAVSCREEN_DIRA_PANEH		(TFTHEIGHT-NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_DIRA_TEXTX		(5 + NAVSCREEN_DIRA_PANEX)
#define NAVSCREEN_DIRA_TEXTY		(5 + NAVSCREEN_DIRA_PANEY)
#define NAVSCREEN_DIRA_SIZE			1
#define NAVSCREEN_DIRB_PANECOLOR	LIGHTGREY
#define NAVSCREEN_DIRB_PANEX		(NAVSCREEN_MAP_PANEW/2-NAVSCREEN_MAP_PANEX)
#define NAVSCREEN_DIRB_PANEY		(NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_DIRB_PANEW		(NAVSCREEN_MAP_PANEW/2)
#define NAVSCREEN_DIRB_PANEH		(TFTHEIGHT-NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_DIRB_TEXTX		(5 + NAVSCREEN_DIRB_PANEX)
#define NAVSCREEN_DIRB_TEXTY		(5 + NAVSCREEN_DIRB_PANEY)
#define NAVSCREEN_DIRB_SIZE			1
#define NAVSCREEN_UTC_PANECOLOR		WHITE
#define NAVSCREEN_UTC_PANEX			(NAVSCREEN_MAP_PANEW-NAVSCREEN_MAP_PANEX)
#define NAVSCREEN_UTC_PANEY			(NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_UTC_PANEW			(TFTWIDTH-NAVSCREEN_MAP_PANEW-NAVSCREEN_MAP_PANEX)
#define NAVSCREEN_UTC_PANEH			(TFTHEIGHT-NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_UTC_TEXTX			(5 + NAVSCREEN_UTC_PANEX)
#define NAVSCREEN_UTC_TEXTY			(5 + NAVSCREEN_UTC_PANEY)
#define NAVSCREEN_UTC_SIZE			2
#define NAVSCREEN_INFO_PANECOLOR	ORANGE
#define NAVSCREEN_INFO_PANEX		(NAVSCREEN_MAP_PANEW-NAVSCREEN_MAP_PANEX)
#define NAVSCREEN_INFO_PANEY		NAVSCREEN_MAP_PANEY
#define NAVSCREEN_INFO_PANEW		(TFTWIDTH-NAVSCREEN_MAP_PANEW-NAVSCREEN_MAP_PANEX)
#define NAVSCREEN_INFO_PANEH		(NAVSCREEN_MAP_PANEH-NAVSCREEN_MAP_PANEY)
#define NAVSCREEN_INFO_TEXTX		(5 + NAVSCREEN_INFO_PANEX)
#define NAVSCREEN_INFO_TEXTY		(5 + NAVSCREEN_INFO_PANEY)
#define NAVSCREEN_INFO_SIZE			2
#define NAVSCREEN_SCREENCOLOR		BLACK
#define NAVSCREEN_TEXT_XOFF			5
#define NAVSCREEN_TEXT_YOFF			5
#define NAVSCREEN_OPTION_X			NAVSCREEN_INFO_TEXTX
#define NAVSCREEN_OPTION_Y			(NAVSCREEN_INFO_TEXTY + (1 * NAVSCREEN_INFO_SIZE * 8))
#define NAVSCREEN_OPTION_COLOR		YELLOW
#define NAVSCREEN_OPTION_SIZE		NAVSCREEN_INFO_SIZE
#define NAVSCREEN_OPTION_COUNT		OPTION_LENGTH_TRACE
	
////////////////////////////////////////////////////////////////////////////////////////////////////
//									      LCD Static Images										  //
////////////////////////////////////////////////////////////////////////////////////////////////////
/***************************************************************************************************
	Static Image: arrow_BMPs
	Flash Used:   1.044 kB
	Description:
		The image describes a set of bitmaps describe captures of a rotating arrow. 
		The format is as follows:
		
			arrow_BMPs[n][m]:
				n - # capture of rotating arrow [0 -> 17] (0 = 0 degrees; 17 = 85 degrees)
				m - 32-bit grouped-pixel states of corresponding capture row [pNM[31:0]]:
				
					<pNM31><pNM30><pNM29>...<pNM2><pNM1><NMp0>
					
					pNM31: state of 32nd pixel from right of capture 'n's row 'm' (furthest left)
					pNM30: state of 31rst pixel from right of capture 'n's row 'm'
					pNM29: state of 30th pixel from right of capture 'n's row 'm'
					...
					pNM2: state of 3rd pixel from right of capture 'n's row 'm'
					pNM1: state of 2nd pixel from right of capture 'n's row 'm'
					pNM0: state of 1rst pixel from right of capture 'n's row 'm' (furthest right)
		
	Drawing Procedure:			
		1. The rotation of the arrow is passed into the arrow drawing function. The passed rotation 
		   is divided by 5 to obtain the correct arrow capture 'n'. As a consequence, the passed 
		   rotation MUST be divisible by 5.
		
		2. The arrow capture is drawn row-by-row (incrementing 'm' values). The 32-bit row 
		   'pNM[31:0]' is analyzed.
		   
		3. Each pixel is drawn serially from left to right depending on the state of the pixel.
		
***************************************************************************************************/
static const uint32_t arrow_BMPs[9][ARROWSIZE] PROGMEM = {
	{0,0,0,0,0x00800000,0x00f00000,0x00fc0000,0x007f8000,0x007fe000,0x007ff800,0x003fff00,0x003fffc0,0x003ffff0,0x001ffffe,0x001fffff,0x001ffffe,0x003ffff0,0x003fffc0,0x003fff00,0x007ff800,0x007fe000,0x007f8000,0x00fc0000,0x00f00000,0x00800000,0,0,0,0},
	{0,0,0,0,0,0x01000000,0x01f80000,0x01ff4000,0x00fff800,0x007fffc0,0x007ffff6,0x003fffff,0x003ffffe,0x003ffffc,0x001ffff8,0x000fffe0,0x000fff80,0x001fff00,0x001ffc00,0x001ff800,0x001fe000,0x001fe000,0x001f0000,0x003c0000,0x00380000,0x00200000,0,0,0},
	{0,0,0,0,0,0,0,0x02d20000,0x03ffffac,0x03ffffff,0x00fffffe,0x00fffff8,0x00bffff8,0x003fffe0,0x003fffe0,0x000fff40,0x000fff00,0x000ffe00,0x000ff800,0x000ff800,0x000ff000,0x000fe000,0x000f8000,0x000f8000,0x000f0000,0x000c0000,0,0,0},
	{0,0,0,0,0,0,0x00000008,0x000007dc,0x000d7ffc,0x05fffff8,0x07fffff0,0x03ffffe0,0x00ffffe0,0x00ffffc0,0x003fffc0,0x003fff00,0x000fff00,0x0007fe00,0x0007fc00,0x0007f800,0x0007f800,0x0007f000,0x0007e000,0x0003c000,0x0003c000,0x00038000,0x00030000,0x00010000,0},
	{0,0,0,0,0x00000010,0x00000038,0x000003f8,0x00001ff0,0x0002ffe0,0x001bffe0,0x015fffc0,0x03ffffc0,0x0fffff80,0x07ffff80,0x00ffff00,0x00bfff00,0x003ffe00,0x000ffe00,0x0003fc00,0x0003fc00,0x0003fc00,0x0001f800,0x0001f800,0x0001f000,0x0000f000,0x0000e000,0x0000c000,0x00004000,0},
	{0,0,0,0x00000060,0x000000f0,0x00000be0,0x00002fc0,0x00003fc0,0x0000ffc0,0x0003ffc0,0x001fff80,0x007fff80,0x01ffff80,0x03ffff00,0x0fffff00,0x07ffff00,0x00ffff00,0x001fff00,0x0003fe00,0x0003fe00,0x0001fc00,0x0001fc00,0x0000fc00,0x0000fc00,0x00003c00,0x00003800,0x00003000,0x00001000,0},
	{0,0x00000040,0x000001c0,0x000003c0,0x00000780,0x00001f80,0x00007f80,0x00007f80,0x0001ff80,0x0003ff80,0x000fff80,0x001fff00,0x003fff00,0x007fff00,0x01ffff00,0x03ffff00,0x0bffff00,0x07ffff00,0x0057ff00,0x0003fe00,0x0000fe00,0x0000fe00,0x00003e00,0x00003e00,0x00000e00,0x00000e00,0x00000600,0,0},
	{0x00000200,0x00000600,0x00000700,0x00001e00,0x00001e00,0x00007f00,0x0000ff00,0x0001ff00,0x0001ff00,0x0003ff00,0x0007ff00,0x000fff00,0x001fff00,0x003fff00,0x003fff00,0x00ffff00,0x01ffff00,0x01ffff80,0x03ffff00,0x03fdff00,0x00007f80,0x00007f80,0x00001f80,0x00001f80,0x00000380,0x00000380,0,0,0},
	{0x00000800,0x00001c00,0x00003c00,0x00007c00,0x00007c00,0x0000fc00,0x0000fe00,0x0001fe00,0x0003fe00,0x0003fe00,0x0007fe00,0x000fff00,0x000fff00,0x003fff00,0x003fff80,0x003fff80,0x007fff80,0x007fff80,0x00ffff80,0x01ffffc0,0x01fe7fc0,0x03803fc0,0x000007c0,0x000001c0,0x000000e0,0,0,0,0},
};

/***************************************************************************************************
	Static Image: logo_BMP
	Flash Memory Used: 1.03 kB
	Description:
		The image describes a bitmap for the "Power Couple" logo. The format is as follows:
		
			logo_BMP[n]:
				n - # 16-bit offset/color-embedded pixel
				
					<c5>...<c0><y4>...<y0><x4>...<x0>
					
					x[4:0]: x-offset from left bound
					y[4:0]: y-offset from top bound
					c[5:0]: color code of logo
					
			*The color codes map to colors needed by the logo, indicated by 'logo_ColorCode'.*
					
		
	Drawing Procedure:			
		1. Each logo parameter (x,y,c) is extracted.
		
		2. Pixels/Rectangles of corresponding color are dynamically offset from the pivot position
		
***************************************************************************************************/
static const Color logo_ColorCode[] PROGMEM = {BLACK,RED,DARKRED,BLUE,DARKBLUE,YELLOW};
static const uint16_t logo_BMP[LOGOPXCOUNT] PROGMEM = {
	0xd, 0xe, 0xf, 0x10,
	0x2b, 0x2c, 0x142d, 0x142e, 0x142f, 0x1430, 0x31, 0x32, 0x33,
	0x49, 0x4a, 0x144b, 0x144c, 0x144d, 0x144e, 0x144f, 0x1450, 0x1451, 0x52,
	0x68, 0x1469, 0x146a, 0x146b, 0x146c, 0x146d, 0x146e, 0x146f, 0x1470, 0x71, 0x72, 0x73, 0x74,
	0x87, 0x1488, 0x1489, 0x148a, 0x148b, 0x148c, 0x8d, 0x8e, 0x8f, 0x1490, 0x1491, 0x1492, 0x1493, 0x1494, 0x95, 0x96, 0x97,
	0xa6, 0x14a7, 0x14a8, 0x14a9, 0x14aa, 0x14ab, 0xac, 0xae, 0x14af, 0x14b0, 0x14b1, 0x14b2, 0x14b3, 0x14b4, 0x14b5, 0x14b6, 0x14b7, 0xb8,
	0xc6, 0x14c7, 0x14c8, 0x14c9, 0xca, 0xcb, 0xcd, 0x14ce, 0x14cf, 0x14d0, 0xd1, 0xd2, 0xd3, 0x14d4, 0x14d5, 0x14d6, 0x14d7, 0x14d8, 0xd9,
	0xe5, 0x14e6, 0x14e7, 0x14e8, 0xe9, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf4, 0xf5, 0x14f6, 0x14f7, 0x14f8, 0xf9,
	0x105, 0x1506, 0x1507, 0x1508, 0x109, 0x116, 0x1517, 0x1518, 0x119,
	0x125, 0x1526, 0x1527, 0x128, 0x136, 0x1537, 0x138,
	0x144, 0x1545, 0x1546, 0x1547, 0x148, 0x157,
	0x164, 0x1565, 0x1566, 0x1567, 0x168,
	0x185, 0x1586, 0x187, 0x18f, 0x190, 0x191, 0x192, 0x193, 0x194, 0x195, 0x196, 0x197, 0x198, 0x199, 0x19a, 0x19b, 0x19c,
	0x1a1, 0x1a2, 0x1a5, 0x15a6, 0x1a7, 0x1ac, 0x1ad, 0x1af, 0xdb0, 0xdb1, 0xdb2, 0xdb3, 0xdb4, 0xdb5, 0xdb6, 0xdb7, 0xdb8, 0xdb9, 0xdba, 0x1bb, 0x11bc, 0x1bd,
	0x1c0, 0x5c1, 0x5c2, 0x1c3, 0x1c5, 0x15c6, 0x1c7, 0x1cb, 0x5cc, 0x5cd, 0x1ce, 0x1cf, 0xdd0, 0xdd1, 0xdd2, 0xdd3, 0xdd4, 0xdd5, 0xdd6, 0xdd7, 0xdd8, 0xdd9, 0xdda, 0x1db, 0x11dc, 0x1dd,
	0x1e0, 0x5e1, 0x5e2, 0x1e3, 0x1e6, 0x1eb, 0x5ec, 0x5ed, 0x1ee, 0x9ef, 0x1f0, 0xdf1, 0xdf2, 0xdf3, 0xdf4, 0xdf5, 0xdf6, 0xdf7, 0xdf8, 0xdf9, 0xdfa, 0x1fb, 0x11fc, 0x1fd,
	0x200, 0x201, 0x602, 0x603, 0x204, 0x20a, 0x60b, 0x60c, 0x20d, 0x20e, 0xa0f, 0x210, 0x211, 0x212, 0x213, 0xe14, 0xe15, 0xe16, 0x217, 0x218, 0x219, 0x21a, 0x21b, 0x121c, 0x21d,
	0x221, 0x622, 0x623, 0x224, 0x22a, 0x62b, 0x62c, 0x22d, 0xa2e, 0x22f, 0x230, 0x233, 0xe34, 0xe35, 0xe36, 0x237, 0x1238, 0x1239, 0x123a, 0x123b, 0x123c, 0x23d,
	0x241, 0x242, 0x643, 0x644, 0x245, 0x249, 0x64a, 0x64b, 0x24c, 0x24d, 0xa4e, 0x24f, 0x253, 0xe54, 0xe55, 0xe56, 0x257, 0x1258, 0x259, 0x25a, 0x25b, 0x25c,
	0x262, 0x663, 0x664, 0x265, 0x269, 0x66a, 0x66b, 0x26c, 0xa6d, 0x26e, 0x26f, 0x273, 0xe74, 0xe75, 0xe76, 0x277, 0x1278, 0x279,
	0x282, 0x283, 0x684, 0x685, 0x286, 0x288, 0x689, 0x68a, 0x28b, 0x28c, 0xa8d, 0x28e, 0x293, 0xe94, 0xe95, 0xe96, 0x297, 0x1298, 0x299,
	0x2a3, 0x6a4, 0x6a5, 0x2a6, 0x2a8, 0x6a9, 0x6aa, 0x2ab, 0xaac, 0x2ad, 0x2ae, 0x2b3, 0xeb4, 0xeb5, 0xeb6, 0x2b7, 0x12b8, 0x2b9,
	0x2c3, 0x2c4, 0x6c5, 0x6c6, 0x2c7, 0x6c8, 0x6c9, 0x2ca, 0x2cb, 0xacc, 0x2cd, 0x2d3, 0xed4, 0xed5, 0xed6, 0x2d7, 0x12d8, 0x2d9,
	0x2e4, 0x6e5, 0x6e6, 0x6e7, 0x6e8, 0x6e9, 0x2ea, 0xaeb, 0x2ec, 0x2ed, 0x2ef, 0x2f0, 0x2f1, 0x2f2, 0x2f3, 0xef4, 0xef5, 0xef6, 0x2f7, 0x2f8, 0x2f9, 0x2fa, 0x2fb, 0x2fc,
	0x304, 0x305, 0x706, 0x707, 0x708, 0x309, 0x30a, 0xb0b, 0x30c, 0x30f, 0xf10, 0xf11, 0xf12, 0xf13, 0xf14, 0xf15, 0xf16, 0xf17, 0xf18, 0xf19, 0xf1a, 0x31b, 0x131c, 0x31d,
	0x325, 0x726, 0x727, 0x728, 0x329, 0xb2a, 0x32b, 0x32c, 0x32f, 0xf30, 0xf31, 0xf32, 0xf33, 0xf34, 0xf35, 0xf36, 0xf37, 0xf38, 0xf39, 0xf3a, 0x33b, 0x133c, 0x33d,
	0x345, 0x346, 0x747, 0x348, 0x349, 0xb4a, 0x34b, 0x34f, 0xf50, 0xf51, 0xf52, 0xf53, 0xf54, 0xf55, 0xf56, 0xf57, 0xf58, 0xf59, 0xf5a, 0x35b, 0x135c, 0x35d,
	0x366, 0x767, 0x368, 0xb69, 0x36a, 0x36b, 0x36f, 0x370, 0x371, 0x372, 0x373, 0x374, 0x375, 0x376, 0x377, 0x378, 0x379, 0x37a, 0x37b, 0x137c, 0x37d,
	0x386, 0x387, 0x388, 0xb89, 0x38a, 0x38f, 0x1390, 0x1391, 0x1392, 0x1393, 0x1394, 0x1395, 0x1396, 0x1397, 0x1398, 0x1399, 0x139a, 0x139b, 0x39c, 0x39d,
	0x3a7, 0x3a8, 0x3a9, 0x3b0, 0x3b1, 0x3b2, 0x3b3, 0x3b4, 0x3b5, 0x3b6, 0x3b7, 0x3b8, 0x3b9, 0x3ba, 0x3bb, 0x3bc
};

/***************************************************************************************************
	Static Image: font
	Flash Memory Used: 1.27 kB
	Description:
		The image describes encoding for every ASCII character. The format is as follows:
		
			font[n*5]:
				c - ASCII decimal code (contains group of five 8-bit codes dC0[7:0] -> dC4[7:0])

					<dC0.7>...<dC0.0>, <dC1.7>...<dC1.0>,..., <dC4.7>...<dC4.0>
					
					dC0[7:0]: Pixel states of character 'c's 1st column from left (furthest left)
					dC1[7:0]: Pixel states of character 'c's 2nd column from left
					...
					dC4[7:0]: Pixel states of character 'c's 5th column from left (furthest right)
					
			Each group of pixel states determine whether each pixel is drawn.
					
		
	Drawing Procedure:			
		1. An ASCII character is passed in to the character drawing function, which is multiplied
		   by 5 to get to the correct corresponding ASCII character.
		
		2. Each column is iterated through, drawing pixels serially from top to bottom.
		
		3. A padding column drawn as a final sixth column (for distinction between characters).
		
***************************************************************************************************/
static const unsigned char font[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00,	0x3E, 0x5B, 0x4F, 0x5B, 0x3E,	0x3E, 0x6B, 0x4F, 0x6B, 0x3E,	0x1C, 0x3E, 0x7C, 0x3E, 0x1C,	0x18, 0x3C, 0x7E, 0x3C, 0x18,	0x1C, 0x57, 0x7D, 0x57, 0x1C,	0x1C, 0x5E, 0x7F, 0x5E, 0x1C,	0x00, 0x18, 0x3C, 0x18, 0x00,
	0xFF, 0xE7, 0xC3, 0xE7, 0xFF,	0x00, 0x18, 0x24, 0x18, 0x00,	0xFF, 0xE7, 0xDB, 0xE7, 0xFF,	0x30, 0x48, 0x3A, 0x06, 0x0E,	0x26, 0x29, 0x79, 0x29, 0x26,	0x40, 0x7F, 0x05, 0x05, 0x07,	0x40, 0x7F, 0x05, 0x25, 0x3F,	0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
	0x7F, 0x3E, 0x1C, 0x1C, 0x08,	0x08, 0x1C, 0x1C, 0x3E, 0x7F,	0x14, 0x22, 0x7F, 0x22, 0x14,	0x5F, 0x5F, 0x00, 0x5F, 0x5F,	0x06, 0x09, 0x7F, 0x01, 0x7F,	0x00, 0x66, 0x89, 0x95, 0x6A,	0x60, 0x60, 0x60, 0x60, 0x60,	0x94, 0xA2, 0xFF, 0xA2, 0x94,
	0x08, 0x04, 0x7E, 0x04, 0x08,	0x10, 0x20, 0x7E, 0x20, 0x10,	0x08, 0x08, 0x2A, 0x1C, 0x08,	0x08, 0x1C, 0x2A, 0x08, 0x08,	0x1E, 0x10, 0x10, 0x10, 0x10,	0x0C, 0x1E, 0x0C, 0x1E, 0x0C,	0x30, 0x38, 0x3E, 0x38, 0x30,	0x06, 0x0E, 0x3E, 0x0E, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x5F, 0x00, 0x00,	0x00, 0x07, 0x00, 0x07, 0x00,	0x14, 0x7F, 0x14, 0x7F, 0x14,	0x24, 0x2A, 0x7F, 0x2A, 0x12,	0x23, 0x13, 0x08, 0x64, 0x62,	0x36, 0x49, 0x56, 0x20, 0x50,	0x00, 0x08, 0x07, 0x03, 0x00,
	0x00, 0x1C, 0x22, 0x41, 0x00,	0x00, 0x41, 0x22, 0x1C, 0x00,	0x2A, 0x1C, 0x7F, 0x1C, 0x2A,	0x08, 0x08, 0x3E, 0x08, 0x08,	0x00, 0x80, 0x70, 0x30, 0x00,	0x08, 0x08, 0x08, 0x08, 0x08,	0x00, 0x00, 0x60, 0x60, 0x00,	0x20, 0x10, 0x08, 0x04, 0x02,
	0x3E, 0x51, 0x49, 0x45, 0x3E,	0x00, 0x42, 0x7F, 0x40, 0x00,	0x72, 0x49, 0x49, 0x49, 0x46,	0x21, 0x41, 0x49, 0x4D, 0x33,	0x18, 0x14, 0x12, 0x7F, 0x10,	0x27, 0x45, 0x45, 0x45, 0x39,	0x3C, 0x4A, 0x49, 0x49, 0x31,	0x41, 0x21, 0x11, 0x09, 0x07,
	0x36, 0x49, 0x49, 0x49, 0x36,	0x46, 0x49, 0x49, 0x29, 0x1E,	0x00, 0x00, 0x14, 0x00, 0x00,	0x00, 0x40, 0x34, 0x00, 0x00,	0x00, 0x08, 0x14, 0x22, 0x41,	0x14, 0x14, 0x14, 0x14, 0x14,	0x00, 0x41, 0x22, 0x14, 0x08,	0x02, 0x01, 0x59, 0x09, 0x06,
	0x3E, 0x41, 0x5D, 0x59, 0x4E,	0x7C, 0x12, 0x11, 0x12, 0x7C,	0x7F, 0x49, 0x49, 0x49, 0x36,	0x3E, 0x41, 0x41, 0x41, 0x22,	0x7F, 0x41, 0x41, 0x41, 0x3E,	0x7F, 0x49, 0x49, 0x49, 0x41,	0x7F, 0x09, 0x09, 0x09, 0x01,	0x3E, 0x41, 0x41, 0x51, 0x73,
	0x7F, 0x08, 0x08, 0x08, 0x7F,	0x00, 0x41, 0x7F, 0x41, 0x00,	0x20, 0x40, 0x41, 0x3F, 0x01,	0x7F, 0x08, 0x14, 0x22, 0x41,	0x7F, 0x40, 0x40, 0x40, 0x40,	0x7F, 0x02, 0x1C, 0x02, 0x7F,	0x7F, 0x04, 0x08, 0x10, 0x7F,	0x3E, 0x41, 0x41, 0x41, 0x3E,
	0x7F, 0x09, 0x09, 0x09, 0x06,	0x3E, 0x41, 0x51, 0x21, 0x5E,	0x7F, 0x09, 0x19, 0x29, 0x46,	0x26, 0x49, 0x49, 0x49, 0x32,	0x03, 0x01, 0x7F, 0x01, 0x03,	0x3F, 0x40, 0x40, 0x40, 0x3F,	0x1F, 0x20, 0x40, 0x20, 0x1F,	0x3F, 0x40, 0x38, 0x40, 0x3F,
	0x63, 0x14, 0x08, 0x14, 0x63,	0x03, 0x04, 0x78, 0x04, 0x03,	0x61, 0x59, 0x49, 0x4D, 0x43,	0x00, 0x7F, 0x41, 0x41, 0x41,	0x02, 0x04, 0x08, 0x10, 0x20,	0x00, 0x41, 0x41, 0x41, 0x7F,	0x04, 0x02, 0x01, 0x02, 0x04,	0x40, 0x40, 0x40, 0x40, 0x40,
	0x00, 0x03, 0x07, 0x08, 0x00,	0x20, 0x54, 0x54, 0x78, 0x40,	0x7F, 0x28, 0x44, 0x44, 0x38,	0x38, 0x44, 0x44, 0x44, 0x28,	0x38, 0x44, 0x44, 0x28, 0x7F,	0x38, 0x54, 0x54, 0x54, 0x18,	0x00, 0x08, 0x7E, 0x09, 0x02,	0x18, 0xA4, 0xA4, 0x9C, 0x78,
	0x7F, 0x08, 0x04, 0x04, 0x78,	0x00, 0x44, 0x7D, 0x40, 0x00,	0x20, 0x40, 0x40, 0x3D, 0x00,	0x7F, 0x10, 0x28, 0x44, 0x00,	0x00, 0x41, 0x7F, 0x40, 0x00,	0x7C, 0x04, 0x78, 0x04, 0x78,	0x7C, 0x08, 0x04, 0x04, 0x78,	0x38, 0x44, 0x44, 0x44, 0x38,
	0xFC, 0x18, 0x24, 0x24, 0x18,	0x18, 0x24, 0x24, 0x18, 0xFC,	0x7C, 0x08, 0x04, 0x04, 0x08,	0x48, 0x54, 0x54, 0x54, 0x24,	0x04, 0x04, 0x3F, 0x44, 0x24,	0x3C, 0x40, 0x40, 0x20, 0x7C,	0x1C, 0x20, 0x40, 0x20, 0x1C,	0x3C, 0x40, 0x30, 0x40, 0x3C,
	0x44, 0x28, 0x10, 0x28, 0x44,	0x4C, 0x90, 0x90, 0x90, 0x7C,	0x44, 0x64, 0x54, 0x4C, 0x44,	0x00, 0x08, 0x36, 0x41, 0x00,	0x00, 0x00, 0x77, 0x00, 0x00,	0x00, 0x41, 0x36, 0x08, 0x00,	0x02, 0x01, 0x02, 0x04, 0x02,	0x3C, 0x26, 0x23, 0x26, 0x3C,
	0x1E, 0xA1, 0xA1, 0x61, 0x12,	0x3A, 0x40, 0x40, 0x20, 0x7A,	0x38, 0x54, 0x54, 0x55, 0x59,	0x21, 0x55, 0x55, 0x79, 0x41,	0x22, 0x54, 0x54, 0x78, 0x42,	0x21, 0x55, 0x54, 0x78, 0x40,	0x20, 0x54, 0x55, 0x79, 0x40,	0x0C, 0x1E, 0x52, 0x72, 0x12,
	0x39, 0x55, 0x55, 0x55, 0x59,	0x39, 0x54, 0x54, 0x54, 0x59,	0x39, 0x55, 0x54, 0x54, 0x58,	0x00, 0x00, 0x45, 0x7C, 0x41,	0x00, 0x02, 0x45, 0x7D, 0x42,	0x00, 0x01, 0x45, 0x7C, 0x40,	0x7D, 0x12, 0x11, 0x12, 0x7D,	0xF0, 0x28, 0x25, 0x28, 0xF0,
	0x7C, 0x54, 0x55, 0x45, 0x00,	0x20, 0x54, 0x54, 0x7C, 0x54,	0x7C, 0x0A, 0x09, 0x7F, 0x49,	0x32, 0x49, 0x49, 0x49, 0x32,	0x3A, 0x44, 0x44, 0x44, 0x3A,	0x32, 0x4A, 0x48, 0x48, 0x30,	0x3A, 0x41, 0x41, 0x21, 0x7A,	0x3A, 0x42, 0x40, 0x20, 0x78,
	0x00, 0x9D, 0xA0, 0xA0, 0x7D,	0x3D, 0x42, 0x42, 0x42, 0x3D,	0x3D, 0x40, 0x40, 0x40, 0x3D,	0x3C, 0x24, 0xFF, 0x24, 0x24,	0x48, 0x7E, 0x49, 0x43, 0x66,	0x2B, 0x2F, 0xFC, 0x2F, 0x2B,	0xFF, 0x09, 0x29, 0xF6, 0x20,	0xC0, 0x88, 0x7E, 0x09, 0x03,
	0x20, 0x54, 0x54, 0x79, 0x41,	0x00, 0x00, 0x44, 0x7D, 0x41,	0x30, 0x48, 0x48, 0x4A, 0x32,	0x38, 0x40, 0x40, 0x22, 0x7A,	0x00, 0x7A, 0x0A, 0x0A, 0x72,	0x7D, 0x0D, 0x19, 0x31, 0x7D,	0x26, 0x29, 0x29, 0x2F, 0x28,	0x26, 0x29, 0x29, 0x29, 0x26,
	0x30, 0x48, 0x4D, 0x40, 0x20,	0x38, 0x08, 0x08, 0x08, 0x08,	0x08, 0x08, 0x08, 0x08, 0x38,	0x2F, 0x10, 0xC8, 0xAC, 0xBA,	0x2F, 0x10, 0x28, 0x34, 0xFA,	0x00, 0x00, 0x7B, 0x00, 0x00,	0x08, 0x14, 0x2A, 0x14, 0x22,	0x22, 0x14, 0x2A, 0x14, 0x08,
	0xAA, 0x00, 0x55, 0x00, 0xAA,	0xAA, 0x55, 0xAA, 0x55, 0xAA,	0x00, 0x00, 0x00, 0xFF, 0x00,	0x10, 0x10, 0x10, 0xFF, 0x00,	0x14, 0x14, 0x14, 0xFF, 0x00,	0x10, 0x10, 0xFF, 0x00, 0xFF,	0x10, 0x10, 0xF0, 0x10, 0xF0,	0x14, 0x14, 0x14, 0xFC, 0x00,
	0x14, 0x14, 0xF7, 0x00, 0xFF,	0x00, 0x00, 0xFF, 0x00, 0xFF,	0x14, 0x14, 0xF4, 0x04, 0xFC,	0x14, 0x14, 0x17, 0x10, 0x1F,	0x10, 0x10, 0x1F, 0x10, 0x1F,	0x14, 0x14, 0x14, 0x1F, 0x00,	0x10, 0x10, 0x10, 0xF0, 0x00,	0x00, 0x00, 0x00, 0x1F, 0x10,
	0x10, 0x10, 0x10, 0x1F, 0x10,	0x10, 0x10, 0x10, 0xF0, 0x10,	0x00, 0x00, 0x00, 0xFF, 0x10,	0x10, 0x10, 0x10, 0x10, 0x10,	0x10, 0x10, 0x10, 0xFF, 0x10,	0x00, 0x00, 0x00, 0xFF, 0x14,	0x00, 0x00, 0xFF, 0x00, 0xFF,	0x00, 0x00, 0x1F, 0x10, 0x17,
	0x00, 0x00, 0xFC, 0x04, 0xF4,	0x14, 0x14, 0x17, 0x10, 0x17,	0x14, 0x14, 0xF4, 0x04, 0xF4,	0x00, 0x00, 0xFF, 0x00, 0xF7,	0x14, 0x14, 0x14, 0x14, 0x14,	0x14, 0x14, 0xF7, 0x00, 0xF7,	0x14, 0x14, 0x14, 0x17, 0x14,	0x10, 0x10, 0x1F, 0x10, 0x1F,
	0x14, 0x14, 0x14, 0xF4, 0x14,	0x10, 0x10, 0xF0, 0x10, 0xF0,	0x00, 0x00, 0x1F, 0x10, 0x1F,	0x00, 0x00, 0x00, 0x1F, 0x14,	0x00, 0x00, 0x00, 0xFC, 0x14,	0x00, 0x00, 0xF0, 0x10, 0xF0,	0x10, 0x10, 0xFF, 0x10, 0xFF,	0x14, 0x14, 0x14, 0xFF, 0x14,
	0x10, 0x10, 0x10, 0x1F, 0x00,	0x00, 0x00, 0x00, 0xF0, 0x10,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xF0, 0xF0, 0xF0, 0xF0, 0xF0,	0xFF, 0xFF, 0xFF, 0x00, 0x00,	0x00, 0x00, 0x00, 0xFF, 0xFF,	0x0F, 0x0F, 0x0F, 0x0F, 0x0F,	0x38, 0x44, 0x44, 0x38, 0x44,
	0xFC, 0x4A, 0x4A, 0x4A, 0x34,	0x7E, 0x02, 0x02, 0x06, 0x06,	0x02, 0x7E, 0x02, 0x7E, 0x02,	0x63, 0x55, 0x49, 0x41, 0x63,	0x38, 0x44, 0x44, 0x3C, 0x04,	0x40, 0x7E, 0x20, 0x1E, 0x20,	0x06, 0x02, 0x7E, 0x02, 0x02,	0x99, 0xA5, 0xE7, 0xA5, 0x99,
	0x1C, 0x2A, 0x49, 0x2A, 0x1C,	0x4C, 0x72, 0x01, 0x72, 0x4C,	0x30, 0x4A, 0x4D, 0x4D, 0x30,	0x30, 0x48, 0x78, 0x48, 0x30,	0xBC, 0x62, 0x5A, 0x46, 0x3D,	0x3E, 0x49, 0x49, 0x49, 0x00,	0x7E, 0x01, 0x01, 0x01, 0x7E,	0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
	0x44, 0x44, 0x5F, 0x44, 0x44,	0x40, 0x51, 0x4A, 0x44, 0x40,	0x40, 0x44, 0x4A, 0x51, 0x40,	0x00, 0x00, 0xFF, 0x01, 0x03,	0xE0, 0x80, 0xFF, 0x00, 0x00,	0x08, 0x08, 0x6B, 0x6B, 0x08,	0x36, 0x12, 0x36, 0x24, 0x36,	0x06, 0x0F, 0x09, 0x0F, 0x06,
	0x00, 0x00, 0x18, 0x18, 0x00,	0x00, 0x00, 0x10, 0x10, 0x00,	0x30, 0x40, 0xFF, 0x01, 0x01,	0x00, 0x1F, 0x01, 0x01, 0x1E,	0x00, 0x19, 0x1D, 0x17, 0x12,	0x00, 0x3C, 0x3C, 0x3C, 0x3C,	0x00, 0x00, 0x00, 0x00, 0x00
};

/***************************************************************************************************
	Static Images: Outline BMPs
	Flash Memory Used: 384 bytes
	Description:
		The images describes bitmaps for outlined icons. The format is as follows: Each successive
		byte represents groups of 8 pixels states, where rows are defined the bitmap widths (above).
						
	Drawing Procedure:			
		1. Each byte is read grid-wise (x,y), using the height and width as guide.
		
		2. Pixels/Rectangles of corresponding designated foreground color are dynamically
		   offset from the pivot position. The background is left unaltered.
		
***************************************************************************************************/
static const uint8_t cardBMP[44] PROGMEM = { 0xf, 0xff, 0x18, 0x1, 0x30, 0x1, 0x65, 0x51, 0xc5, 0x51, 0x85, 0x51, 0x85, 0x51, 0x80, 0x1, 0xe0, 0x1, 0x20, 0x1, 0x20, 0x1, 0x20, 0x1, 0x20, 0x1, 0x20, 0x1, 0xe0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0xff, 0xff };
static const uint8_t gpsBMP[24] PROGMEM = { 0x20, 0x4, 0x40, 0x2, 0x48, 0x12, 0x89, 0x91, 0x93, 0xc9, 0x97, 0xe9, 0x97, 0xe9, 0x93, 0xc9, 0x89, 0x91, 0x48, 0x12, 0x40, 0x2, 0x20, 0x4 };
#endif